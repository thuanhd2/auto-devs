// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuditService creates a new instance of MockAuditService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditService {
	mock := &MockAuditService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuditService is an autogenerated mock type for the AuditService type
type MockAuditService struct {
	mock.Mock
}

type MockAuditService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditService) EXPECT() *MockAuditService_Expecter {
	return &MockAuditService_Expecter{mock: &_m.Mock}
}

// GetAuditLogs provides a mock function for the type MockAuditService
func (_mock *MockAuditService) GetAuditLogs(ctx context.Context, entityType string, entityID *uuid.UUID, limit int) ([]*entity.AuditLog, error) {
	ret := _mock.Called(ctx, entityType, entityID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogs")
	}

	var r0 []*entity.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID, int) ([]*entity.AuditLog, error)); ok {
		return returnFunc(ctx, entityType, entityID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID, int) []*entity.AuditLog); ok {
		r0 = returnFunc(ctx, entityType, entityID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, entityType, entityID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuditService_GetAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogs'
type MockAuditService_GetAuditLogs_Call struct {
	*mock.Call
}

// GetAuditLogs is a helper method to define mock.On call
//   - ctx
//   - entityType
//   - entityID
//   - limit
func (_e *MockAuditService_Expecter) GetAuditLogs(ctx interface{}, entityType interface{}, entityID interface{}, limit interface{}) *MockAuditService_GetAuditLogs_Call {
	return &MockAuditService_GetAuditLogs_Call{Call: _e.mock.On("GetAuditLogs", ctx, entityType, entityID, limit)}
}

func (_c *MockAuditService_GetAuditLogs_Call) Run(run func(ctx context.Context, entityType string, entityID *uuid.UUID, limit int)) *MockAuditService_GetAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID), args[3].(int))
	})
	return _c
}

func (_c *MockAuditService_GetAuditLogs_Call) Return(auditLogs []*entity.AuditLog, err error) *MockAuditService_GetAuditLogs_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *MockAuditService_GetAuditLogs_Call) RunAndReturn(run func(ctx context.Context, entityType string, entityID *uuid.UUID, limit int) ([]*entity.AuditLog, error)) *MockAuditService_GetAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// LogProjectOperation provides a mock function for the type MockAuditService
func (_mock *MockAuditService) LogProjectOperation(ctx context.Context, action entity.AuditAction, projectID uuid.UUID, oldProject *entity.Project, newProject *entity.Project, description string) error {
	ret := _mock.Called(ctx, action, projectID, oldProject, newProject, description)

	if len(ret) == 0 {
		panic("no return value specified for LogProjectOperation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.AuditAction, uuid.UUID, *entity.Project, *entity.Project, string) error); ok {
		r0 = returnFunc(ctx, action, projectID, oldProject, newProject, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuditService_LogProjectOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogProjectOperation'
type MockAuditService_LogProjectOperation_Call struct {
	*mock.Call
}

// LogProjectOperation is a helper method to define mock.On call
//   - ctx
//   - action
//   - projectID
//   - oldProject
//   - newProject
//   - description
func (_e *MockAuditService_Expecter) LogProjectOperation(ctx interface{}, action interface{}, projectID interface{}, oldProject interface{}, newProject interface{}, description interface{}) *MockAuditService_LogProjectOperation_Call {
	return &MockAuditService_LogProjectOperation_Call{Call: _e.mock.On("LogProjectOperation", ctx, action, projectID, oldProject, newProject, description)}
}

func (_c *MockAuditService_LogProjectOperation_Call) Run(run func(ctx context.Context, action entity.AuditAction, projectID uuid.UUID, oldProject *entity.Project, newProject *entity.Project, description string)) *MockAuditService_LogProjectOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AuditAction), args[2].(uuid.UUID), args[3].(*entity.Project), args[4].(*entity.Project), args[5].(string))
	})
	return _c
}

func (_c *MockAuditService_LogProjectOperation_Call) Return(err error) *MockAuditService_LogProjectOperation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuditService_LogProjectOperation_Call) RunAndReturn(run func(ctx context.Context, action entity.AuditAction, projectID uuid.UUID, oldProject *entity.Project, newProject *entity.Project, description string) error) *MockAuditService_LogProjectOperation_Call {
	_c.Call.Return(run)
	return _c
}

// LogTaskOperation provides a mock function for the type MockAuditService
func (_mock *MockAuditService) LogTaskOperation(ctx context.Context, action entity.AuditAction, taskID uuid.UUID, oldTask *entity.Task, newTask *entity.Task, description string) error {
	ret := _mock.Called(ctx, action, taskID, oldTask, newTask, description)

	if len(ret) == 0 {
		panic("no return value specified for LogTaskOperation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.AuditAction, uuid.UUID, *entity.Task, *entity.Task, string) error); ok {
		r0 = returnFunc(ctx, action, taskID, oldTask, newTask, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuditService_LogTaskOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTaskOperation'
type MockAuditService_LogTaskOperation_Call struct {
	*mock.Call
}

// LogTaskOperation is a helper method to define mock.On call
//   - ctx
//   - action
//   - taskID
//   - oldTask
//   - newTask
//   - description
func (_e *MockAuditService_Expecter) LogTaskOperation(ctx interface{}, action interface{}, taskID interface{}, oldTask interface{}, newTask interface{}, description interface{}) *MockAuditService_LogTaskOperation_Call {
	return &MockAuditService_LogTaskOperation_Call{Call: _e.mock.On("LogTaskOperation", ctx, action, taskID, oldTask, newTask, description)}
}

func (_c *MockAuditService_LogTaskOperation_Call) Run(run func(ctx context.Context, action entity.AuditAction, taskID uuid.UUID, oldTask *entity.Task, newTask *entity.Task, description string)) *MockAuditService_LogTaskOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AuditAction), args[2].(uuid.UUID), args[3].(*entity.Task), args[4].(*entity.Task), args[5].(string))
	})
	return _c
}

func (_c *MockAuditService_LogTaskOperation_Call) Return(err error) *MockAuditService_LogTaskOperation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuditService_LogTaskOperation_Call) RunAndReturn(run func(ctx context.Context, action entity.AuditAction, taskID uuid.UUID, oldTask *entity.Task, newTask *entity.Task, description string) error) *MockAuditService_LogTaskOperation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationUsecase creates a new instance of MockNotificationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationUsecase {
	mock := &MockNotificationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationUsecase is an autogenerated mock type for the NotificationUsecase type
type MockNotificationUsecase struct {
	mock.Mock
}

type MockNotificationUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationUsecase) EXPECT() *MockNotificationUsecase_Expecter {
	return &MockNotificationUsecase_Expecter{mock: &_m.Mock}
}

// RegisterHandler provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) RegisterHandler(notificationType entity.NotificationType, handler entity.NotificationHandler) error {
	ret := _mock.Called(notificationType, handler)

	if len(ret) == 0 {
		panic("no return value specified for RegisterHandler")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.NotificationType, entity.NotificationHandler) error); ok {
		r0 = returnFunc(notificationType, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type MockNotificationUsecase_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - notificationType
//   - handler
func (_e *MockNotificationUsecase_Expecter) RegisterHandler(notificationType interface{}, handler interface{}) *MockNotificationUsecase_RegisterHandler_Call {
	return &MockNotificationUsecase_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", notificationType, handler)}
}

func (_c *MockNotificationUsecase_RegisterHandler_Call) Run(run func(notificationType entity.NotificationType, handler entity.NotificationHandler)) *MockNotificationUsecase_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.NotificationType), args[1].(entity.NotificationHandler))
	})
	return _c
}

func (_c *MockNotificationUsecase_RegisterHandler_Call) Return(err error) *MockNotificationUsecase_RegisterHandler_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_RegisterHandler_Call) RunAndReturn(run func(notificationType entity.NotificationType, handler entity.NotificationHandler) error) *MockNotificationUsecase_RegisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SendTaskCreatedNotification provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) SendTaskCreatedNotification(ctx context.Context, task *entity.Task, project *entity.Project) error {
	ret := _mock.Called(ctx, task, project)

	if len(ret) == 0 {
		panic("no return value specified for SendTaskCreatedNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Task, *entity.Project) error); ok {
		r0 = returnFunc(ctx, task, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_SendTaskCreatedNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTaskCreatedNotification'
type MockNotificationUsecase_SendTaskCreatedNotification_Call struct {
	*mock.Call
}

// SendTaskCreatedNotification is a helper method to define mock.On call
//   - ctx
//   - task
//   - project
func (_e *MockNotificationUsecase_Expecter) SendTaskCreatedNotification(ctx interface{}, task interface{}, project interface{}) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	return &MockNotificationUsecase_SendTaskCreatedNotification_Call{Call: _e.mock.On("SendTaskCreatedNotification", ctx, task, project)}
}

func (_c *MockNotificationUsecase_SendTaskCreatedNotification_Call) Run(run func(ctx context.Context, task *entity.Task, project *entity.Project)) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Task), args[2].(*entity.Project))
	})
	return _c
}

func (_c *MockNotificationUsecase_SendTaskCreatedNotification_Call) Return(err error) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_SendTaskCreatedNotification_Call) RunAndReturn(run func(ctx context.Context, task *entity.Task, project *entity.Project) error) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendTaskStatusChangeNotification provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) SendTaskStatusChangeNotification(ctx context.Context, data entity.TaskStatusChangeNotificationData) error {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SendTaskStatusChangeNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatusChangeNotificationData) error); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_SendTaskStatusChangeNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTaskStatusChangeNotification'
type MockNotificationUsecase_SendTaskStatusChangeNotification_Call struct {
	*mock.Call
}

// SendTaskStatusChangeNotification is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockNotificationUsecase_Expecter) SendTaskStatusChangeNotification(ctx interface{}, data interface{}) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	return &MockNotificationUsecase_SendTaskStatusChangeNotification_Call{Call: _e.mock.On("SendTaskStatusChangeNotification", ctx, data)}
}

func (_c *MockNotificationUsecase_SendTaskStatusChangeNotification_Call) Run(run func(ctx context.Context, data entity.TaskStatusChangeNotificationData)) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskStatusChangeNotificationData))
	})
	return _c
}

func (_c *MockNotificationUsecase_SendTaskStatusChangeNotification_Call) Return(err error) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_SendTaskStatusChangeNotification_Call) RunAndReturn(run func(ctx context.Context, data entity.TaskStatusChangeNotificationData) error) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterHandler provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) UnregisterHandler(notificationType entity.NotificationType) error {
	ret := _mock.Called(notificationType)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterHandler")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.NotificationType) error); ok {
		r0 = returnFunc(notificationType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_UnregisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterHandler'
type MockNotificationUsecase_UnregisterHandler_Call struct {
	*mock.Call
}

// UnregisterHandler is a helper method to define mock.On call
//   - notificationType
func (_e *MockNotificationUsecase_Expecter) UnregisterHandler(notificationType interface{}) *MockNotificationUsecase_UnregisterHandler_Call {
	return &MockNotificationUsecase_UnregisterHandler_Call{Call: _e.mock.On("UnregisterHandler", notificationType)}
}

func (_c *MockNotificationUsecase_UnregisterHandler_Call) Run(run func(notificationType entity.NotificationType)) *MockNotificationUsecase_UnregisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.NotificationType))
	})
	return _c
}

func (_c *MockNotificationUsecase_UnregisterHandler_Call) Return(err error) *MockNotificationUsecase_UnregisterHandler_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_UnregisterHandler_Call) RunAndReturn(run func(notificationType entity.NotificationType) error) *MockNotificationUsecase_UnregisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectUsecase creates a new instance of MockProjectUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectUsecase {
	mock := &MockProjectUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectUsecase is an autogenerated mock type for the ProjectUsecase type
type MockProjectUsecase struct {
	mock.Mock
}

type MockProjectUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectUsecase) EXPECT() *MockProjectUsecase_Expecter {
	return &MockProjectUsecase_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Archive(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectUsecase_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockProjectUsecase_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) Archive(ctx interface{}, id interface{}) *MockProjectUsecase_Archive_Call {
	return &MockProjectUsecase_Archive_Call{Call: _e.mock.On("Archive", ctx, id)}
}

func (_c *MockProjectUsecase_Archive_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_Archive_Call) Return(err error) *MockProjectUsecase_Archive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectUsecase_Archive_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectUsecase_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// CheckNameExists provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) CheckNameExists(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, name, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckNameExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, name, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, name, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, name, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_CheckNameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNameExists'
type MockProjectUsecase_CheckNameExists_Call struct {
	*mock.Call
}

// CheckNameExists is a helper method to define mock.On call
//   - ctx
//   - name
//   - excludeID
func (_e *MockProjectUsecase_Expecter) CheckNameExists(ctx interface{}, name interface{}, excludeID interface{}) *MockProjectUsecase_CheckNameExists_Call {
	return &MockProjectUsecase_CheckNameExists_Call{Call: _e.mock.On("CheckNameExists", ctx, name, excludeID)}
}

func (_c *MockProjectUsecase_CheckNameExists_Call) Run(run func(ctx context.Context, name string, excludeID *uuid.UUID)) *MockProjectUsecase_CheckNameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_CheckNameExists_Call) Return(b bool, err error) *MockProjectUsecase_CheckNameExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProjectUsecase_CheckNameExists_Call) RunAndReturn(run func(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error)) *MockProjectUsecase_CheckNameExists_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Create(ctx context.Context, req CreateProjectRequest) (*entity.Project, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateProjectRequest) (*entity.Project, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateProjectRequest) *entity.Project); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateProjectRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockProjectUsecase_Expecter) Create(ctx interface{}, req interface{}) *MockProjectUsecase_Create_Call {
	return &MockProjectUsecase_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockProjectUsecase_Create_Call) Run(run func(ctx context.Context, req CreateProjectRequest)) *MockProjectUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateProjectRequest))
	})
	return _c
}

func (_c *MockProjectUsecase_Create_Call) Return(project *entity.Project, err error) *MockProjectUsecase_Create_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_Create_Call) RunAndReturn(run func(ctx context.Context, req CreateProjectRequest) (*entity.Project, error)) *MockProjectUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) Delete(ctx interface{}, id interface{}) *MockProjectUsecase_Delete_Call {
	return &MockProjectUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProjectUsecase_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_Delete_Call) Return(err error) *MockProjectUsecase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectUsecase_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetAll(ctx context.Context, params GetProjectsParams) (*GetProjectsResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *GetProjectsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetProjectsParams) (*GetProjectsResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetProjectsParams) *GetProjectsResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetProjectsResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetProjectsParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockProjectUsecase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockProjectUsecase_Expecter) GetAll(ctx interface{}, params interface{}) *MockProjectUsecase_GetAll_Call {
	return &MockProjectUsecase_GetAll_Call{Call: _e.mock.On("GetAll", ctx, params)}
}

func (_c *MockProjectUsecase_GetAll_Call) Run(run func(ctx context.Context, params GetProjectsParams)) *MockProjectUsecase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetProjectsParams))
	})
	return _c
}

func (_c *MockProjectUsecase_GetAll_Call) Return(getProjectsResult *GetProjectsResult, err error) *MockProjectUsecase_GetAll_Call {
	_c.Call.Return(getProjectsResult, err)
	return _c
}

func (_c *MockProjectUsecase_GetAll_Call) RunAndReturn(run func(ctx context.Context, params GetProjectsParams) (*GetProjectsResult, error)) *MockProjectUsecase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetByID(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProjectUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) GetByID(ctx interface{}, id interface{}) *MockProjectUsecase_GetByID_Call {
	return &MockProjectUsecase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProjectUsecase_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetByID_Call) Return(project *entity.Project, err error) *MockProjectUsecase_GetByID_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *MockProjectUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettings provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetSettings(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type MockProjectUsecase_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockProjectUsecase_Expecter) GetSettings(ctx interface{}, projectID interface{}) *MockProjectUsecase_GetSettings_Call {
	return &MockProjectUsecase_GetSettings_Call{Call: _e.mock.On("GetSettings", ctx, projectID)}
}

func (_c *MockProjectUsecase_GetSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockProjectUsecase_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *MockProjectUsecase_GetSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *MockProjectUsecase_GetSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error)) *MockProjectUsecase_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetStatistics(ctx context.Context, id uuid.UUID) (*ProjectStatistics, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 *ProjectStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ProjectStatistics, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ProjectStatistics); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type MockProjectUsecase_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) GetStatistics(ctx interface{}, id interface{}) *MockProjectUsecase_GetStatistics_Call {
	return &MockProjectUsecase_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx, id)}
}

func (_c *MockProjectUsecase_GetStatistics_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetStatistics_Call) Return(projectStatistics *ProjectStatistics, err error) *MockProjectUsecase_GetStatistics_Call {
	_c.Call.Return(projectStatistics, err)
	return _c
}

func (_c *MockProjectUsecase_GetStatistics_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*ProjectStatistics, error)) *MockProjectUsecase_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithTasks provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetWithTasks(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithTasks")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetWithTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithTasks'
type MockProjectUsecase_GetWithTasks_Call struct {
	*mock.Call
}

// GetWithTasks is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) GetWithTasks(ctx interface{}, id interface{}) *MockProjectUsecase_GetWithTasks_Call {
	return &MockProjectUsecase_GetWithTasks_Call{Call: _e.mock.On("GetWithTasks", ctx, id)}
}

func (_c *MockProjectUsecase_GetWithTasks_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_GetWithTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetWithTasks_Call) Return(project *entity.Project, err error) *MockProjectUsecase_GetWithTasks_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_GetWithTasks_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *MockProjectUsecase_GetWithTasks_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Restore(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectUsecase_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockProjectUsecase_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) Restore(ctx interface{}, id interface{}) *MockProjectUsecase_Restore_Call {
	return &MockProjectUsecase_Restore_Call{Call: _e.mock.On("Restore", ctx, id)}
}

func (_c *MockProjectUsecase_Restore_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_Restore_Call) Return(err error) *MockProjectUsecase_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectUsecase_Restore_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectUsecase_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Update(ctx context.Context, id uuid.UUID, req UpdateProjectRequest) (*entity.Project, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateProjectRequest) (*entity.Project, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateProjectRequest) *entity.Project); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateProjectRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *MockProjectUsecase_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *MockProjectUsecase_Update_Call {
	return &MockProjectUsecase_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *MockProjectUsecase_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateProjectRequest)) *MockProjectUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateProjectRequest))
	})
	return _c
}

func (_c *MockProjectUsecase_Update_Call) Return(project *entity.Project, err error) *MockProjectUsecase_Update_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateProjectRequest) (*entity.Project, error)) *MockProjectUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) UpdateSettings(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ProjectSettings) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID, settings)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ProjectSettings) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.ProjectSettings) error); ok {
		r1 = returnFunc(ctx, projectID, settings)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type MockProjectUsecase_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - settings
func (_e *MockProjectUsecase_Expecter) UpdateSettings(ctx interface{}, projectID interface{}, settings interface{}) *MockProjectUsecase_UpdateSettings_Call {
	return &MockProjectUsecase_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", ctx, projectID, settings)}
}

func (_c *MockProjectUsecase_UpdateSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings)) *MockProjectUsecase_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*entity.ProjectSettings))
	})
	return _c
}

func (_c *MockProjectUsecase_UpdateSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *MockProjectUsecase_UpdateSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *MockProjectUsecase_UpdateSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings) (*entity.ProjectSettings, error)) *MockProjectUsecase_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskUsecase creates a new instance of MockTaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskUsecase {
	mock := &MockTaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskUsecase is an autogenerated mock type for the TaskUsecase type
type MockTaskUsecase struct {
	mock.Mock
}

type MockTaskUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskUsecase) EXPECT() *MockTaskUsecase_Expecter {
	return &MockTaskUsecase_Expecter{mock: &_m.Mock}
}

// AddComment provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) AddComment(ctx context.Context, req AddCommentRequest) (*entity.TaskComment, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 *entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddCommentRequest) (*entity.TaskComment, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddCommentRequest) *entity.TaskComment); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, AddCommentRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type MockTaskUsecase_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockTaskUsecase_Expecter) AddComment(ctx interface{}, req interface{}) *MockTaskUsecase_AddComment_Call {
	return &MockTaskUsecase_AddComment_Call{Call: _e.mock.On("AddComment", ctx, req)}
}

func (_c *MockTaskUsecase_AddComment_Call) Run(run func(ctx context.Context, req AddCommentRequest)) *MockTaskUsecase_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AddCommentRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_AddComment_Call) Return(taskComment *entity.TaskComment, err error) *MockTaskUsecase_AddComment_Call {
	_c.Call.Return(taskComment, err)
	return _c
}

func (_c *MockTaskUsecase_AddComment_Call) RunAndReturn(run func(ctx context.Context, req AddCommentRequest) (*entity.TaskComment, error)) *MockTaskUsecase_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// AddDependency provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) AddDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error {
	ret := _mock.Called(ctx, taskID, dependsOnTaskID, dependencyType)

	if len(ret) == 0 {
		panic("no return value specified for AddDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, taskID, dependsOnTaskID, dependencyType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_AddDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDependency'
type MockTaskUsecase_AddDependency_Call struct {
	*mock.Call
}

// AddDependency is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - dependsOnTaskID
//   - dependencyType
func (_e *MockTaskUsecase_Expecter) AddDependency(ctx interface{}, taskID interface{}, dependsOnTaskID interface{}, dependencyType interface{}) *MockTaskUsecase_AddDependency_Call {
	return &MockTaskUsecase_AddDependency_Call{Call: _e.mock.On("AddDependency", ctx, taskID, dependsOnTaskID, dependencyType)}
}

func (_c *MockTaskUsecase_AddDependency_Call) Run(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string)) *MockTaskUsecase_AddDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *MockTaskUsecase_AddDependency_Call) Return(err error) *MockTaskUsecase_AddDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_AddDependency_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error) *MockTaskUsecase_AddDependency_Call {
	_c.Call.Return(run)
	return _c
}

// BulkArchive provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) BulkArchive(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkArchive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_BulkArchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkArchive'
type MockTaskUsecase_BulkArchive_Call struct {
	*mock.Call
}

// BulkArchive is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *MockTaskUsecase_Expecter) BulkArchive(ctx interface{}, taskIDs interface{}) *MockTaskUsecase_BulkArchive_Call {
	return &MockTaskUsecase_BulkArchive_Call{Call: _e.mock.On("BulkArchive", ctx, taskIDs)}
}

func (_c *MockTaskUsecase_BulkArchive_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *MockTaskUsecase_BulkArchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_BulkArchive_Call) Return(err error) *MockTaskUsecase_BulkArchive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_BulkArchive_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *MockTaskUsecase_BulkArchive_Call {
	_c.Call.Return(run)
	return _c
}

// BulkAssign provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) BulkAssign(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error {
	ret := _mock.Called(ctx, taskIDs, assignedTo)

	if len(ret) == 0 {
		panic("no return value specified for BulkAssign")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, taskIDs, assignedTo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_BulkAssign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkAssign'
type MockTaskUsecase_BulkAssign_Call struct {
	*mock.Call
}

// BulkAssign is a helper method to define mock.On call
//   - ctx
//   - taskIDs
//   - assignedTo
func (_e *MockTaskUsecase_Expecter) BulkAssign(ctx interface{}, taskIDs interface{}, assignedTo interface{}) *MockTaskUsecase_BulkAssign_Call {
	return &MockTaskUsecase_BulkAssign_Call{Call: _e.mock.On("BulkAssign", ctx, taskIDs, assignedTo)}
}

func (_c *MockTaskUsecase_BulkAssign_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, assignedTo string)) *MockTaskUsecase_BulkAssign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockTaskUsecase_BulkAssign_Call) Return(err error) *MockTaskUsecase_BulkAssign_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_BulkAssign_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error) *MockTaskUsecase_BulkAssign_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDelete provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) BulkDelete(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type MockTaskUsecase_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *MockTaskUsecase_Expecter) BulkDelete(ctx interface{}, taskIDs interface{}) *MockTaskUsecase_BulkDelete_Call {
	return &MockTaskUsecase_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, taskIDs)}
}

func (_c *MockTaskUsecase_BulkDelete_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *MockTaskUsecase_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_BulkDelete_Call) Return(err error) *MockTaskUsecase_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *MockTaskUsecase_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUnarchive provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) BulkUnarchive(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkUnarchive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_BulkUnarchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUnarchive'
type MockTaskUsecase_BulkUnarchive_Call struct {
	*mock.Call
}

// BulkUnarchive is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *MockTaskUsecase_Expecter) BulkUnarchive(ctx interface{}, taskIDs interface{}) *MockTaskUsecase_BulkUnarchive_Call {
	return &MockTaskUsecase_BulkUnarchive_Call{Call: _e.mock.On("BulkUnarchive", ctx, taskIDs)}
}

func (_c *MockTaskUsecase_BulkUnarchive_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *MockTaskUsecase_BulkUnarchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_BulkUnarchive_Call) Return(err error) *MockTaskUsecase_BulkUnarchive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_BulkUnarchive_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *MockTaskUsecase_BulkUnarchive_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdatePriority provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) BulkUpdatePriority(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error {
	ret := _mock.Called(ctx, taskIDs, priority)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdatePriority")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.TaskPriority) error); ok {
		r0 = returnFunc(ctx, taskIDs, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_BulkUpdatePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdatePriority'
type MockTaskUsecase_BulkUpdatePriority_Call struct {
	*mock.Call
}

// BulkUpdatePriority is a helper method to define mock.On call
//   - ctx
//   - taskIDs
//   - priority
func (_e *MockTaskUsecase_Expecter) BulkUpdatePriority(ctx interface{}, taskIDs interface{}, priority interface{}) *MockTaskUsecase_BulkUpdatePriority_Call {
	return &MockTaskUsecase_BulkUpdatePriority_Call{Call: _e.mock.On("BulkUpdatePriority", ctx, taskIDs, priority)}
}

func (_c *MockTaskUsecase_BulkUpdatePriority_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority)) *MockTaskUsecase_BulkUpdatePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.TaskPriority))
	})
	return _c
}

func (_c *MockTaskUsecase_BulkUpdatePriority_Call) Return(err error) *MockTaskUsecase_BulkUpdatePriority_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_BulkUpdatePriority_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error) *MockTaskUsecase_BulkUpdatePriority_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdateStatus provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) BulkUpdateStatus(ctx context.Context, req BulkUpdateStatusRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, BulkUpdateStatusRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_BulkUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateStatus'
type MockTaskUsecase_BulkUpdateStatus_Call struct {
	*mock.Call
}

// BulkUpdateStatus is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockTaskUsecase_Expecter) BulkUpdateStatus(ctx interface{}, req interface{}) *MockTaskUsecase_BulkUpdateStatus_Call {
	return &MockTaskUsecase_BulkUpdateStatus_Call{Call: _e.mock.On("BulkUpdateStatus", ctx, req)}
}

func (_c *MockTaskUsecase_BulkUpdateStatus_Call) Run(run func(ctx context.Context, req BulkUpdateStatusRequest)) *MockTaskUsecase_BulkUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BulkUpdateStatusRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_BulkUpdateStatus_Call) Return(err error) *MockTaskUsecase_BulkUpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_BulkUpdateStatus_Call) RunAndReturn(run func(ctx context.Context, req BulkUpdateStatusRequest) error) *MockTaskUsecase_BulkUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDuplicateTitle provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) CheckDuplicateTitle(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, projectID, title, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicateTitle")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, projectID, title, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, projectID, title, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID, title, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_CheckDuplicateTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicateTitle'
type MockTaskUsecase_CheckDuplicateTitle_Call struct {
	*mock.Call
}

// CheckDuplicateTitle is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - title
//   - excludeID
func (_e *MockTaskUsecase_Expecter) CheckDuplicateTitle(ctx interface{}, projectID interface{}, title interface{}, excludeID interface{}) *MockTaskUsecase_CheckDuplicateTitle_Call {
	return &MockTaskUsecase_CheckDuplicateTitle_Call{Call: _e.mock.On("CheckDuplicateTitle", ctx, projectID, title, excludeID)}
}

func (_c *MockTaskUsecase_CheckDuplicateTitle_Call) Run(run func(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID)) *MockTaskUsecase_CheckDuplicateTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_CheckDuplicateTitle_Call) Return(b bool, err error) *MockTaskUsecase_CheckDuplicateTitle_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTaskUsecase_CheckDuplicateTitle_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error)) *MockTaskUsecase_CheckDuplicateTitle_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) Create(ctx context.Context, req CreateTaskRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTaskRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTaskRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateTaskRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTaskUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockTaskUsecase_Expecter) Create(ctx interface{}, req interface{}) *MockTaskUsecase_Create_Call {
	return &MockTaskUsecase_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockTaskUsecase_Create_Call) Run(run func(ctx context.Context, req CreateTaskRequest)) *MockTaskUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateTaskRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_Create_Call) Return(task *entity.Task, err error) *MockTaskUsecase_Create_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_Create_Call) RunAndReturn(run func(ctx context.Context, req CreateTaskRequest) (*entity.Task, error)) *MockTaskUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubtask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) CreateSubtask(ctx context.Context, parentTaskID uuid.UUID, req CreateTaskRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, parentTaskID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubtask")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, CreateTaskRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, parentTaskID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, CreateTaskRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, parentTaskID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, CreateTaskRequest) error); ok {
		r1 = returnFunc(ctx, parentTaskID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_CreateSubtask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubtask'
type MockTaskUsecase_CreateSubtask_Call struct {
	*mock.Call
}

// CreateSubtask is a helper method to define mock.On call
//   - ctx
//   - parentTaskID
//   - req
func (_e *MockTaskUsecase_Expecter) CreateSubtask(ctx interface{}, parentTaskID interface{}, req interface{}) *MockTaskUsecase_CreateSubtask_Call {
	return &MockTaskUsecase_CreateSubtask_Call{Call: _e.mock.On("CreateSubtask", ctx, parentTaskID, req)}
}

func (_c *MockTaskUsecase_CreateSubtask_Call) Run(run func(ctx context.Context, parentTaskID uuid.UUID, req CreateTaskRequest)) *MockTaskUsecase_CreateSubtask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(CreateTaskRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_CreateSubtask_Call) Return(task *entity.Task, err error) *MockTaskUsecase_CreateSubtask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_CreateSubtask_Call) RunAndReturn(run func(ctx context.Context, parentTaskID uuid.UUID, req CreateTaskRequest) (*entity.Task, error)) *MockTaskUsecase_CreateSubtask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskFromTemplate provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) CreateTaskFromTemplate(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error) {
	ret := _mock.Called(ctx, templateID, projectID, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskFromTemplate")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) (*entity.Task, error)); ok {
		return returnFunc(ctx, templateID, projectID, createdBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) *entity.Task); ok {
		r0 = returnFunc(ctx, templateID, projectID, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, templateID, projectID, createdBy)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_CreateTaskFromTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskFromTemplate'
type MockTaskUsecase_CreateTaskFromTemplate_Call struct {
	*mock.Call
}

// CreateTaskFromTemplate is a helper method to define mock.On call
//   - ctx
//   - templateID
//   - projectID
//   - createdBy
func (_e *MockTaskUsecase_Expecter) CreateTaskFromTemplate(ctx interface{}, templateID interface{}, projectID interface{}, createdBy interface{}) *MockTaskUsecase_CreateTaskFromTemplate_Call {
	return &MockTaskUsecase_CreateTaskFromTemplate_Call{Call: _e.mock.On("CreateTaskFromTemplate", ctx, templateID, projectID, createdBy)}
}

func (_c *MockTaskUsecase_CreateTaskFromTemplate_Call) Run(run func(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string)) *MockTaskUsecase_CreateTaskFromTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *MockTaskUsecase_CreateTaskFromTemplate_Call) Return(task *entity.Task, err error) *MockTaskUsecase_CreateTaskFromTemplate_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_CreateTaskFromTemplate_Call) RunAndReturn(run func(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error)) *MockTaskUsecase_CreateTaskFromTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplate provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) CreateTemplate(ctx context.Context, req CreateTemplateRequest) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTemplateRequest) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTemplateRequest) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateTemplateRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type MockTaskUsecase_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockTaskUsecase_Expecter) CreateTemplate(ctx interface{}, req interface{}) *MockTaskUsecase_CreateTemplate_Call {
	return &MockTaskUsecase_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", ctx, req)}
}

func (_c *MockTaskUsecase_CreateTemplate_Call) Run(run func(ctx context.Context, req CreateTemplateRequest)) *MockTaskUsecase_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateTemplateRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_CreateTemplate_Call) Return(taskTemplate *entity.TaskTemplate, err error) *MockTaskUsecase_CreateTemplate_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *MockTaskUsecase_CreateTemplate_Call) RunAndReturn(run func(ctx context.Context, req CreateTemplateRequest) (*entity.TaskTemplate, error)) *MockTaskUsecase_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTaskUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) Delete(ctx interface{}, id interface{}) *MockTaskUsecase_Delete_Call {
	return &MockTaskUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTaskUsecase_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTaskUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_Delete_Call) Return(err error) *MockTaskUsecase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockTaskUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) DeleteComment(ctx context.Context, commentID uuid.UUID) error {
	ret := _mock.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockTaskUsecase_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx
//   - commentID
func (_e *MockTaskUsecase_Expecter) DeleteComment(ctx interface{}, commentID interface{}) *MockTaskUsecase_DeleteComment_Call {
	return &MockTaskUsecase_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, commentID)}
}

func (_c *MockTaskUsecase_DeleteComment_Call) Run(run func(ctx context.Context, commentID uuid.UUID)) *MockTaskUsecase_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_DeleteComment_Call) Return(err error) *MockTaskUsecase_DeleteComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_DeleteComment_Call) RunAndReturn(run func(ctx context.Context, commentID uuid.UUID) error) *MockTaskUsecase_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplate provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) DeleteTemplate(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type MockTaskUsecase_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) DeleteTemplate(ctx interface{}, id interface{}) *MockTaskUsecase_DeleteTemplate_Call {
	return &MockTaskUsecase_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate", ctx, id)}
}

func (_c *MockTaskUsecase_DeleteTemplate_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTaskUsecase_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_DeleteTemplate_Call) Return(err error) *MockTaskUsecase_DeleteTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_DeleteTemplate_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockTaskUsecase_DeleteTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTasks provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) ExportTasks(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error) {
	ret := _mock.Called(ctx, filters, format)

	if len(ret) == 0 {
		panic("no return value specified for ExportTasks")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) ([]byte, error)); ok {
		return returnFunc(ctx, filters, format)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) []byte); ok {
		r0 = returnFunc(ctx, filters, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) error); ok {
		r1 = returnFunc(ctx, filters, format)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_ExportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTasks'
type MockTaskUsecase_ExportTasks_Call struct {
	*mock.Call
}

// ExportTasks is a helper method to define mock.On call
//   - ctx
//   - filters
//   - format
func (_e *MockTaskUsecase_Expecter) ExportTasks(ctx interface{}, filters interface{}, format interface{}) *MockTaskUsecase_ExportTasks_Call {
	return &MockTaskUsecase_ExportTasks_Call{Call: _e.mock.On("ExportTasks", ctx, filters, format)}
}

func (_c *MockTaskUsecase_ExportTasks_Call) Run(run func(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat)) *MockTaskUsecase_ExportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskFilters), args[2].(entity.TaskExportFormat))
	})
	return _c
}

func (_c *MockTaskUsecase_ExportTasks_Call) Return(bytes []byte, err error) *MockTaskUsecase_ExportTasks_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockTaskUsecase_ExportTasks_Call) RunAndReturn(run func(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error)) *MockTaskUsecase_ExportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetArchivedTasks provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetArchivedTasks(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetArchivedTasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetArchivedTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArchivedTasks'
type MockTaskUsecase_GetArchivedTasks_Call struct {
	*mock.Call
}

// GetArchivedTasks is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockTaskUsecase_Expecter) GetArchivedTasks(ctx interface{}, projectID interface{}) *MockTaskUsecase_GetArchivedTasks_Call {
	return &MockTaskUsecase_GetArchivedTasks_Call{Call: _e.mock.On("GetArchivedTasks", ctx, projectID)}
}

func (_c *MockTaskUsecase_GetArchivedTasks_Call) Run(run func(ctx context.Context, projectID *uuid.UUID)) *MockTaskUsecase_GetArchivedTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetArchivedTasks_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetArchivedTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetArchivedTasks_Call) RunAndReturn(run func(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error)) *MockTaskUsecase_GetArchivedTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogs provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetAuditLogs(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error) {
	ret := _mock.Called(ctx, taskID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogs")
	}

	var r0 []*entity.TaskAuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int) ([]*entity.TaskAuditLog, error)); ok {
		return returnFunc(ctx, taskID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int) []*entity.TaskAuditLog); ok {
		r0 = returnFunc(ctx, taskID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskAuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *int) error); ok {
		r1 = returnFunc(ctx, taskID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogs'
type MockTaskUsecase_GetAuditLogs_Call struct {
	*mock.Call
}

// GetAuditLogs is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - limit
func (_e *MockTaskUsecase_Expecter) GetAuditLogs(ctx interface{}, taskID interface{}, limit interface{}) *MockTaskUsecase_GetAuditLogs_Call {
	return &MockTaskUsecase_GetAuditLogs_Call{Call: _e.mock.On("GetAuditLogs", ctx, taskID, limit)}
}

func (_c *MockTaskUsecase_GetAuditLogs_Call) Run(run func(ctx context.Context, taskID uuid.UUID, limit *int)) *MockTaskUsecase_GetAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*int))
	})
	return _c
}

func (_c *MockTaskUsecase_GetAuditLogs_Call) Return(taskAuditLogs []*entity.TaskAuditLog, err error) *MockTaskUsecase_GetAuditLogs_Call {
	_c.Call.Return(taskAuditLogs, err)
	return _c
}

func (_c *MockTaskUsecase_GetAuditLogs_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error)) *MockTaskUsecase_GetAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetByID(ctx context.Context, id uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTaskUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) GetByID(ctx interface{}, id interface{}) *MockTaskUsecase_GetByID_Call {
	return &MockTaskUsecase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTaskUsecase_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTaskUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetByID_Call) Return(task *entity.Task, err error) *MockTaskUsecase_GetByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Task, error)) *MockTaskUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type MockTaskUsecase_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockTaskUsecase_Expecter) GetByProjectID(ctx interface{}, projectID interface{}) *MockTaskUsecase_GetByProjectID_Call {
	return &MockTaskUsecase_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", ctx, projectID)}
}

func (_c *MockTaskUsecase_GetByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockTaskUsecase_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetByProjectID_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetByProjectID_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error)) *MockTaskUsecase_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetByStatus(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatus) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatus) []*entity.Task); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type MockTaskUsecase_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *MockTaskUsecase_Expecter) GetByStatus(ctx interface{}, status interface{}) *MockTaskUsecase_GetByStatus_Call {
	return &MockTaskUsecase_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, status)}
}

func (_c *MockTaskUsecase_GetByStatus_Call) Run(run func(ctx context.Context, status entity.TaskStatus)) *MockTaskUsecase_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskStatus))
	})
	return _c
}

func (_c *MockTaskUsecase_GetByStatus_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetByStatus_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error)) *MockTaskUsecase_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatuses provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetByStatuses(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatuses")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.TaskStatus) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, statuses)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.TaskStatus) []*entity.Task); ok {
		r0 = returnFunc(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetByStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatuses'
type MockTaskUsecase_GetByStatuses_Call struct {
	*mock.Call
}

// GetByStatuses is a helper method to define mock.On call
//   - ctx
//   - statuses
func (_e *MockTaskUsecase_Expecter) GetByStatuses(ctx interface{}, statuses interface{}) *MockTaskUsecase_GetByStatuses_Call {
	return &MockTaskUsecase_GetByStatuses_Call{Call: _e.mock.On("GetByStatuses", ctx, statuses)}
}

func (_c *MockTaskUsecase_GetByStatuses_Call) Run(run func(ctx context.Context, statuses []entity.TaskStatus)) *MockTaskUsecase_GetByStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.TaskStatus))
	})
	return _c
}

func (_c *MockTaskUsecase_GetByStatuses_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetByStatuses_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetByStatuses_Call) RunAndReturn(run func(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error)) *MockTaskUsecase_GetByStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetComments provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetComments(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []*entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskComment, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskComment); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type MockTaskUsecase_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockTaskUsecase_Expecter) GetComments(ctx interface{}, taskID interface{}) *MockTaskUsecase_GetComments_Call {
	return &MockTaskUsecase_GetComments_Call{Call: _e.mock.On("GetComments", ctx, taskID)}
}

func (_c *MockTaskUsecase_GetComments_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *MockTaskUsecase_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetComments_Call) Return(taskComments []*entity.TaskComment, err error) *MockTaskUsecase_GetComments_Call {
	_c.Call.Return(taskComments, err)
	return _c
}

func (_c *MockTaskUsecase_GetComments_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error)) *MockTaskUsecase_GetComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencies provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetDependencies(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencies")
	}

	var r0 []*entity.TaskDependency
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskDependency, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskDependency); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskDependency)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencies'
type MockTaskUsecase_GetDependencies_Call struct {
	*mock.Call
}

// GetDependencies is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockTaskUsecase_Expecter) GetDependencies(ctx interface{}, taskID interface{}) *MockTaskUsecase_GetDependencies_Call {
	return &MockTaskUsecase_GetDependencies_Call{Call: _e.mock.On("GetDependencies", ctx, taskID)}
}

func (_c *MockTaskUsecase_GetDependencies_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *MockTaskUsecase_GetDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetDependencies_Call) Return(taskDependencys []*entity.TaskDependency, err error) *MockTaskUsecase_GetDependencies_Call {
	_c.Call.Return(taskDependencys, err)
	return _c
}

func (_c *MockTaskUsecase_GetDependencies_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error)) *MockTaskUsecase_GetDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependents provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetDependents(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependents")
	}

	var r0 []*entity.TaskDependency
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskDependency, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskDependency); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskDependency)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetDependents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependents'
type MockTaskUsecase_GetDependents_Call struct {
	*mock.Call
}

// GetDependents is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockTaskUsecase_Expecter) GetDependents(ctx interface{}, taskID interface{}) *MockTaskUsecase_GetDependents_Call {
	return &MockTaskUsecase_GetDependents_Call{Call: _e.mock.On("GetDependents", ctx, taskID)}
}

func (_c *MockTaskUsecase_GetDependents_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *MockTaskUsecase_GetDependents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetDependents_Call) Return(taskDependencys []*entity.TaskDependency, err error) *MockTaskUsecase_GetDependents_Call {
	_c.Call.Return(taskDependencys, err)
	return _c
}

func (_c *MockTaskUsecase_GetDependents_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error)) *MockTaskUsecase_GetDependents_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentTask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetParentTask(ctx context.Context, taskID uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetParentTask")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetParentTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentTask'
type MockTaskUsecase_GetParentTask_Call struct {
	*mock.Call
}

// GetParentTask is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockTaskUsecase_Expecter) GetParentTask(ctx interface{}, taskID interface{}) *MockTaskUsecase_GetParentTask_Call {
	return &MockTaskUsecase_GetParentTask_Call{Call: _e.mock.On("GetParentTask", ctx, taskID)}
}

func (_c *MockTaskUsecase_GetParentTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *MockTaskUsecase_GetParentTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetParentTask_Call) Return(task *entity.Task, err error) *MockTaskUsecase_GetParentTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_GetParentTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.Task, error)) *MockTaskUsecase_GetParentTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusAnalytics provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetStatusAnalytics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusAnalytics")
	}

	var r0 *entity.TaskStatusAnalytics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskStatusAnalytics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskStatusAnalytics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskStatusAnalytics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetStatusAnalytics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusAnalytics'
type MockTaskUsecase_GetStatusAnalytics_Call struct {
	*mock.Call
}

// GetStatusAnalytics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockTaskUsecase_Expecter) GetStatusAnalytics(ctx interface{}, projectID interface{}) *MockTaskUsecase_GetStatusAnalytics_Call {
	return &MockTaskUsecase_GetStatusAnalytics_Call{Call: _e.mock.On("GetStatusAnalytics", ctx, projectID)}
}

func (_c *MockTaskUsecase_GetStatusAnalytics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockTaskUsecase_GetStatusAnalytics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetStatusAnalytics_Call) Return(taskStatusAnalytics *entity.TaskStatusAnalytics, err error) *MockTaskUsecase_GetStatusAnalytics_Call {
	_c.Call.Return(taskStatusAnalytics, err)
	return _c
}

func (_c *MockTaskUsecase_GetStatusAnalytics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error)) *MockTaskUsecase_GetStatusAnalytics_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusHistory provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetStatusHistory(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusHistory")
	}

	var r0 []*entity.TaskStatusHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskStatusHistory, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskStatusHistory); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskStatusHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetStatusHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusHistory'
type MockTaskUsecase_GetStatusHistory_Call struct {
	*mock.Call
}

// GetStatusHistory is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockTaskUsecase_Expecter) GetStatusHistory(ctx interface{}, taskID interface{}) *MockTaskUsecase_GetStatusHistory_Call {
	return &MockTaskUsecase_GetStatusHistory_Call{Call: _e.mock.On("GetStatusHistory", ctx, taskID)}
}

func (_c *MockTaskUsecase_GetStatusHistory_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *MockTaskUsecase_GetStatusHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetStatusHistory_Call) Return(taskStatusHistorys []*entity.TaskStatusHistory, err error) *MockTaskUsecase_GetStatusHistory_Call {
	_c.Call.Return(taskStatusHistorys, err)
	return _c
}

func (_c *MockTaskUsecase_GetStatusHistory_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error)) *MockTaskUsecase_GetStatusHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubtasks provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetSubtasks(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, parentTaskID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubtasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, parentTaskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, parentTaskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, parentTaskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubtasks'
type MockTaskUsecase_GetSubtasks_Call struct {
	*mock.Call
}

// GetSubtasks is a helper method to define mock.On call
//   - ctx
//   - parentTaskID
func (_e *MockTaskUsecase_Expecter) GetSubtasks(ctx interface{}, parentTaskID interface{}) *MockTaskUsecase_GetSubtasks_Call {
	return &MockTaskUsecase_GetSubtasks_Call{Call: _e.mock.On("GetSubtasks", ctx, parentTaskID)}
}

func (_c *MockTaskUsecase_GetSubtasks_Call) Run(run func(ctx context.Context, parentTaskID uuid.UUID)) *MockTaskUsecase_GetSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetSubtasks_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetSubtasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetSubtasks_Call) RunAndReturn(run func(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error)) *MockTaskUsecase_GetSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatistics provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTaskStatistics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatistics")
	}

	var r0 *entity.TaskStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskStatistics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskStatistics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTaskStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatistics'
type MockTaskUsecase_GetTaskStatistics_Call struct {
	*mock.Call
}

// GetTaskStatistics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockTaskUsecase_Expecter) GetTaskStatistics(ctx interface{}, projectID interface{}) *MockTaskUsecase_GetTaskStatistics_Call {
	return &MockTaskUsecase_GetTaskStatistics_Call{Call: _e.mock.On("GetTaskStatistics", ctx, projectID)}
}

func (_c *MockTaskUsecase_GetTaskStatistics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockTaskUsecase_GetTaskStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTaskStatistics_Call) Return(taskStatistics *entity.TaskStatistics, err error) *MockTaskUsecase_GetTaskStatistics_Call {
	_c.Call.Return(taskStatistics, err)
	return _c
}

func (_c *MockTaskUsecase_GetTaskStatistics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error)) *MockTaskUsecase_GetTaskStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByPriority provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTasksByPriority(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, priority)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByPriority")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskPriority) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, priority)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskPriority) []*entity.Task); ok {
		r0 = returnFunc(ctx, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskPriority) error); ok {
		r1 = returnFunc(ctx, priority)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTasksByPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByPriority'
type MockTaskUsecase_GetTasksByPriority_Call struct {
	*mock.Call
}

// GetTasksByPriority is a helper method to define mock.On call
//   - ctx
//   - priority
func (_e *MockTaskUsecase_Expecter) GetTasksByPriority(ctx interface{}, priority interface{}) *MockTaskUsecase_GetTasksByPriority_Call {
	return &MockTaskUsecase_GetTasksByPriority_Call{Call: _e.mock.On("GetTasksByPriority", ctx, priority)}
}

func (_c *MockTaskUsecase_GetTasksByPriority_Call) Run(run func(ctx context.Context, priority entity.TaskPriority)) *MockTaskUsecase_GetTasksByPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskPriority))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTasksByPriority_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetTasksByPriority_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetTasksByPriority_Call) RunAndReturn(run func(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error)) *MockTaskUsecase_GetTasksByPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByTags provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTasksByTags(ctx context.Context, tags []string) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, tags)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByTags")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, tags)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []*entity.Task); ok {
		r0 = returnFunc(ctx, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, tags)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTasksByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByTags'
type MockTaskUsecase_GetTasksByTags_Call struct {
	*mock.Call
}

// GetTasksByTags is a helper method to define mock.On call
//   - ctx
//   - tags
func (_e *MockTaskUsecase_Expecter) GetTasksByTags(ctx interface{}, tags interface{}) *MockTaskUsecase_GetTasksByTags_Call {
	return &MockTaskUsecase_GetTasksByTags_Call{Call: _e.mock.On("GetTasksByTags", ctx, tags)}
}

func (_c *MockTaskUsecase_GetTasksByTags_Call) Run(run func(ctx context.Context, tags []string)) *MockTaskUsecase_GetTasksByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTasksByTags_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetTasksByTags_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetTasksByTags_Call) RunAndReturn(run func(ctx context.Context, tags []string) ([]*entity.Task, error)) *MockTaskUsecase_GetTasksByTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksWithFilters provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTasksWithFilters(ctx context.Context, req GetTasksFilterRequest) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksWithFilters")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetTasksFilterRequest) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetTasksFilterRequest) []*entity.Task); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetTasksFilterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTasksWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithFilters'
type MockTaskUsecase_GetTasksWithFilters_Call struct {
	*mock.Call
}

// GetTasksWithFilters is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockTaskUsecase_Expecter) GetTasksWithFilters(ctx interface{}, req interface{}) *MockTaskUsecase_GetTasksWithFilters_Call {
	return &MockTaskUsecase_GetTasksWithFilters_Call{Call: _e.mock.On("GetTasksWithFilters", ctx, req)}
}

func (_c *MockTaskUsecase_GetTasksWithFilters_Call) Run(run func(ctx context.Context, req GetTasksFilterRequest)) *MockTaskUsecase_GetTasksWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTasksFilterRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTasksWithFilters_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetTasksWithFilters_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetTasksWithFilters_Call) RunAndReturn(run func(ctx context.Context, req GetTasksFilterRequest) ([]*entity.Task, error)) *MockTaskUsecase_GetTasksWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksWithSubtasks provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTasksWithSubtasks(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksWithSubtasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTasksWithSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithSubtasks'
type MockTaskUsecase_GetTasksWithSubtasks_Call struct {
	*mock.Call
}

// GetTasksWithSubtasks is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockTaskUsecase_Expecter) GetTasksWithSubtasks(ctx interface{}, projectID interface{}) *MockTaskUsecase_GetTasksWithSubtasks_Call {
	return &MockTaskUsecase_GetTasksWithSubtasks_Call{Call: _e.mock.On("GetTasksWithSubtasks", ctx, projectID)}
}

func (_c *MockTaskUsecase_GetTasksWithSubtasks_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockTaskUsecase_GetTasksWithSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTasksWithSubtasks_Call) Return(tasks []*entity.Task, err error) *MockTaskUsecase_GetTasksWithSubtasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetTasksWithSubtasks_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error)) *MockTaskUsecase_GetTasksWithSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateByID provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTemplateByID(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateByID")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTemplateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateByID'
type MockTaskUsecase_GetTemplateByID_Call struct {
	*mock.Call
}

// GetTemplateByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) GetTemplateByID(ctx interface{}, id interface{}) *MockTaskUsecase_GetTemplateByID_Call {
	return &MockTaskUsecase_GetTemplateByID_Call{Call: _e.mock.On("GetTemplateByID", ctx, id)}
}

func (_c *MockTaskUsecase_GetTemplateByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTaskUsecase_GetTemplateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTemplateByID_Call) Return(taskTemplate *entity.TaskTemplate, err error) *MockTaskUsecase_GetTemplateByID_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *MockTaskUsecase_GetTemplateByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error)) *MockTaskUsecase_GetTemplateByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplates provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTemplates(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, projectID, includeGlobal)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplates")
	}

	var r0 []*entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) ([]*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, projectID, includeGlobal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) []*entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, projectID, includeGlobal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, projectID, includeGlobal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplates'
type MockTaskUsecase_GetTemplates_Call struct {
	*mock.Call
}

// GetTemplates is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - includeGlobal
func (_e *MockTaskUsecase_Expecter) GetTemplates(ctx interface{}, projectID interface{}, includeGlobal interface{}) *MockTaskUsecase_GetTemplates_Call {
	return &MockTaskUsecase_GetTemplates_Call{Call: _e.mock.On("GetTemplates", ctx, projectID, includeGlobal)}
}

func (_c *MockTaskUsecase_GetTemplates_Call) Run(run func(ctx context.Context, projectID uuid.UUID, includeGlobal bool)) *MockTaskUsecase_GetTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTemplates_Call) Return(taskTemplates []*entity.TaskTemplate, err error) *MockTaskUsecase_GetTemplates_Call {
	_c.Call.Return(taskTemplates, err)
	return _c
}

func (_c *MockTaskUsecase_GetTemplates_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error)) *MockTaskUsecase_GetTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithProject provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetWithProject(ctx context.Context, id uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithProject")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetWithProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithProject'
type MockTaskUsecase_GetWithProject_Call struct {
	*mock.Call
}

// GetWithProject is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) GetWithProject(ctx interface{}, id interface{}) *MockTaskUsecase_GetWithProject_Call {
	return &MockTaskUsecase_GetWithProject_Call{Call: _e.mock.On("GetWithProject", ctx, id)}
}

func (_c *MockTaskUsecase_GetWithProject_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockTaskUsecase_GetWithProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_GetWithProject_Call) Return(task *entity.Task, err error) *MockTaskUsecase_GetWithProject_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_GetWithProject_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Task, error)) *MockTaskUsecase_GetWithProject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDependency provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) RemoveDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error {
	ret := _mock.Called(ctx, taskID, dependsOnTaskID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID, dependsOnTaskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_RemoveDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDependency'
type MockTaskUsecase_RemoveDependency_Call struct {
	*mock.Call
}

// RemoveDependency is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - dependsOnTaskID
func (_e *MockTaskUsecase_Expecter) RemoveDependency(ctx interface{}, taskID interface{}, dependsOnTaskID interface{}) *MockTaskUsecase_RemoveDependency_Call {
	return &MockTaskUsecase_RemoveDependency_Call{Call: _e.mock.On("RemoveDependency", ctx, taskID, dependsOnTaskID)}
}

func (_c *MockTaskUsecase_RemoveDependency_Call) Run(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID)) *MockTaskUsecase_RemoveDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_RemoveDependency_Call) Return(err error) *MockTaskUsecase_RemoveDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_RemoveDependency_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error) *MockTaskUsecase_RemoveDependency_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTasks provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) SearchTasks(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error) {
	ret := _mock.Called(ctx, query, projectID)

	if len(ret) == 0 {
		panic("no return value specified for SearchTasks")
	}

	var r0 []*entity.TaskSearchResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) ([]*entity.TaskSearchResult, error)); ok {
		return returnFunc(ctx, query, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) []*entity.TaskSearchResult); ok {
		r0 = returnFunc(ctx, query, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskSearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, query, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_SearchTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTasks'
type MockTaskUsecase_SearchTasks_Call struct {
	*mock.Call
}

// SearchTasks is a helper method to define mock.On call
//   - ctx
//   - query
//   - projectID
func (_e *MockTaskUsecase_Expecter) SearchTasks(ctx interface{}, query interface{}, projectID interface{}) *MockTaskUsecase_SearchTasks_Call {
	return &MockTaskUsecase_SearchTasks_Call{Call: _e.mock.On("SearchTasks", ctx, query, projectID)}
}

func (_c *MockTaskUsecase_SearchTasks_Call) Run(run func(ctx context.Context, query string, projectID *uuid.UUID)) *MockTaskUsecase_SearchTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_SearchTasks_Call) Return(taskSearchResults []*entity.TaskSearchResult, err error) *MockTaskUsecase_SearchTasks_Call {
	_c.Call.Return(taskSearchResults, err)
	return _c
}

func (_c *MockTaskUsecase_SearchTasks_Call) RunAndReturn(run func(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error)) *MockTaskUsecase_SearchTasks_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) Update(ctx context.Context, id uuid.UUID, req UpdateTaskRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTaskRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTaskRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateTaskRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *MockTaskUsecase_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *MockTaskUsecase_Update_Call {
	return &MockTaskUsecase_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *MockTaskUsecase_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateTaskRequest)) *MockTaskUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateTaskRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_Update_Call) Return(task *entity.Task, err error) *MockTaskUsecase_Update_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateTaskRequest) (*entity.Task, error)) *MockTaskUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) UpdateComment(ctx context.Context, commentID uuid.UUID, req UpdateCommentRequest) (*entity.TaskComment, error) {
	ret := _mock.Called(ctx, commentID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateCommentRequest) (*entity.TaskComment, error)); ok {
		return returnFunc(ctx, commentID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateCommentRequest) *entity.TaskComment); ok {
		r0 = returnFunc(ctx, commentID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateCommentRequest) error); ok {
		r1 = returnFunc(ctx, commentID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockTaskUsecase_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx
//   - commentID
//   - req
func (_e *MockTaskUsecase_Expecter) UpdateComment(ctx interface{}, commentID interface{}, req interface{}) *MockTaskUsecase_UpdateComment_Call {
	return &MockTaskUsecase_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, commentID, req)}
}

func (_c *MockTaskUsecase_UpdateComment_Call) Run(run func(ctx context.Context, commentID uuid.UUID, req UpdateCommentRequest)) *MockTaskUsecase_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateCommentRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_UpdateComment_Call) Return(taskComment *entity.TaskComment, err error) *MockTaskUsecase_UpdateComment_Call {
	_c.Call.Return(taskComment, err)
	return _c
}

func (_c *MockTaskUsecase_UpdateComment_Call) RunAndReturn(run func(ctx context.Context, commentID uuid.UUID, req UpdateCommentRequest) (*entity.TaskComment, error)) *MockTaskUsecase_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParentTask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) UpdateParentTask(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error {
	ret := _mock.Called(ctx, taskID, parentTaskID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParentTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID, parentTaskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_UpdateParentTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParentTask'
type MockTaskUsecase_UpdateParentTask_Call struct {
	*mock.Call
}

// UpdateParentTask is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - parentTaskID
func (_e *MockTaskUsecase_Expecter) UpdateParentTask(ctx interface{}, taskID interface{}, parentTaskID interface{}) *MockTaskUsecase_UpdateParentTask_Call {
	return &MockTaskUsecase_UpdateParentTask_Call{Call: _e.mock.On("UpdateParentTask", ctx, taskID, parentTaskID)}
}

func (_c *MockTaskUsecase_UpdateParentTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID)) *MockTaskUsecase_UpdateParentTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *MockTaskUsecase_UpdateParentTask_Call) Return(err error) *MockTaskUsecase_UpdateParentTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_UpdateParentTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error) *MockTaskUsecase_UpdateParentTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.TaskStatus) (*entity.Task, error) {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) (*entity.Task, error)); ok {
		return returnFunc(ctx, id, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) *entity.Task); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockTaskUsecase_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *MockTaskUsecase_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *MockTaskUsecase_UpdateStatus_Call {
	return &MockTaskUsecase_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *MockTaskUsecase_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus)) *MockTaskUsecase_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskStatus))
	})
	return _c
}

func (_c *MockTaskUsecase_UpdateStatus_Call) Return(task *entity.Task, err error) *MockTaskUsecase_UpdateStatus_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus) (*entity.Task, error)) *MockTaskUsecase_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusWithHistory provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) UpdateStatusWithHistory(ctx context.Context, req UpdateStatusRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusWithHistory")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateStatusRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateStatusRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateStatusRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_UpdateStatusWithHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusWithHistory'
type MockTaskUsecase_UpdateStatusWithHistory_Call struct {
	*mock.Call
}

// UpdateStatusWithHistory is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockTaskUsecase_Expecter) UpdateStatusWithHistory(ctx interface{}, req interface{}) *MockTaskUsecase_UpdateStatusWithHistory_Call {
	return &MockTaskUsecase_UpdateStatusWithHistory_Call{Call: _e.mock.On("UpdateStatusWithHistory", ctx, req)}
}

func (_c *MockTaskUsecase_UpdateStatusWithHistory_Call) Run(run func(ctx context.Context, req UpdateStatusRequest)) *MockTaskUsecase_UpdateStatusWithHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateStatusRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_UpdateStatusWithHistory_Call) Return(task *entity.Task, err error) *MockTaskUsecase_UpdateStatusWithHistory_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_UpdateStatusWithHistory_Call) RunAndReturn(run func(ctx context.Context, req UpdateStatusRequest) (*entity.Task, error)) *MockTaskUsecase_UpdateStatusWithHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTemplate provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) UpdateTemplate(ctx context.Context, id uuid.UUID, req UpdateTemplateRequest) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTemplateRequest) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTemplateRequest) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateTemplateRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_UpdateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplate'
type MockTaskUsecase_UpdateTemplate_Call struct {
	*mock.Call
}

// UpdateTemplate is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *MockTaskUsecase_Expecter) UpdateTemplate(ctx interface{}, id interface{}, req interface{}) *MockTaskUsecase_UpdateTemplate_Call {
	return &MockTaskUsecase_UpdateTemplate_Call{Call: _e.mock.On("UpdateTemplate", ctx, id, req)}
}

func (_c *MockTaskUsecase_UpdateTemplate_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateTemplateRequest)) *MockTaskUsecase_UpdateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateTemplateRequest))
	})
	return _c
}

func (_c *MockTaskUsecase_UpdateTemplate_Call) Return(taskTemplate *entity.TaskTemplate, err error) *MockTaskUsecase_UpdateTemplate_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *MockTaskUsecase_UpdateTemplate_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateTemplateRequest) (*entity.TaskTemplate, error)) *MockTaskUsecase_UpdateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStatusTransition provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) ValidateStatusTransition(ctx context.Context, taskID uuid.UUID, newStatus entity.TaskStatus) error {
	ret := _mock.Called(ctx, taskID, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStatusTransition")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) error); ok {
		r0 = returnFunc(ctx, taskID, newStatus)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_ValidateStatusTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStatusTransition'
type MockTaskUsecase_ValidateStatusTransition_Call struct {
	*mock.Call
}

// ValidateStatusTransition is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - newStatus
func (_e *MockTaskUsecase_Expecter) ValidateStatusTransition(ctx interface{}, taskID interface{}, newStatus interface{}) *MockTaskUsecase_ValidateStatusTransition_Call {
	return &MockTaskUsecase_ValidateStatusTransition_Call{Call: _e.mock.On("ValidateStatusTransition", ctx, taskID, newStatus)}
}

func (_c *MockTaskUsecase_ValidateStatusTransition_Call) Run(run func(ctx context.Context, taskID uuid.UUID, newStatus entity.TaskStatus)) *MockTaskUsecase_ValidateStatusTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskStatus))
	})
	return _c
}

func (_c *MockTaskUsecase_ValidateStatusTransition_Call) Return(err error) *MockTaskUsecase_ValidateStatusTransition_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_ValidateStatusTransition_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, newStatus entity.TaskStatus) error) *MockTaskUsecase_ValidateStatusTransition_Call {
	_c.Call.Return(run)
	return _c
}
