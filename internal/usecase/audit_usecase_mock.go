// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewAuditUsecaseMock creates a new instance of AuditUsecaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditUsecaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditUsecaseMock {
	mock := &AuditUsecaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuditUsecaseMock is an autogenerated mock type for the AuditUsecase type
type AuditUsecaseMock struct {
	mock.Mock
}

type AuditUsecaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditUsecaseMock) EXPECT() *AuditUsecaseMock_Expecter {
	return &AuditUsecaseMock_Expecter{mock: &_m.Mock}
}

// GetAuditLogs provides a mock function for the type AuditUsecaseMock
func (_mock *AuditUsecaseMock) GetAuditLogs(ctx context.Context, entityType string, entityID *uuid.UUID, limit int) ([]*entity.AuditLog, error) {
	ret := _mock.Called(ctx, entityType, entityID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogs")
	}

	var r0 []*entity.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID, int) ([]*entity.AuditLog, error)); ok {
		return returnFunc(ctx, entityType, entityID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID, int) []*entity.AuditLog); ok {
		r0 = returnFunc(ctx, entityType, entityID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, entityType, entityID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuditUsecaseMock_GetAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogs'
type AuditUsecaseMock_GetAuditLogs_Call struct {
	*mock.Call
}

// GetAuditLogs is a helper method to define mock.On call
//   - ctx
//   - entityType
//   - entityID
//   - limit
func (_e *AuditUsecaseMock_Expecter) GetAuditLogs(ctx interface{}, entityType interface{}, entityID interface{}, limit interface{}) *AuditUsecaseMock_GetAuditLogs_Call {
	return &AuditUsecaseMock_GetAuditLogs_Call{Call: _e.mock.On("GetAuditLogs", ctx, entityType, entityID, limit)}
}

func (_c *AuditUsecaseMock_GetAuditLogs_Call) Run(run func(ctx context.Context, entityType string, entityID *uuid.UUID, limit int)) *AuditUsecaseMock_GetAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID), args[3].(int))
	})
	return _c
}

func (_c *AuditUsecaseMock_GetAuditLogs_Call) Return(auditLogs []*entity.AuditLog, err error) *AuditUsecaseMock_GetAuditLogs_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *AuditUsecaseMock_GetAuditLogs_Call) RunAndReturn(run func(ctx context.Context, entityType string, entityID *uuid.UUID, limit int) ([]*entity.AuditLog, error)) *AuditUsecaseMock_GetAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// LogProjectOperation provides a mock function for the type AuditUsecaseMock
func (_mock *AuditUsecaseMock) LogProjectOperation(ctx context.Context, action entity.AuditAction, projectID uuid.UUID, oldProject *entity.Project, newProject *entity.Project, description string) error {
	ret := _mock.Called(ctx, action, projectID, oldProject, newProject, description)

	if len(ret) == 0 {
		panic("no return value specified for LogProjectOperation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.AuditAction, uuid.UUID, *entity.Project, *entity.Project, string) error); ok {
		r0 = returnFunc(ctx, action, projectID, oldProject, newProject, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuditUsecaseMock_LogProjectOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogProjectOperation'
type AuditUsecaseMock_LogProjectOperation_Call struct {
	*mock.Call
}

// LogProjectOperation is a helper method to define mock.On call
//   - ctx
//   - action
//   - projectID
//   - oldProject
//   - newProject
//   - description
func (_e *AuditUsecaseMock_Expecter) LogProjectOperation(ctx interface{}, action interface{}, projectID interface{}, oldProject interface{}, newProject interface{}, description interface{}) *AuditUsecaseMock_LogProjectOperation_Call {
	return &AuditUsecaseMock_LogProjectOperation_Call{Call: _e.mock.On("LogProjectOperation", ctx, action, projectID, oldProject, newProject, description)}
}

func (_c *AuditUsecaseMock_LogProjectOperation_Call) Run(run func(ctx context.Context, action entity.AuditAction, projectID uuid.UUID, oldProject *entity.Project, newProject *entity.Project, description string)) *AuditUsecaseMock_LogProjectOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AuditAction), args[2].(uuid.UUID), args[3].(*entity.Project), args[4].(*entity.Project), args[5].(string))
	})
	return _c
}

func (_c *AuditUsecaseMock_LogProjectOperation_Call) Return(err error) *AuditUsecaseMock_LogProjectOperation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuditUsecaseMock_LogProjectOperation_Call) RunAndReturn(run func(ctx context.Context, action entity.AuditAction, projectID uuid.UUID, oldProject *entity.Project, newProject *entity.Project, description string) error) *AuditUsecaseMock_LogProjectOperation_Call {
	_c.Call.Return(run)
	return _c
}

// LogTaskOperation provides a mock function for the type AuditUsecaseMock
func (_mock *AuditUsecaseMock) LogTaskOperation(ctx context.Context, action entity.AuditAction, taskID uuid.UUID, oldTask *entity.Task, newTask *entity.Task, description string) error {
	ret := _mock.Called(ctx, action, taskID, oldTask, newTask, description)

	if len(ret) == 0 {
		panic("no return value specified for LogTaskOperation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.AuditAction, uuid.UUID, *entity.Task, *entity.Task, string) error); ok {
		r0 = returnFunc(ctx, action, taskID, oldTask, newTask, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuditUsecaseMock_LogTaskOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTaskOperation'
type AuditUsecaseMock_LogTaskOperation_Call struct {
	*mock.Call
}

// LogTaskOperation is a helper method to define mock.On call
//   - ctx
//   - action
//   - taskID
//   - oldTask
//   - newTask
//   - description
func (_e *AuditUsecaseMock_Expecter) LogTaskOperation(ctx interface{}, action interface{}, taskID interface{}, oldTask interface{}, newTask interface{}, description interface{}) *AuditUsecaseMock_LogTaskOperation_Call {
	return &AuditUsecaseMock_LogTaskOperation_Call{Call: _e.mock.On("LogTaskOperation", ctx, action, taskID, oldTask, newTask, description)}
}

func (_c *AuditUsecaseMock_LogTaskOperation_Call) Run(run func(ctx context.Context, action entity.AuditAction, taskID uuid.UUID, oldTask *entity.Task, newTask *entity.Task, description string)) *AuditUsecaseMock_LogTaskOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AuditAction), args[2].(uuid.UUID), args[3].(*entity.Task), args[4].(*entity.Task), args[5].(string))
	})
	return _c
}

func (_c *AuditUsecaseMock_LogTaskOperation_Call) Return(err error) *AuditUsecaseMock_LogTaskOperation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuditUsecaseMock_LogTaskOperation_Call) RunAndReturn(run func(ctx context.Context, action entity.AuditAction, taskID uuid.UUID, oldTask *entity.Task, newTask *entity.Task, description string) error) *AuditUsecaseMock_LogTaskOperation_Call {
	_c.Call.Return(run)
	return _c
}
