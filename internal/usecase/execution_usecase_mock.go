// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/auto-devs/auto-devs/internal/repository"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewExecutionUsecaseMock creates a new instance of ExecutionUsecaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionUsecaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionUsecaseMock {
	mock := &ExecutionUsecaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExecutionUsecaseMock is an autogenerated mock type for the ExecutionUsecase type
type ExecutionUsecaseMock struct {
	mock.Mock
}

type ExecutionUsecaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionUsecaseMock) EXPECT() *ExecutionUsecaseMock_Expecter {
	return &ExecutionUsecaseMock_Expecter{mock: &_m.Mock}
}

// AddExecutionLog provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) AddExecutionLog(ctx context.Context, req AddExecutionLogRequest) (*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddExecutionLog")
	}

	var r0 *entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddExecutionLogRequest) (*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddExecutionLogRequest) *entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, AddExecutionLogRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_AddExecutionLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddExecutionLog'
type ExecutionUsecaseMock_AddExecutionLog_Call struct {
	*mock.Call
}

// AddExecutionLog is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *ExecutionUsecaseMock_Expecter) AddExecutionLog(ctx interface{}, req interface{}) *ExecutionUsecaseMock_AddExecutionLog_Call {
	return &ExecutionUsecaseMock_AddExecutionLog_Call{Call: _e.mock.On("AddExecutionLog", ctx, req)}
}

func (_c *ExecutionUsecaseMock_AddExecutionLog_Call) Run(run func(ctx context.Context, req AddExecutionLogRequest)) *ExecutionUsecaseMock_AddExecutionLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AddExecutionLogRequest))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_AddExecutionLog_Call) Return(executionLog *entity.ExecutionLog, err error) *ExecutionUsecaseMock_AddExecutionLog_Call {
	_c.Call.Return(executionLog, err)
	return _c
}

func (_c *ExecutionUsecaseMock_AddExecutionLog_Call) RunAndReturn(run func(ctx context.Context, req AddExecutionLogRequest) (*entity.ExecutionLog, error)) *ExecutionUsecaseMock_AddExecutionLog_Call {
	_c.Call.Return(run)
	return _c
}

// BatchAddLogs provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) BatchAddLogs(ctx context.Context, logs []AddExecutionLogRequest) error {
	ret := _mock.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddLogs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []AddExecutionLogRequest) error); ok {
		r0 = returnFunc(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionUsecaseMock_BatchAddLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchAddLogs'
type ExecutionUsecaseMock_BatchAddLogs_Call struct {
	*mock.Call
}

// BatchAddLogs is a helper method to define mock.On call
//   - ctx
//   - logs
func (_e *ExecutionUsecaseMock_Expecter) BatchAddLogs(ctx interface{}, logs interface{}) *ExecutionUsecaseMock_BatchAddLogs_Call {
	return &ExecutionUsecaseMock_BatchAddLogs_Call{Call: _e.mock.On("BatchAddLogs", ctx, logs)}
}

func (_c *ExecutionUsecaseMock_BatchAddLogs_Call) Run(run func(ctx context.Context, logs []AddExecutionLogRequest)) *ExecutionUsecaseMock_BatchAddLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]AddExecutionLogRequest))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_BatchAddLogs_Call) Return(err error) *ExecutionUsecaseMock_BatchAddLogs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionUsecaseMock_BatchAddLogs_Call) RunAndReturn(run func(ctx context.Context, logs []AddExecutionLogRequest) error) *ExecutionUsecaseMock_BatchAddLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) Create(ctx context.Context, req CreateExecutionRequest) (*entity.Execution, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateExecutionRequest) (*entity.Execution, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateExecutionRequest) *entity.Execution); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateExecutionRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ExecutionUsecaseMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *ExecutionUsecaseMock_Expecter) Create(ctx interface{}, req interface{}) *ExecutionUsecaseMock_Create_Call {
	return &ExecutionUsecaseMock_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *ExecutionUsecaseMock_Create_Call) Run(run func(ctx context.Context, req CreateExecutionRequest)) *ExecutionUsecaseMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateExecutionRequest))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_Create_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_Create_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_Create_Call) RunAndReturn(run func(ctx context.Context, req CreateExecutionRequest) (*entity.Execution, error)) *ExecutionUsecaseMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionUsecaseMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ExecutionUsecaseMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionUsecaseMock_Expecter) Delete(ctx interface{}, id interface{}) *ExecutionUsecaseMock_Delete_Call {
	return &ExecutionUsecaseMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ExecutionUsecaseMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionUsecaseMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_Delete_Call) Return(err error) *ExecutionUsecaseMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionUsecaseMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ExecutionUsecaseMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Execution); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ExecutionUsecaseMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionUsecaseMock_Expecter) GetByID(ctx interface{}, id interface{}) *ExecutionUsecaseMock_GetByID_Call {
	return &ExecutionUsecaseMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ExecutionUsecaseMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionUsecaseMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetByID_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_GetByID_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Execution, error)) *ExecutionUsecaseMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatusFiltered provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetByStatusFiltered(ctx context.Context, req GetExecutionsFilterRequest) ([]*entity.Execution, int64, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatusFiltered")
	}

	var r0 []*entity.Execution
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetExecutionsFilterRequest) ([]*entity.Execution, int64, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetExecutionsFilterRequest) []*entity.Execution); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetExecutionsFilterRequest) int64); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, GetExecutionsFilterRequest) error); ok {
		r2 = returnFunc(ctx, req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// ExecutionUsecaseMock_GetByStatusFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatusFiltered'
type ExecutionUsecaseMock_GetByStatusFiltered_Call struct {
	*mock.Call
}

// GetByStatusFiltered is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *ExecutionUsecaseMock_Expecter) GetByStatusFiltered(ctx interface{}, req interface{}) *ExecutionUsecaseMock_GetByStatusFiltered_Call {
	return &ExecutionUsecaseMock_GetByStatusFiltered_Call{Call: _e.mock.On("GetByStatusFiltered", ctx, req)}
}

func (_c *ExecutionUsecaseMock_GetByStatusFiltered_Call) Run(run func(ctx context.Context, req GetExecutionsFilterRequest)) *ExecutionUsecaseMock_GetByStatusFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetExecutionsFilterRequest))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetByStatusFiltered_Call) Return(executions []*entity.Execution, n int64, err error) *ExecutionUsecaseMock_GetByStatusFiltered_Call {
	_c.Call.Return(executions, n, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetByStatusFiltered_Call) RunAndReturn(run func(ctx context.Context, req GetExecutionsFilterRequest) ([]*entity.Execution, int64, error)) *ExecutionUsecaseMock_GetByStatusFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTaskID provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetByTaskID(ctx context.Context, taskID uuid.UUID) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Execution); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTaskID'
type ExecutionUsecaseMock_GetByTaskID_Call struct {
	*mock.Call
}

// GetByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *ExecutionUsecaseMock_Expecter) GetByTaskID(ctx interface{}, taskID interface{}) *ExecutionUsecaseMock_GetByTaskID_Call {
	return &ExecutionUsecaseMock_GetByTaskID_Call{Call: _e.mock.On("GetByTaskID", ctx, taskID)}
}

func (_c *ExecutionUsecaseMock_GetByTaskID_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *ExecutionUsecaseMock_GetByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetByTaskID_Call) Return(executions []*entity.Execution, err error) *ExecutionUsecaseMock_GetByTaskID_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.Execution, error)) *ExecutionUsecaseMock_GetByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionLogs provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetExecutionLogs(ctx context.Context, executionID uuid.UUID, req GetExecutionLogsRequest) ([]*entity.ExecutionLog, int64, error) {
	ret := _mock.Called(ctx, executionID, req)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionLogs")
	}

	var r0 []*entity.ExecutionLog
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, GetExecutionLogsRequest) ([]*entity.ExecutionLog, int64, error)); ok {
		return returnFunc(ctx, executionID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, GetExecutionLogsRequest) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, GetExecutionLogsRequest) int64); ok {
		r1 = returnFunc(ctx, executionID, req)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID, GetExecutionLogsRequest) error); ok {
		r2 = returnFunc(ctx, executionID, req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// ExecutionUsecaseMock_GetExecutionLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionLogs'
type ExecutionUsecaseMock_GetExecutionLogs_Call struct {
	*mock.Call
}

// GetExecutionLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - req
func (_e *ExecutionUsecaseMock_Expecter) GetExecutionLogs(ctx interface{}, executionID interface{}, req interface{}) *ExecutionUsecaseMock_GetExecutionLogs_Call {
	return &ExecutionUsecaseMock_GetExecutionLogs_Call{Call: _e.mock.On("GetExecutionLogs", ctx, executionID, req)}
}

func (_c *ExecutionUsecaseMock_GetExecutionLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, req GetExecutionLogsRequest)) *ExecutionUsecaseMock_GetExecutionLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(GetExecutionLogsRequest))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetExecutionLogs_Call) Return(executionLogs []*entity.ExecutionLog, n int64, err error) *ExecutionUsecaseMock_GetExecutionLogs_Call {
	_c.Call.Return(executionLogs, n, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetExecutionLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, req GetExecutionLogsRequest) ([]*entity.ExecutionLog, int64, error)) *ExecutionUsecaseMock_GetExecutionLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionStats provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetExecutionStats(ctx context.Context, taskID *uuid.UUID) (*repository.ExecutionStats, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionStats")
	}

	var r0 *repository.ExecutionStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (*repository.ExecutionStats, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *repository.ExecutionStats); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.ExecutionStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetExecutionStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionStats'
type ExecutionUsecaseMock_GetExecutionStats_Call struct {
	*mock.Call
}

// GetExecutionStats is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *ExecutionUsecaseMock_Expecter) GetExecutionStats(ctx interface{}, taskID interface{}) *ExecutionUsecaseMock_GetExecutionStats_Call {
	return &ExecutionUsecaseMock_GetExecutionStats_Call{Call: _e.mock.On("GetExecutionStats", ctx, taskID)}
}

func (_c *ExecutionUsecaseMock_GetExecutionStats_Call) Run(run func(ctx context.Context, taskID *uuid.UUID)) *ExecutionUsecaseMock_GetExecutionStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetExecutionStats_Call) Return(executionStats *repository.ExecutionStats, err error) *ExecutionUsecaseMock_GetExecutionStats_Call {
	_c.Call.Return(executionStats, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetExecutionStats_Call) RunAndReturn(run func(ctx context.Context, taskID *uuid.UUID) (*repository.ExecutionStats, error)) *ExecutionUsecaseMock_GetExecutionStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogStats provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetLogStats(ctx context.Context, executionID uuid.UUID) (*repository.LogStats, error) {
	ret := _mock.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLogStats")
	}

	var r0 *repository.LogStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*repository.LogStats, error)); ok {
		return returnFunc(ctx, executionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.LogStats); ok {
		r0 = returnFunc(ctx, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.LogStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, executionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetLogStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogStats'
type ExecutionUsecaseMock_GetLogStats_Call struct {
	*mock.Call
}

// GetLogStats is a helper method to define mock.On call
//   - ctx
//   - executionID
func (_e *ExecutionUsecaseMock_Expecter) GetLogStats(ctx interface{}, executionID interface{}) *ExecutionUsecaseMock_GetLogStats_Call {
	return &ExecutionUsecaseMock_GetLogStats_Call{Call: _e.mock.On("GetLogStats", ctx, executionID)}
}

func (_c *ExecutionUsecaseMock_GetLogStats_Call) Run(run func(ctx context.Context, executionID uuid.UUID)) *ExecutionUsecaseMock_GetLogStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetLogStats_Call) Return(logStats *repository.LogStats, err error) *ExecutionUsecaseMock_GetLogStats_Call {
	_c.Call.Return(logStats, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetLogStats_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID) (*repository.LogStats, error)) *ExecutionUsecaseMock_GetLogStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentExecutions provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetRecentExecutions(ctx context.Context, limit int) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentExecutions")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []*entity.Execution); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetRecentExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentExecutions'
type ExecutionUsecaseMock_GetRecentExecutions_Call struct {
	*mock.Call
}

// GetRecentExecutions is a helper method to define mock.On call
//   - ctx
//   - limit
func (_e *ExecutionUsecaseMock_Expecter) GetRecentExecutions(ctx interface{}, limit interface{}) *ExecutionUsecaseMock_GetRecentExecutions_Call {
	return &ExecutionUsecaseMock_GetRecentExecutions_Call{Call: _e.mock.On("GetRecentExecutions", ctx, limit)}
}

func (_c *ExecutionUsecaseMock_GetRecentExecutions_Call) Run(run func(ctx context.Context, limit int)) *ExecutionUsecaseMock_GetRecentExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetRecentExecutions_Call) Return(executions []*entity.Execution, err error) *ExecutionUsecaseMock_GetRecentExecutions_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetRecentExecutions_Call) RunAndReturn(run func(ctx context.Context, limit int) ([]*entity.Execution, error)) *ExecutionUsecaseMock_GetRecentExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithLogs provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetWithLogs(ctx context.Context, id uuid.UUID, logLimit int) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, logLimit)

	if len(ret) == 0 {
		panic("no return value specified for GetWithLogs")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, logLimit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, logLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, id, logLimit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetWithLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithLogs'
type ExecutionUsecaseMock_GetWithLogs_Call struct {
	*mock.Call
}

// GetWithLogs is a helper method to define mock.On call
//   - ctx
//   - id
//   - logLimit
func (_e *ExecutionUsecaseMock_Expecter) GetWithLogs(ctx interface{}, id interface{}, logLimit interface{}) *ExecutionUsecaseMock_GetWithLogs_Call {
	return &ExecutionUsecaseMock_GetWithLogs_Call{Call: _e.mock.On("GetWithLogs", ctx, id, logLimit)}
}

func (_c *ExecutionUsecaseMock_GetWithLogs_Call) Run(run func(ctx context.Context, id uuid.UUID, logLimit int)) *ExecutionUsecaseMock_GetWithLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetWithLogs_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_GetWithLogs_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetWithLogs_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, logLimit int) (*entity.Execution, error)) *ExecutionUsecaseMock_GetWithLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithProcesses provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) GetWithProcesses(ctx context.Context, id uuid.UUID) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithProcesses")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Execution); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_GetWithProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithProcesses'
type ExecutionUsecaseMock_GetWithProcesses_Call struct {
	*mock.Call
}

// GetWithProcesses is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionUsecaseMock_Expecter) GetWithProcesses(ctx interface{}, id interface{}) *ExecutionUsecaseMock_GetWithProcesses_Call {
	return &ExecutionUsecaseMock_GetWithProcesses_Call{Call: _e.mock.On("GetWithProcesses", ctx, id)}
}

func (_c *ExecutionUsecaseMock_GetWithProcesses_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionUsecaseMock_GetWithProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_GetWithProcesses_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_GetWithProcesses_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_GetWithProcesses_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Execution, error)) *ExecutionUsecaseMock_GetWithProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// MarkCompleted provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) MarkCompleted(ctx context.Context, id uuid.UUID, result *entity.ExecutionResult) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, result)

	if len(ret) == 0 {
		panic("no return value specified for MarkCompleted")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ExecutionResult) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, result)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ExecutionResult) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.ExecutionResult) error); ok {
		r1 = returnFunc(ctx, id, result)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_MarkCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkCompleted'
type ExecutionUsecaseMock_MarkCompleted_Call struct {
	*mock.Call
}

// MarkCompleted is a helper method to define mock.On call
//   - ctx
//   - id
//   - result
func (_e *ExecutionUsecaseMock_Expecter) MarkCompleted(ctx interface{}, id interface{}, result interface{}) *ExecutionUsecaseMock_MarkCompleted_Call {
	return &ExecutionUsecaseMock_MarkCompleted_Call{Call: _e.mock.On("MarkCompleted", ctx, id, result)}
}

func (_c *ExecutionUsecaseMock_MarkCompleted_Call) Run(run func(ctx context.Context, id uuid.UUID, result *entity.ExecutionResult)) *ExecutionUsecaseMock_MarkCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*entity.ExecutionResult))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_MarkCompleted_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_MarkCompleted_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_MarkCompleted_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, result *entity.ExecutionResult) (*entity.Execution, error)) *ExecutionUsecaseMock_MarkCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFailed provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) MarkFailed(ctx context.Context, id uuid.UUID, errorMsg string) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, errorMsg)

	if len(ret) == 0 {
		panic("no return value specified for MarkFailed")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, errorMsg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, errorMsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, id, errorMsg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_MarkFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFailed'
type ExecutionUsecaseMock_MarkFailed_Call struct {
	*mock.Call
}

// MarkFailed is a helper method to define mock.On call
//   - ctx
//   - id
//   - errorMsg
func (_e *ExecutionUsecaseMock_Expecter) MarkFailed(ctx interface{}, id interface{}, errorMsg interface{}) *ExecutionUsecaseMock_MarkFailed_Call {
	return &ExecutionUsecaseMock_MarkFailed_Call{Call: _e.mock.On("MarkFailed", ctx, id, errorMsg)}
}

func (_c *ExecutionUsecaseMock_MarkFailed_Call) Run(run func(ctx context.Context, id uuid.UUID, errorMsg string)) *ExecutionUsecaseMock_MarkFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_MarkFailed_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_MarkFailed_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_MarkFailed_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, errorMsg string) (*entity.Execution, error)) *ExecutionUsecaseMock_MarkFailed_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) Update(ctx context.Context, id uuid.UUID, req UpdateExecutionRequest) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateExecutionRequest) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateExecutionRequest) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateExecutionRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ExecutionUsecaseMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *ExecutionUsecaseMock_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *ExecutionUsecaseMock_Update_Call {
	return &ExecutionUsecaseMock_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *ExecutionUsecaseMock_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateExecutionRequest)) *ExecutionUsecaseMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateExecutionRequest))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_Update_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_Update_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateExecutionRequest) (*entity.Execution, error)) *ExecutionUsecaseMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProgress provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) UpdateProgress(ctx context.Context, id uuid.UUID, progress float64) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, progress)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgress")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, progress)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, progress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, float64) error); ok {
		r1 = returnFunc(ctx, id, progress)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_UpdateProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProgress'
type ExecutionUsecaseMock_UpdateProgress_Call struct {
	*mock.Call
}

// UpdateProgress is a helper method to define mock.On call
//   - ctx
//   - id
//   - progress
func (_e *ExecutionUsecaseMock_Expecter) UpdateProgress(ctx interface{}, id interface{}, progress interface{}) *ExecutionUsecaseMock_UpdateProgress_Call {
	return &ExecutionUsecaseMock_UpdateProgress_Call{Call: _e.mock.On("UpdateProgress", ctx, id, progress)}
}

func (_c *ExecutionUsecaseMock_UpdateProgress_Call) Run(run func(ctx context.Context, id uuid.UUID, progress float64)) *ExecutionUsecaseMock_UpdateProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_UpdateProgress_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_UpdateProgress_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_UpdateProgress_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, progress float64) (*entity.Execution, error)) *ExecutionUsecaseMock_UpdateProgress_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.ExecutionStatus) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.ExecutionStatus) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.ExecutionStatus) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.ExecutionStatus) error); ok {
		r1 = returnFunc(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionUsecaseMock_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ExecutionUsecaseMock_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *ExecutionUsecaseMock_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *ExecutionUsecaseMock_UpdateStatus_Call {
	return &ExecutionUsecaseMock_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *ExecutionUsecaseMock_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.ExecutionStatus)) *ExecutionUsecaseMock_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.ExecutionStatus))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_UpdateStatus_Call) Return(execution *entity.Execution, err error) *ExecutionUsecaseMock_UpdateStatus_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionUsecaseMock_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.ExecutionStatus) (*entity.Execution, error)) *ExecutionUsecaseMock_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateExecutionExists provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) ValidateExecutionExists(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ValidateExecutionExists")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionUsecaseMock_ValidateExecutionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateExecutionExists'
type ExecutionUsecaseMock_ValidateExecutionExists_Call struct {
	*mock.Call
}

// ValidateExecutionExists is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionUsecaseMock_Expecter) ValidateExecutionExists(ctx interface{}, id interface{}) *ExecutionUsecaseMock_ValidateExecutionExists_Call {
	return &ExecutionUsecaseMock_ValidateExecutionExists_Call{Call: _e.mock.On("ValidateExecutionExists", ctx, id)}
}

func (_c *ExecutionUsecaseMock_ValidateExecutionExists_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionUsecaseMock_ValidateExecutionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_ValidateExecutionExists_Call) Return(err error) *ExecutionUsecaseMock_ValidateExecutionExists_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionUsecaseMock_ValidateExecutionExists_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ExecutionUsecaseMock_ValidateExecutionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTaskExists provides a mock function for the type ExecutionUsecaseMock
func (_mock *ExecutionUsecaseMock) ValidateTaskExists(ctx context.Context, taskID uuid.UUID) error {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTaskExists")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionUsecaseMock_ValidateTaskExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTaskExists'
type ExecutionUsecaseMock_ValidateTaskExists_Call struct {
	*mock.Call
}

// ValidateTaskExists is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *ExecutionUsecaseMock_Expecter) ValidateTaskExists(ctx interface{}, taskID interface{}) *ExecutionUsecaseMock_ValidateTaskExists_Call {
	return &ExecutionUsecaseMock_ValidateTaskExists_Call{Call: _e.mock.On("ValidateTaskExists", ctx, taskID)}
}

func (_c *ExecutionUsecaseMock_ValidateTaskExists_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *ExecutionUsecaseMock_ValidateTaskExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionUsecaseMock_ValidateTaskExists_Call) Return(err error) *ExecutionUsecaseMock_ValidateTaskExists_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionUsecaseMock_ValidateTaskExists_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) error) *ExecutionUsecaseMock_ValidateTaskExists_Call {
	_c.Call.Return(run)
	return _c
}
