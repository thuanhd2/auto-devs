// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewTaskUsecaseMock creates a new instance of TaskUsecaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecaseMock {
	mock := &TaskUsecaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskUsecaseMock is an autogenerated mock type for the TaskUsecase type
type TaskUsecaseMock struct {
	mock.Mock
}

type TaskUsecaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskUsecaseMock) EXPECT() *TaskUsecaseMock_Expecter {
	return &TaskUsecaseMock_Expecter{mock: &_m.Mock}
}

// AddComment provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) AddComment(ctx context.Context, req AddCommentRequest) (*entity.TaskComment, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 *entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddCommentRequest) (*entity.TaskComment, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddCommentRequest) *entity.TaskComment); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, AddCommentRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type TaskUsecaseMock_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *TaskUsecaseMock_Expecter) AddComment(ctx interface{}, req interface{}) *TaskUsecaseMock_AddComment_Call {
	return &TaskUsecaseMock_AddComment_Call{Call: _e.mock.On("AddComment", ctx, req)}
}

func (_c *TaskUsecaseMock_AddComment_Call) Run(run func(ctx context.Context, req AddCommentRequest)) *TaskUsecaseMock_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AddCommentRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_AddComment_Call) Return(taskComment *entity.TaskComment, err error) *TaskUsecaseMock_AddComment_Call {
	_c.Call.Return(taskComment, err)
	return _c
}

func (_c *TaskUsecaseMock_AddComment_Call) RunAndReturn(run func(ctx context.Context, req AddCommentRequest) (*entity.TaskComment, error)) *TaskUsecaseMock_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// AddDependency provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) AddDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error {
	ret := _mock.Called(ctx, taskID, dependsOnTaskID, dependencyType)

	if len(ret) == 0 {
		panic("no return value specified for AddDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, taskID, dependsOnTaskID, dependencyType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_AddDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDependency'
type TaskUsecaseMock_AddDependency_Call struct {
	*mock.Call
}

// AddDependency is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - dependsOnTaskID
//   - dependencyType
func (_e *TaskUsecaseMock_Expecter) AddDependency(ctx interface{}, taskID interface{}, dependsOnTaskID interface{}, dependencyType interface{}) *TaskUsecaseMock_AddDependency_Call {
	return &TaskUsecaseMock_AddDependency_Call{Call: _e.mock.On("AddDependency", ctx, taskID, dependsOnTaskID, dependencyType)}
}

func (_c *TaskUsecaseMock_AddDependency_Call) Run(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string)) *TaskUsecaseMock_AddDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *TaskUsecaseMock_AddDependency_Call) Return(err error) *TaskUsecaseMock_AddDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_AddDependency_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error) *TaskUsecaseMock_AddDependency_Call {
	_c.Call.Return(run)
	return _c
}

// BulkArchive provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) BulkArchive(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkArchive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_BulkArchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkArchive'
type TaskUsecaseMock_BulkArchive_Call struct {
	*mock.Call
}

// BulkArchive is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *TaskUsecaseMock_Expecter) BulkArchive(ctx interface{}, taskIDs interface{}) *TaskUsecaseMock_BulkArchive_Call {
	return &TaskUsecaseMock_BulkArchive_Call{Call: _e.mock.On("BulkArchive", ctx, taskIDs)}
}

func (_c *TaskUsecaseMock_BulkArchive_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *TaskUsecaseMock_BulkArchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_BulkArchive_Call) Return(err error) *TaskUsecaseMock_BulkArchive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_BulkArchive_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *TaskUsecaseMock_BulkArchive_Call {
	_c.Call.Return(run)
	return _c
}

// BulkAssign provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) BulkAssign(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error {
	ret := _mock.Called(ctx, taskIDs, assignedTo)

	if len(ret) == 0 {
		panic("no return value specified for BulkAssign")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, taskIDs, assignedTo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_BulkAssign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkAssign'
type TaskUsecaseMock_BulkAssign_Call struct {
	*mock.Call
}

// BulkAssign is a helper method to define mock.On call
//   - ctx
//   - taskIDs
//   - assignedTo
func (_e *TaskUsecaseMock_Expecter) BulkAssign(ctx interface{}, taskIDs interface{}, assignedTo interface{}) *TaskUsecaseMock_BulkAssign_Call {
	return &TaskUsecaseMock_BulkAssign_Call{Call: _e.mock.On("BulkAssign", ctx, taskIDs, assignedTo)}
}

func (_c *TaskUsecaseMock_BulkAssign_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, assignedTo string)) *TaskUsecaseMock_BulkAssign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *TaskUsecaseMock_BulkAssign_Call) Return(err error) *TaskUsecaseMock_BulkAssign_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_BulkAssign_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error) *TaskUsecaseMock_BulkAssign_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDelete provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) BulkDelete(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type TaskUsecaseMock_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *TaskUsecaseMock_Expecter) BulkDelete(ctx interface{}, taskIDs interface{}) *TaskUsecaseMock_BulkDelete_Call {
	return &TaskUsecaseMock_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, taskIDs)}
}

func (_c *TaskUsecaseMock_BulkDelete_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *TaskUsecaseMock_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_BulkDelete_Call) Return(err error) *TaskUsecaseMock_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *TaskUsecaseMock_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUnarchive provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) BulkUnarchive(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkUnarchive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_BulkUnarchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUnarchive'
type TaskUsecaseMock_BulkUnarchive_Call struct {
	*mock.Call
}

// BulkUnarchive is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *TaskUsecaseMock_Expecter) BulkUnarchive(ctx interface{}, taskIDs interface{}) *TaskUsecaseMock_BulkUnarchive_Call {
	return &TaskUsecaseMock_BulkUnarchive_Call{Call: _e.mock.On("BulkUnarchive", ctx, taskIDs)}
}

func (_c *TaskUsecaseMock_BulkUnarchive_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *TaskUsecaseMock_BulkUnarchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_BulkUnarchive_Call) Return(err error) *TaskUsecaseMock_BulkUnarchive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_BulkUnarchive_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *TaskUsecaseMock_BulkUnarchive_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdatePriority provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) BulkUpdatePriority(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error {
	ret := _mock.Called(ctx, taskIDs, priority)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdatePriority")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.TaskPriority) error); ok {
		r0 = returnFunc(ctx, taskIDs, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_BulkUpdatePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdatePriority'
type TaskUsecaseMock_BulkUpdatePriority_Call struct {
	*mock.Call
}

// BulkUpdatePriority is a helper method to define mock.On call
//   - ctx
//   - taskIDs
//   - priority
func (_e *TaskUsecaseMock_Expecter) BulkUpdatePriority(ctx interface{}, taskIDs interface{}, priority interface{}) *TaskUsecaseMock_BulkUpdatePriority_Call {
	return &TaskUsecaseMock_BulkUpdatePriority_Call{Call: _e.mock.On("BulkUpdatePriority", ctx, taskIDs, priority)}
}

func (_c *TaskUsecaseMock_BulkUpdatePriority_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority)) *TaskUsecaseMock_BulkUpdatePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.TaskPriority))
	})
	return _c
}

func (_c *TaskUsecaseMock_BulkUpdatePriority_Call) Return(err error) *TaskUsecaseMock_BulkUpdatePriority_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_BulkUpdatePriority_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error) *TaskUsecaseMock_BulkUpdatePriority_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdateStatus provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) BulkUpdateStatus(ctx context.Context, req BulkUpdateStatusRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, BulkUpdateStatusRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_BulkUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateStatus'
type TaskUsecaseMock_BulkUpdateStatus_Call struct {
	*mock.Call
}

// BulkUpdateStatus is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *TaskUsecaseMock_Expecter) BulkUpdateStatus(ctx interface{}, req interface{}) *TaskUsecaseMock_BulkUpdateStatus_Call {
	return &TaskUsecaseMock_BulkUpdateStatus_Call{Call: _e.mock.On("BulkUpdateStatus", ctx, req)}
}

func (_c *TaskUsecaseMock_BulkUpdateStatus_Call) Run(run func(ctx context.Context, req BulkUpdateStatusRequest)) *TaskUsecaseMock_BulkUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BulkUpdateStatusRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_BulkUpdateStatus_Call) Return(err error) *TaskUsecaseMock_BulkUpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_BulkUpdateStatus_Call) RunAndReturn(run func(ctx context.Context, req BulkUpdateStatusRequest) error) *TaskUsecaseMock_BulkUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDuplicateTitle provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) CheckDuplicateTitle(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, projectID, title, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicateTitle")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, projectID, title, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, projectID, title, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID, title, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_CheckDuplicateTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicateTitle'
type TaskUsecaseMock_CheckDuplicateTitle_Call struct {
	*mock.Call
}

// CheckDuplicateTitle is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - title
//   - excludeID
func (_e *TaskUsecaseMock_Expecter) CheckDuplicateTitle(ctx interface{}, projectID interface{}, title interface{}, excludeID interface{}) *TaskUsecaseMock_CheckDuplicateTitle_Call {
	return &TaskUsecaseMock_CheckDuplicateTitle_Call{Call: _e.mock.On("CheckDuplicateTitle", ctx, projectID, title, excludeID)}
}

func (_c *TaskUsecaseMock_CheckDuplicateTitle_Call) Run(run func(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID)) *TaskUsecaseMock_CheckDuplicateTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_CheckDuplicateTitle_Call) Return(b bool, err error) *TaskUsecaseMock_CheckDuplicateTitle_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *TaskUsecaseMock_CheckDuplicateTitle_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error)) *TaskUsecaseMock_CheckDuplicateTitle_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) Create(ctx context.Context, req CreateTaskRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTaskRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTaskRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateTaskRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TaskUsecaseMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *TaskUsecaseMock_Expecter) Create(ctx interface{}, req interface{}) *TaskUsecaseMock_Create_Call {
	return &TaskUsecaseMock_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *TaskUsecaseMock_Create_Call) Run(run func(ctx context.Context, req CreateTaskRequest)) *TaskUsecaseMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateTaskRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_Create_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_Create_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_Create_Call) RunAndReturn(run func(ctx context.Context, req CreateTaskRequest) (*entity.Task, error)) *TaskUsecaseMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubtask provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) CreateSubtask(ctx context.Context, parentTaskID uuid.UUID, req CreateTaskRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, parentTaskID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubtask")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, CreateTaskRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, parentTaskID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, CreateTaskRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, parentTaskID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, CreateTaskRequest) error); ok {
		r1 = returnFunc(ctx, parentTaskID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_CreateSubtask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubtask'
type TaskUsecaseMock_CreateSubtask_Call struct {
	*mock.Call
}

// CreateSubtask is a helper method to define mock.On call
//   - ctx
//   - parentTaskID
//   - req
func (_e *TaskUsecaseMock_Expecter) CreateSubtask(ctx interface{}, parentTaskID interface{}, req interface{}) *TaskUsecaseMock_CreateSubtask_Call {
	return &TaskUsecaseMock_CreateSubtask_Call{Call: _e.mock.On("CreateSubtask", ctx, parentTaskID, req)}
}

func (_c *TaskUsecaseMock_CreateSubtask_Call) Run(run func(ctx context.Context, parentTaskID uuid.UUID, req CreateTaskRequest)) *TaskUsecaseMock_CreateSubtask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(CreateTaskRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_CreateSubtask_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_CreateSubtask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_CreateSubtask_Call) RunAndReturn(run func(ctx context.Context, parentTaskID uuid.UUID, req CreateTaskRequest) (*entity.Task, error)) *TaskUsecaseMock_CreateSubtask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskFromTemplate provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) CreateTaskFromTemplate(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error) {
	ret := _mock.Called(ctx, templateID, projectID, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskFromTemplate")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) (*entity.Task, error)); ok {
		return returnFunc(ctx, templateID, projectID, createdBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) *entity.Task); ok {
		r0 = returnFunc(ctx, templateID, projectID, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, templateID, projectID, createdBy)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_CreateTaskFromTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskFromTemplate'
type TaskUsecaseMock_CreateTaskFromTemplate_Call struct {
	*mock.Call
}

// CreateTaskFromTemplate is a helper method to define mock.On call
//   - ctx
//   - templateID
//   - projectID
//   - createdBy
func (_e *TaskUsecaseMock_Expecter) CreateTaskFromTemplate(ctx interface{}, templateID interface{}, projectID interface{}, createdBy interface{}) *TaskUsecaseMock_CreateTaskFromTemplate_Call {
	return &TaskUsecaseMock_CreateTaskFromTemplate_Call{Call: _e.mock.On("CreateTaskFromTemplate", ctx, templateID, projectID, createdBy)}
}

func (_c *TaskUsecaseMock_CreateTaskFromTemplate_Call) Run(run func(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string)) *TaskUsecaseMock_CreateTaskFromTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *TaskUsecaseMock_CreateTaskFromTemplate_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_CreateTaskFromTemplate_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_CreateTaskFromTemplate_Call) RunAndReturn(run func(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error)) *TaskUsecaseMock_CreateTaskFromTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplate provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) CreateTemplate(ctx context.Context, req CreateTemplateRequest) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTemplateRequest) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateTemplateRequest) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateTemplateRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type TaskUsecaseMock_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *TaskUsecaseMock_Expecter) CreateTemplate(ctx interface{}, req interface{}) *TaskUsecaseMock_CreateTemplate_Call {
	return &TaskUsecaseMock_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", ctx, req)}
}

func (_c *TaskUsecaseMock_CreateTemplate_Call) Run(run func(ctx context.Context, req CreateTemplateRequest)) *TaskUsecaseMock_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateTemplateRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_CreateTemplate_Call) Return(taskTemplate *entity.TaskTemplate, err error) *TaskUsecaseMock_CreateTemplate_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *TaskUsecaseMock_CreateTemplate_Call) RunAndReturn(run func(ctx context.Context, req CreateTemplateRequest) (*entity.TaskTemplate, error)) *TaskUsecaseMock_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TaskUsecaseMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskUsecaseMock_Expecter) Delete(ctx interface{}, id interface{}) *TaskUsecaseMock_Delete_Call {
	return &TaskUsecaseMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *TaskUsecaseMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskUsecaseMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_Delete_Call) Return(err error) *TaskUsecaseMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *TaskUsecaseMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) DeleteComment(ctx context.Context, commentID uuid.UUID) error {
	ret := _mock.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type TaskUsecaseMock_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx
//   - commentID
func (_e *TaskUsecaseMock_Expecter) DeleteComment(ctx interface{}, commentID interface{}) *TaskUsecaseMock_DeleteComment_Call {
	return &TaskUsecaseMock_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, commentID)}
}

func (_c *TaskUsecaseMock_DeleteComment_Call) Run(run func(ctx context.Context, commentID uuid.UUID)) *TaskUsecaseMock_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_DeleteComment_Call) Return(err error) *TaskUsecaseMock_DeleteComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_DeleteComment_Call) RunAndReturn(run func(ctx context.Context, commentID uuid.UUID) error) *TaskUsecaseMock_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplate provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) DeleteTemplate(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type TaskUsecaseMock_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskUsecaseMock_Expecter) DeleteTemplate(ctx interface{}, id interface{}) *TaskUsecaseMock_DeleteTemplate_Call {
	return &TaskUsecaseMock_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate", ctx, id)}
}

func (_c *TaskUsecaseMock_DeleteTemplate_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskUsecaseMock_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_DeleteTemplate_Call) Return(err error) *TaskUsecaseMock_DeleteTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_DeleteTemplate_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *TaskUsecaseMock_DeleteTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTasks provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) ExportTasks(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error) {
	ret := _mock.Called(ctx, filters, format)

	if len(ret) == 0 {
		panic("no return value specified for ExportTasks")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) ([]byte, error)); ok {
		return returnFunc(ctx, filters, format)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) []byte); ok {
		r0 = returnFunc(ctx, filters, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) error); ok {
		r1 = returnFunc(ctx, filters, format)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_ExportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTasks'
type TaskUsecaseMock_ExportTasks_Call struct {
	*mock.Call
}

// ExportTasks is a helper method to define mock.On call
//   - ctx
//   - filters
//   - format
func (_e *TaskUsecaseMock_Expecter) ExportTasks(ctx interface{}, filters interface{}, format interface{}) *TaskUsecaseMock_ExportTasks_Call {
	return &TaskUsecaseMock_ExportTasks_Call{Call: _e.mock.On("ExportTasks", ctx, filters, format)}
}

func (_c *TaskUsecaseMock_ExportTasks_Call) Run(run func(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat)) *TaskUsecaseMock_ExportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskFilters), args[2].(entity.TaskExportFormat))
	})
	return _c
}

func (_c *TaskUsecaseMock_ExportTasks_Call) Return(bytes []byte, err error) *TaskUsecaseMock_ExportTasks_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *TaskUsecaseMock_ExportTasks_Call) RunAndReturn(run func(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error)) *TaskUsecaseMock_ExportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetArchivedTasks provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetArchivedTasks(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetArchivedTasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetArchivedTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArchivedTasks'
type TaskUsecaseMock_GetArchivedTasks_Call struct {
	*mock.Call
}

// GetArchivedTasks is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskUsecaseMock_Expecter) GetArchivedTasks(ctx interface{}, projectID interface{}) *TaskUsecaseMock_GetArchivedTasks_Call {
	return &TaskUsecaseMock_GetArchivedTasks_Call{Call: _e.mock.On("GetArchivedTasks", ctx, projectID)}
}

func (_c *TaskUsecaseMock_GetArchivedTasks_Call) Run(run func(ctx context.Context, projectID *uuid.UUID)) *TaskUsecaseMock_GetArchivedTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetArchivedTasks_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetArchivedTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetArchivedTasks_Call) RunAndReturn(run func(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error)) *TaskUsecaseMock_GetArchivedTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogs provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetAuditLogs(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error) {
	ret := _mock.Called(ctx, taskID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogs")
	}

	var r0 []*entity.TaskAuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int) ([]*entity.TaskAuditLog, error)); ok {
		return returnFunc(ctx, taskID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int) []*entity.TaskAuditLog); ok {
		r0 = returnFunc(ctx, taskID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskAuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *int) error); ok {
		r1 = returnFunc(ctx, taskID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogs'
type TaskUsecaseMock_GetAuditLogs_Call struct {
	*mock.Call
}

// GetAuditLogs is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - limit
func (_e *TaskUsecaseMock_Expecter) GetAuditLogs(ctx interface{}, taskID interface{}, limit interface{}) *TaskUsecaseMock_GetAuditLogs_Call {
	return &TaskUsecaseMock_GetAuditLogs_Call{Call: _e.mock.On("GetAuditLogs", ctx, taskID, limit)}
}

func (_c *TaskUsecaseMock_GetAuditLogs_Call) Run(run func(ctx context.Context, taskID uuid.UUID, limit *int)) *TaskUsecaseMock_GetAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*int))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetAuditLogs_Call) Return(taskAuditLogs []*entity.TaskAuditLog, err error) *TaskUsecaseMock_GetAuditLogs_Call {
	_c.Call.Return(taskAuditLogs, err)
	return _c
}

func (_c *TaskUsecaseMock_GetAuditLogs_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error)) *TaskUsecaseMock_GetAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TaskUsecaseMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskUsecaseMock_Expecter) GetByID(ctx interface{}, id interface{}) *TaskUsecaseMock_GetByID_Call {
	return &TaskUsecaseMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *TaskUsecaseMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskUsecaseMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetByID_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_GetByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Task, error)) *TaskUsecaseMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type TaskUsecaseMock_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskUsecaseMock_Expecter) GetByProjectID(ctx interface{}, projectID interface{}) *TaskUsecaseMock_GetByProjectID_Call {
	return &TaskUsecaseMock_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", ctx, projectID)}
}

func (_c *TaskUsecaseMock_GetByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskUsecaseMock_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetByProjectID_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetByProjectID_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error)) *TaskUsecaseMock_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetByStatus(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatus) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatus) []*entity.Task); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type TaskUsecaseMock_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *TaskUsecaseMock_Expecter) GetByStatus(ctx interface{}, status interface{}) *TaskUsecaseMock_GetByStatus_Call {
	return &TaskUsecaseMock_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, status)}
}

func (_c *TaskUsecaseMock_GetByStatus_Call) Run(run func(ctx context.Context, status entity.TaskStatus)) *TaskUsecaseMock_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskStatus))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetByStatus_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetByStatus_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error)) *TaskUsecaseMock_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatuses provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetByStatuses(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatuses")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.TaskStatus) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, statuses)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.TaskStatus) []*entity.Task); ok {
		r0 = returnFunc(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetByStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatuses'
type TaskUsecaseMock_GetByStatuses_Call struct {
	*mock.Call
}

// GetByStatuses is a helper method to define mock.On call
//   - ctx
//   - statuses
func (_e *TaskUsecaseMock_Expecter) GetByStatuses(ctx interface{}, statuses interface{}) *TaskUsecaseMock_GetByStatuses_Call {
	return &TaskUsecaseMock_GetByStatuses_Call{Call: _e.mock.On("GetByStatuses", ctx, statuses)}
}

func (_c *TaskUsecaseMock_GetByStatuses_Call) Run(run func(ctx context.Context, statuses []entity.TaskStatus)) *TaskUsecaseMock_GetByStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.TaskStatus))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetByStatuses_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetByStatuses_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetByStatuses_Call) RunAndReturn(run func(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error)) *TaskUsecaseMock_GetByStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetComments provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetComments(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []*entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskComment, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskComment); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type TaskUsecaseMock_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskUsecaseMock_Expecter) GetComments(ctx interface{}, taskID interface{}) *TaskUsecaseMock_GetComments_Call {
	return &TaskUsecaseMock_GetComments_Call{Call: _e.mock.On("GetComments", ctx, taskID)}
}

func (_c *TaskUsecaseMock_GetComments_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskUsecaseMock_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetComments_Call) Return(taskComments []*entity.TaskComment, err error) *TaskUsecaseMock_GetComments_Call {
	_c.Call.Return(taskComments, err)
	return _c
}

func (_c *TaskUsecaseMock_GetComments_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error)) *TaskUsecaseMock_GetComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencies provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetDependencies(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencies")
	}

	var r0 []*entity.TaskDependency
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskDependency, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskDependency); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskDependency)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencies'
type TaskUsecaseMock_GetDependencies_Call struct {
	*mock.Call
}

// GetDependencies is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskUsecaseMock_Expecter) GetDependencies(ctx interface{}, taskID interface{}) *TaskUsecaseMock_GetDependencies_Call {
	return &TaskUsecaseMock_GetDependencies_Call{Call: _e.mock.On("GetDependencies", ctx, taskID)}
}

func (_c *TaskUsecaseMock_GetDependencies_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskUsecaseMock_GetDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetDependencies_Call) Return(taskDependencys []*entity.TaskDependency, err error) *TaskUsecaseMock_GetDependencies_Call {
	_c.Call.Return(taskDependencys, err)
	return _c
}

func (_c *TaskUsecaseMock_GetDependencies_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error)) *TaskUsecaseMock_GetDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependents provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetDependents(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependents")
	}

	var r0 []*entity.TaskDependency
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskDependency, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskDependency); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskDependency)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetDependents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependents'
type TaskUsecaseMock_GetDependents_Call struct {
	*mock.Call
}

// GetDependents is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskUsecaseMock_Expecter) GetDependents(ctx interface{}, taskID interface{}) *TaskUsecaseMock_GetDependents_Call {
	return &TaskUsecaseMock_GetDependents_Call{Call: _e.mock.On("GetDependents", ctx, taskID)}
}

func (_c *TaskUsecaseMock_GetDependents_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskUsecaseMock_GetDependents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetDependents_Call) Return(taskDependencys []*entity.TaskDependency, err error) *TaskUsecaseMock_GetDependents_Call {
	_c.Call.Return(taskDependencys, err)
	return _c
}

func (_c *TaskUsecaseMock_GetDependents_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error)) *TaskUsecaseMock_GetDependents_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentTask provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetParentTask(ctx context.Context, taskID uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetParentTask")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetParentTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentTask'
type TaskUsecaseMock_GetParentTask_Call struct {
	*mock.Call
}

// GetParentTask is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskUsecaseMock_Expecter) GetParentTask(ctx interface{}, taskID interface{}) *TaskUsecaseMock_GetParentTask_Call {
	return &TaskUsecaseMock_GetParentTask_Call{Call: _e.mock.On("GetParentTask", ctx, taskID)}
}

func (_c *TaskUsecaseMock_GetParentTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskUsecaseMock_GetParentTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetParentTask_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_GetParentTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_GetParentTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.Task, error)) *TaskUsecaseMock_GetParentTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusAnalytics provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetStatusAnalytics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusAnalytics")
	}

	var r0 *entity.TaskStatusAnalytics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskStatusAnalytics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskStatusAnalytics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskStatusAnalytics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetStatusAnalytics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusAnalytics'
type TaskUsecaseMock_GetStatusAnalytics_Call struct {
	*mock.Call
}

// GetStatusAnalytics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskUsecaseMock_Expecter) GetStatusAnalytics(ctx interface{}, projectID interface{}) *TaskUsecaseMock_GetStatusAnalytics_Call {
	return &TaskUsecaseMock_GetStatusAnalytics_Call{Call: _e.mock.On("GetStatusAnalytics", ctx, projectID)}
}

func (_c *TaskUsecaseMock_GetStatusAnalytics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskUsecaseMock_GetStatusAnalytics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetStatusAnalytics_Call) Return(taskStatusAnalytics *entity.TaskStatusAnalytics, err error) *TaskUsecaseMock_GetStatusAnalytics_Call {
	_c.Call.Return(taskStatusAnalytics, err)
	return _c
}

func (_c *TaskUsecaseMock_GetStatusAnalytics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error)) *TaskUsecaseMock_GetStatusAnalytics_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusHistory provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetStatusHistory(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusHistory")
	}

	var r0 []*entity.TaskStatusHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskStatusHistory, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskStatusHistory); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskStatusHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetStatusHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusHistory'
type TaskUsecaseMock_GetStatusHistory_Call struct {
	*mock.Call
}

// GetStatusHistory is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskUsecaseMock_Expecter) GetStatusHistory(ctx interface{}, taskID interface{}) *TaskUsecaseMock_GetStatusHistory_Call {
	return &TaskUsecaseMock_GetStatusHistory_Call{Call: _e.mock.On("GetStatusHistory", ctx, taskID)}
}

func (_c *TaskUsecaseMock_GetStatusHistory_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskUsecaseMock_GetStatusHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetStatusHistory_Call) Return(taskStatusHistorys []*entity.TaskStatusHistory, err error) *TaskUsecaseMock_GetStatusHistory_Call {
	_c.Call.Return(taskStatusHistorys, err)
	return _c
}

func (_c *TaskUsecaseMock_GetStatusHistory_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error)) *TaskUsecaseMock_GetStatusHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubtasks provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetSubtasks(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, parentTaskID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubtasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, parentTaskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, parentTaskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, parentTaskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubtasks'
type TaskUsecaseMock_GetSubtasks_Call struct {
	*mock.Call
}

// GetSubtasks is a helper method to define mock.On call
//   - ctx
//   - parentTaskID
func (_e *TaskUsecaseMock_Expecter) GetSubtasks(ctx interface{}, parentTaskID interface{}) *TaskUsecaseMock_GetSubtasks_Call {
	return &TaskUsecaseMock_GetSubtasks_Call{Call: _e.mock.On("GetSubtasks", ctx, parentTaskID)}
}

func (_c *TaskUsecaseMock_GetSubtasks_Call) Run(run func(ctx context.Context, parentTaskID uuid.UUID)) *TaskUsecaseMock_GetSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetSubtasks_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetSubtasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetSubtasks_Call) RunAndReturn(run func(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error)) *TaskUsecaseMock_GetSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatistics provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTaskStatistics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatistics")
	}

	var r0 *entity.TaskStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskStatistics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskStatistics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTaskStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatistics'
type TaskUsecaseMock_GetTaskStatistics_Call struct {
	*mock.Call
}

// GetTaskStatistics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskUsecaseMock_Expecter) GetTaskStatistics(ctx interface{}, projectID interface{}) *TaskUsecaseMock_GetTaskStatistics_Call {
	return &TaskUsecaseMock_GetTaskStatistics_Call{Call: _e.mock.On("GetTaskStatistics", ctx, projectID)}
}

func (_c *TaskUsecaseMock_GetTaskStatistics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskUsecaseMock_GetTaskStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTaskStatistics_Call) Return(taskStatistics *entity.TaskStatistics, err error) *TaskUsecaseMock_GetTaskStatistics_Call {
	_c.Call.Return(taskStatistics, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTaskStatistics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error)) *TaskUsecaseMock_GetTaskStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByPriority provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTasksByPriority(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, priority)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByPriority")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskPriority) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, priority)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskPriority) []*entity.Task); ok {
		r0 = returnFunc(ctx, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskPriority) error); ok {
		r1 = returnFunc(ctx, priority)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTasksByPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByPriority'
type TaskUsecaseMock_GetTasksByPriority_Call struct {
	*mock.Call
}

// GetTasksByPriority is a helper method to define mock.On call
//   - ctx
//   - priority
func (_e *TaskUsecaseMock_Expecter) GetTasksByPriority(ctx interface{}, priority interface{}) *TaskUsecaseMock_GetTasksByPriority_Call {
	return &TaskUsecaseMock_GetTasksByPriority_Call{Call: _e.mock.On("GetTasksByPriority", ctx, priority)}
}

func (_c *TaskUsecaseMock_GetTasksByPriority_Call) Run(run func(ctx context.Context, priority entity.TaskPriority)) *TaskUsecaseMock_GetTasksByPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskPriority))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTasksByPriority_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetTasksByPriority_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTasksByPriority_Call) RunAndReturn(run func(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error)) *TaskUsecaseMock_GetTasksByPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByTags provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTasksByTags(ctx context.Context, tags []string) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, tags)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByTags")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, tags)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []*entity.Task); ok {
		r0 = returnFunc(ctx, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, tags)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTasksByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByTags'
type TaskUsecaseMock_GetTasksByTags_Call struct {
	*mock.Call
}

// GetTasksByTags is a helper method to define mock.On call
//   - ctx
//   - tags
func (_e *TaskUsecaseMock_Expecter) GetTasksByTags(ctx interface{}, tags interface{}) *TaskUsecaseMock_GetTasksByTags_Call {
	return &TaskUsecaseMock_GetTasksByTags_Call{Call: _e.mock.On("GetTasksByTags", ctx, tags)}
}

func (_c *TaskUsecaseMock_GetTasksByTags_Call) Run(run func(ctx context.Context, tags []string)) *TaskUsecaseMock_GetTasksByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTasksByTags_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetTasksByTags_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTasksByTags_Call) RunAndReturn(run func(ctx context.Context, tags []string) ([]*entity.Task, error)) *TaskUsecaseMock_GetTasksByTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksWithFilters provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTasksWithFilters(ctx context.Context, req GetTasksFilterRequest) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksWithFilters")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetTasksFilterRequest) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetTasksFilterRequest) []*entity.Task); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetTasksFilterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTasksWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithFilters'
type TaskUsecaseMock_GetTasksWithFilters_Call struct {
	*mock.Call
}

// GetTasksWithFilters is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *TaskUsecaseMock_Expecter) GetTasksWithFilters(ctx interface{}, req interface{}) *TaskUsecaseMock_GetTasksWithFilters_Call {
	return &TaskUsecaseMock_GetTasksWithFilters_Call{Call: _e.mock.On("GetTasksWithFilters", ctx, req)}
}

func (_c *TaskUsecaseMock_GetTasksWithFilters_Call) Run(run func(ctx context.Context, req GetTasksFilterRequest)) *TaskUsecaseMock_GetTasksWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTasksFilterRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTasksWithFilters_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetTasksWithFilters_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTasksWithFilters_Call) RunAndReturn(run func(ctx context.Context, req GetTasksFilterRequest) ([]*entity.Task, error)) *TaskUsecaseMock_GetTasksWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksWithSubtasks provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTasksWithSubtasks(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksWithSubtasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTasksWithSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithSubtasks'
type TaskUsecaseMock_GetTasksWithSubtasks_Call struct {
	*mock.Call
}

// GetTasksWithSubtasks is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskUsecaseMock_Expecter) GetTasksWithSubtasks(ctx interface{}, projectID interface{}) *TaskUsecaseMock_GetTasksWithSubtasks_Call {
	return &TaskUsecaseMock_GetTasksWithSubtasks_Call{Call: _e.mock.On("GetTasksWithSubtasks", ctx, projectID)}
}

func (_c *TaskUsecaseMock_GetTasksWithSubtasks_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskUsecaseMock_GetTasksWithSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTasksWithSubtasks_Call) Return(tasks []*entity.Task, err error) *TaskUsecaseMock_GetTasksWithSubtasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTasksWithSubtasks_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error)) *TaskUsecaseMock_GetTasksWithSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateByID provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTemplateByID(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateByID")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTemplateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateByID'
type TaskUsecaseMock_GetTemplateByID_Call struct {
	*mock.Call
}

// GetTemplateByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskUsecaseMock_Expecter) GetTemplateByID(ctx interface{}, id interface{}) *TaskUsecaseMock_GetTemplateByID_Call {
	return &TaskUsecaseMock_GetTemplateByID_Call{Call: _e.mock.On("GetTemplateByID", ctx, id)}
}

func (_c *TaskUsecaseMock_GetTemplateByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskUsecaseMock_GetTemplateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTemplateByID_Call) Return(taskTemplate *entity.TaskTemplate, err error) *TaskUsecaseMock_GetTemplateByID_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTemplateByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error)) *TaskUsecaseMock_GetTemplateByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplates provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetTemplates(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, projectID, includeGlobal)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplates")
	}

	var r0 []*entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) ([]*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, projectID, includeGlobal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) []*entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, projectID, includeGlobal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, projectID, includeGlobal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplates'
type TaskUsecaseMock_GetTemplates_Call struct {
	*mock.Call
}

// GetTemplates is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - includeGlobal
func (_e *TaskUsecaseMock_Expecter) GetTemplates(ctx interface{}, projectID interface{}, includeGlobal interface{}) *TaskUsecaseMock_GetTemplates_Call {
	return &TaskUsecaseMock_GetTemplates_Call{Call: _e.mock.On("GetTemplates", ctx, projectID, includeGlobal)}
}

func (_c *TaskUsecaseMock_GetTemplates_Call) Run(run func(ctx context.Context, projectID uuid.UUID, includeGlobal bool)) *TaskUsecaseMock_GetTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetTemplates_Call) Return(taskTemplates []*entity.TaskTemplate, err error) *TaskUsecaseMock_GetTemplates_Call {
	_c.Call.Return(taskTemplates, err)
	return _c
}

func (_c *TaskUsecaseMock_GetTemplates_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error)) *TaskUsecaseMock_GetTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithProject provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) GetWithProject(ctx context.Context, id uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithProject")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_GetWithProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithProject'
type TaskUsecaseMock_GetWithProject_Call struct {
	*mock.Call
}

// GetWithProject is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskUsecaseMock_Expecter) GetWithProject(ctx interface{}, id interface{}) *TaskUsecaseMock_GetWithProject_Call {
	return &TaskUsecaseMock_GetWithProject_Call{Call: _e.mock.On("GetWithProject", ctx, id)}
}

func (_c *TaskUsecaseMock_GetWithProject_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskUsecaseMock_GetWithProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_GetWithProject_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_GetWithProject_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_GetWithProject_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Task, error)) *TaskUsecaseMock_GetWithProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListGitBranches provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) ListGitBranches(ctx context.Context, projectID uuid.UUID) ([]GitBranch, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListGitBranches")
	}

	var r0 []GitBranch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]GitBranch, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []GitBranch); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GitBranch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_ListGitBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGitBranches'
type TaskUsecaseMock_ListGitBranches_Call struct {
	*mock.Call
}

// ListGitBranches is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskUsecaseMock_Expecter) ListGitBranches(ctx interface{}, projectID interface{}) *TaskUsecaseMock_ListGitBranches_Call {
	return &TaskUsecaseMock_ListGitBranches_Call{Call: _e.mock.On("ListGitBranches", ctx, projectID)}
}

func (_c *TaskUsecaseMock_ListGitBranches_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskUsecaseMock_ListGitBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_ListGitBranches_Call) Return(gitBranchs []GitBranch, err error) *TaskUsecaseMock_ListGitBranches_Call {
	_c.Call.Return(gitBranchs, err)
	return _c
}

func (_c *TaskUsecaseMock_ListGitBranches_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]GitBranch, error)) *TaskUsecaseMock_ListGitBranches_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDependency provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) RemoveDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error {
	ret := _mock.Called(ctx, taskID, dependsOnTaskID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID, dependsOnTaskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_RemoveDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDependency'
type TaskUsecaseMock_RemoveDependency_Call struct {
	*mock.Call
}

// RemoveDependency is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - dependsOnTaskID
func (_e *TaskUsecaseMock_Expecter) RemoveDependency(ctx interface{}, taskID interface{}, dependsOnTaskID interface{}) *TaskUsecaseMock_RemoveDependency_Call {
	return &TaskUsecaseMock_RemoveDependency_Call{Call: _e.mock.On("RemoveDependency", ctx, taskID, dependsOnTaskID)}
}

func (_c *TaskUsecaseMock_RemoveDependency_Call) Run(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID)) *TaskUsecaseMock_RemoveDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_RemoveDependency_Call) Return(err error) *TaskUsecaseMock_RemoveDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_RemoveDependency_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error) *TaskUsecaseMock_RemoveDependency_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTasks provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) SearchTasks(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error) {
	ret := _mock.Called(ctx, query, projectID)

	if len(ret) == 0 {
		panic("no return value specified for SearchTasks")
	}

	var r0 []*entity.TaskSearchResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) ([]*entity.TaskSearchResult, error)); ok {
		return returnFunc(ctx, query, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) []*entity.TaskSearchResult); ok {
		r0 = returnFunc(ctx, query, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskSearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, query, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_SearchTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTasks'
type TaskUsecaseMock_SearchTasks_Call struct {
	*mock.Call
}

// SearchTasks is a helper method to define mock.On call
//   - ctx
//   - query
//   - projectID
func (_e *TaskUsecaseMock_Expecter) SearchTasks(ctx interface{}, query interface{}, projectID interface{}) *TaskUsecaseMock_SearchTasks_Call {
	return &TaskUsecaseMock_SearchTasks_Call{Call: _e.mock.On("SearchTasks", ctx, query, projectID)}
}

func (_c *TaskUsecaseMock_SearchTasks_Call) Run(run func(ctx context.Context, query string, projectID *uuid.UUID)) *TaskUsecaseMock_SearchTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_SearchTasks_Call) Return(taskSearchResults []*entity.TaskSearchResult, err error) *TaskUsecaseMock_SearchTasks_Call {
	_c.Call.Return(taskSearchResults, err)
	return _c
}

func (_c *TaskUsecaseMock_SearchTasks_Call) RunAndReturn(run func(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error)) *TaskUsecaseMock_SearchTasks_Call {
	_c.Call.Return(run)
	return _c
}

// StartPlanning provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) StartPlanning(ctx context.Context, taskID uuid.UUID, branchName string) (string, error) {
	ret := _mock.Called(ctx, taskID, branchName)

	if len(ret) == 0 {
		panic("no return value specified for StartPlanning")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (string, error)); ok {
		return returnFunc(ctx, taskID, branchName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) string); ok {
		r0 = returnFunc(ctx, taskID, branchName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, taskID, branchName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_StartPlanning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartPlanning'
type TaskUsecaseMock_StartPlanning_Call struct {
	*mock.Call
}

// StartPlanning is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - branchName
func (_e *TaskUsecaseMock_Expecter) StartPlanning(ctx interface{}, taskID interface{}, branchName interface{}) *TaskUsecaseMock_StartPlanning_Call {
	return &TaskUsecaseMock_StartPlanning_Call{Call: _e.mock.On("StartPlanning", ctx, taskID, branchName)}
}

func (_c *TaskUsecaseMock_StartPlanning_Call) Run(run func(ctx context.Context, taskID uuid.UUID, branchName string)) *TaskUsecaseMock_StartPlanning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *TaskUsecaseMock_StartPlanning_Call) Return(s string, err error) *TaskUsecaseMock_StartPlanning_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *TaskUsecaseMock_StartPlanning_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, branchName string) (string, error)) *TaskUsecaseMock_StartPlanning_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) Update(ctx context.Context, id uuid.UUID, req UpdateTaskRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTaskRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTaskRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateTaskRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TaskUsecaseMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *TaskUsecaseMock_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *TaskUsecaseMock_Update_Call {
	return &TaskUsecaseMock_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *TaskUsecaseMock_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateTaskRequest)) *TaskUsecaseMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateTaskRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_Update_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_Update_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateTaskRequest) (*entity.Task, error)) *TaskUsecaseMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) UpdateComment(ctx context.Context, commentID uuid.UUID, req UpdateCommentRequest) (*entity.TaskComment, error) {
	ret := _mock.Called(ctx, commentID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateCommentRequest) (*entity.TaskComment, error)); ok {
		return returnFunc(ctx, commentID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateCommentRequest) *entity.TaskComment); ok {
		r0 = returnFunc(ctx, commentID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateCommentRequest) error); ok {
		r1 = returnFunc(ctx, commentID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type TaskUsecaseMock_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx
//   - commentID
//   - req
func (_e *TaskUsecaseMock_Expecter) UpdateComment(ctx interface{}, commentID interface{}, req interface{}) *TaskUsecaseMock_UpdateComment_Call {
	return &TaskUsecaseMock_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, commentID, req)}
}

func (_c *TaskUsecaseMock_UpdateComment_Call) Run(run func(ctx context.Context, commentID uuid.UUID, req UpdateCommentRequest)) *TaskUsecaseMock_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateCommentRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_UpdateComment_Call) Return(taskComment *entity.TaskComment, err error) *TaskUsecaseMock_UpdateComment_Call {
	_c.Call.Return(taskComment, err)
	return _c
}

func (_c *TaskUsecaseMock_UpdateComment_Call) RunAndReturn(run func(ctx context.Context, commentID uuid.UUID, req UpdateCommentRequest) (*entity.TaskComment, error)) *TaskUsecaseMock_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGitStatus provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) UpdateGitStatus(ctx context.Context, taskID uuid.UUID, gitStatus entity.TaskGitStatus) (*entity.Task, error) {
	ret := _mock.Called(ctx, taskID, gitStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGitStatus")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskGitStatus) (*entity.Task, error)); ok {
		return returnFunc(ctx, taskID, gitStatus)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskGitStatus) *entity.Task); ok {
		r0 = returnFunc(ctx, taskID, gitStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.TaskGitStatus) error); ok {
		r1 = returnFunc(ctx, taskID, gitStatus)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_UpdateGitStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGitStatus'
type TaskUsecaseMock_UpdateGitStatus_Call struct {
	*mock.Call
}

// UpdateGitStatus is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - gitStatus
func (_e *TaskUsecaseMock_Expecter) UpdateGitStatus(ctx interface{}, taskID interface{}, gitStatus interface{}) *TaskUsecaseMock_UpdateGitStatus_Call {
	return &TaskUsecaseMock_UpdateGitStatus_Call{Call: _e.mock.On("UpdateGitStatus", ctx, taskID, gitStatus)}
}

func (_c *TaskUsecaseMock_UpdateGitStatus_Call) Run(run func(ctx context.Context, taskID uuid.UUID, gitStatus entity.TaskGitStatus)) *TaskUsecaseMock_UpdateGitStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskGitStatus))
	})
	return _c
}

func (_c *TaskUsecaseMock_UpdateGitStatus_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_UpdateGitStatus_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_UpdateGitStatus_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, gitStatus entity.TaskGitStatus) (*entity.Task, error)) *TaskUsecaseMock_UpdateGitStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParentTask provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) UpdateParentTask(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error {
	ret := _mock.Called(ctx, taskID, parentTaskID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParentTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID, parentTaskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_UpdateParentTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParentTask'
type TaskUsecaseMock_UpdateParentTask_Call struct {
	*mock.Call
}

// UpdateParentTask is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - parentTaskID
func (_e *TaskUsecaseMock_Expecter) UpdateParentTask(ctx interface{}, taskID interface{}, parentTaskID interface{}) *TaskUsecaseMock_UpdateParentTask_Call {
	return &TaskUsecaseMock_UpdateParentTask_Call{Call: _e.mock.On("UpdateParentTask", ctx, taskID, parentTaskID)}
}

func (_c *TaskUsecaseMock_UpdateParentTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID)) *TaskUsecaseMock_UpdateParentTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskUsecaseMock_UpdateParentTask_Call) Return(err error) *TaskUsecaseMock_UpdateParentTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_UpdateParentTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error) *TaskUsecaseMock_UpdateParentTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.TaskStatus) (*entity.Task, error) {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) (*entity.Task, error)); ok {
		return returnFunc(ctx, id, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) *entity.Task); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type TaskUsecaseMock_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *TaskUsecaseMock_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *TaskUsecaseMock_UpdateStatus_Call {
	return &TaskUsecaseMock_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *TaskUsecaseMock_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus)) *TaskUsecaseMock_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskStatus))
	})
	return _c
}

func (_c *TaskUsecaseMock_UpdateStatus_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_UpdateStatus_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus) (*entity.Task, error)) *TaskUsecaseMock_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusWithHistory provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) UpdateStatusWithHistory(ctx context.Context, req UpdateStatusRequest) (*entity.Task, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusWithHistory")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateStatusRequest) (*entity.Task, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateStatusRequest) *entity.Task); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateStatusRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_UpdateStatusWithHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusWithHistory'
type TaskUsecaseMock_UpdateStatusWithHistory_Call struct {
	*mock.Call
}

// UpdateStatusWithHistory is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *TaskUsecaseMock_Expecter) UpdateStatusWithHistory(ctx interface{}, req interface{}) *TaskUsecaseMock_UpdateStatusWithHistory_Call {
	return &TaskUsecaseMock_UpdateStatusWithHistory_Call{Call: _e.mock.On("UpdateStatusWithHistory", ctx, req)}
}

func (_c *TaskUsecaseMock_UpdateStatusWithHistory_Call) Run(run func(ctx context.Context, req UpdateStatusRequest)) *TaskUsecaseMock_UpdateStatusWithHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateStatusRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_UpdateStatusWithHistory_Call) Return(task *entity.Task, err error) *TaskUsecaseMock_UpdateStatusWithHistory_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskUsecaseMock_UpdateStatusWithHistory_Call) RunAndReturn(run func(ctx context.Context, req UpdateStatusRequest) (*entity.Task, error)) *TaskUsecaseMock_UpdateStatusWithHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTemplate provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) UpdateTemplate(ctx context.Context, id uuid.UUID, req UpdateTemplateRequest) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTemplateRequest) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateTemplateRequest) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateTemplateRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecaseMock_UpdateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplate'
type TaskUsecaseMock_UpdateTemplate_Call struct {
	*mock.Call
}

// UpdateTemplate is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *TaskUsecaseMock_Expecter) UpdateTemplate(ctx interface{}, id interface{}, req interface{}) *TaskUsecaseMock_UpdateTemplate_Call {
	return &TaskUsecaseMock_UpdateTemplate_Call{Call: _e.mock.On("UpdateTemplate", ctx, id, req)}
}

func (_c *TaskUsecaseMock_UpdateTemplate_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateTemplateRequest)) *TaskUsecaseMock_UpdateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateTemplateRequest))
	})
	return _c
}

func (_c *TaskUsecaseMock_UpdateTemplate_Call) Return(taskTemplate *entity.TaskTemplate, err error) *TaskUsecaseMock_UpdateTemplate_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *TaskUsecaseMock_UpdateTemplate_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateTemplateRequest) (*entity.TaskTemplate, error)) *TaskUsecaseMock_UpdateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateGitStatusTransition provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) ValidateGitStatusTransition(ctx context.Context, taskID uuid.UUID, newGitStatus entity.TaskGitStatus) error {
	ret := _mock.Called(ctx, taskID, newGitStatus)

	if len(ret) == 0 {
		panic("no return value specified for ValidateGitStatusTransition")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskGitStatus) error); ok {
		r0 = returnFunc(ctx, taskID, newGitStatus)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_ValidateGitStatusTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGitStatusTransition'
type TaskUsecaseMock_ValidateGitStatusTransition_Call struct {
	*mock.Call
}

// ValidateGitStatusTransition is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - newGitStatus
func (_e *TaskUsecaseMock_Expecter) ValidateGitStatusTransition(ctx interface{}, taskID interface{}, newGitStatus interface{}) *TaskUsecaseMock_ValidateGitStatusTransition_Call {
	return &TaskUsecaseMock_ValidateGitStatusTransition_Call{Call: _e.mock.On("ValidateGitStatusTransition", ctx, taskID, newGitStatus)}
}

func (_c *TaskUsecaseMock_ValidateGitStatusTransition_Call) Run(run func(ctx context.Context, taskID uuid.UUID, newGitStatus entity.TaskGitStatus)) *TaskUsecaseMock_ValidateGitStatusTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskGitStatus))
	})
	return _c
}

func (_c *TaskUsecaseMock_ValidateGitStatusTransition_Call) Return(err error) *TaskUsecaseMock_ValidateGitStatusTransition_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_ValidateGitStatusTransition_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, newGitStatus entity.TaskGitStatus) error) *TaskUsecaseMock_ValidateGitStatusTransition_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStatusTransition provides a mock function for the type TaskUsecaseMock
func (_mock *TaskUsecaseMock) ValidateStatusTransition(ctx context.Context, taskID uuid.UUID, newStatus entity.TaskStatus) error {
	ret := _mock.Called(ctx, taskID, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStatusTransition")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) error); ok {
		r0 = returnFunc(ctx, taskID, newStatus)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecaseMock_ValidateStatusTransition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStatusTransition'
type TaskUsecaseMock_ValidateStatusTransition_Call struct {
	*mock.Call
}

// ValidateStatusTransition is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - newStatus
func (_e *TaskUsecaseMock_Expecter) ValidateStatusTransition(ctx interface{}, taskID interface{}, newStatus interface{}) *TaskUsecaseMock_ValidateStatusTransition_Call {
	return &TaskUsecaseMock_ValidateStatusTransition_Call{Call: _e.mock.On("ValidateStatusTransition", ctx, taskID, newStatus)}
}

func (_c *TaskUsecaseMock_ValidateStatusTransition_Call) Run(run func(ctx context.Context, taskID uuid.UUID, newStatus entity.TaskStatus)) *TaskUsecaseMock_ValidateStatusTransition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskStatus))
	})
	return _c
}

func (_c *TaskUsecaseMock_ValidateStatusTransition_Call) Return(err error) *TaskUsecaseMock_ValidateStatusTransition_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecaseMock_ValidateStatusTransition_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, newStatus entity.TaskStatus) error) *TaskUsecaseMock_ValidateStatusTransition_Call {
	_c.Call.Return(run)
	return _c
}
