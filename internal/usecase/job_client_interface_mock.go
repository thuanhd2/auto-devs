// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewJobClientInterfaceMock creates a new instance of JobClientInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobClientInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobClientInterfaceMock {
	mock := &JobClientInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JobClientInterfaceMock is an autogenerated mock type for the JobClientInterface type
type JobClientInterfaceMock struct {
	mock.Mock
}

type JobClientInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *JobClientInterfaceMock) EXPECT() *JobClientInterfaceMock_Expecter {
	return &JobClientInterfaceMock_Expecter{mock: &_m.Mock}
}

// EnqueueTaskPlanning provides a mock function for the type JobClientInterfaceMock
func (_mock *JobClientInterfaceMock) EnqueueTaskPlanning(payload *TaskPlanningPayload, delay time.Duration) (string, error) {
	ret := _mock.Called(payload, delay)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueTaskPlanning")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*TaskPlanningPayload, time.Duration) (string, error)); ok {
		return returnFunc(payload, delay)
	}
	if returnFunc, ok := ret.Get(0).(func(*TaskPlanningPayload, time.Duration) string); ok {
		r0 = returnFunc(payload, delay)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*TaskPlanningPayload, time.Duration) error); ok {
		r1 = returnFunc(payload, delay)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JobClientInterfaceMock_EnqueueTaskPlanning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueTaskPlanning'
type JobClientInterfaceMock_EnqueueTaskPlanning_Call struct {
	*mock.Call
}

// EnqueueTaskPlanning is a helper method to define mock.On call
//   - payload
//   - delay
func (_e *JobClientInterfaceMock_Expecter) EnqueueTaskPlanning(payload interface{}, delay interface{}) *JobClientInterfaceMock_EnqueueTaskPlanning_Call {
	return &JobClientInterfaceMock_EnqueueTaskPlanning_Call{Call: _e.mock.On("EnqueueTaskPlanning", payload, delay)}
}

func (_c *JobClientInterfaceMock_EnqueueTaskPlanning_Call) Run(run func(payload *TaskPlanningPayload, delay time.Duration)) *JobClientInterfaceMock_EnqueueTaskPlanning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*TaskPlanningPayload), args[1].(time.Duration))
	})
	return _c
}

func (_c *JobClientInterfaceMock_EnqueueTaskPlanning_Call) Return(s string, err error) *JobClientInterfaceMock_EnqueueTaskPlanning_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *JobClientInterfaceMock_EnqueueTaskPlanning_Call) RunAndReturn(run func(payload *TaskPlanningPayload, delay time.Duration) (string, error)) *JobClientInterfaceMock_EnqueueTaskPlanning_Call {
	_c.Call.Return(run)
	return _c
}
