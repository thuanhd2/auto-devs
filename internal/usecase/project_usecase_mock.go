// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewProjectUsecaseMock creates a new instance of ProjectUsecaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectUsecaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectUsecaseMock {
	mock := &ProjectUsecaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProjectUsecaseMock is an autogenerated mock type for the ProjectUsecase type
type ProjectUsecaseMock struct {
	mock.Mock
}

type ProjectUsecaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectUsecaseMock) EXPECT() *ProjectUsecaseMock_Expecter {
	return &ProjectUsecaseMock_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) Archive(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProjectUsecaseMock_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type ProjectUsecaseMock_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ProjectUsecaseMock_Expecter) Archive(ctx interface{}, id interface{}) *ProjectUsecaseMock_Archive_Call {
	return &ProjectUsecaseMock_Archive_Call{Call: _e.mock.On("Archive", ctx, id)}
}

func (_c *ProjectUsecaseMock_Archive_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectUsecaseMock_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_Archive_Call) Return(err error) *ProjectUsecaseMock_Archive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProjectUsecaseMock_Archive_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ProjectUsecaseMock_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// CheckNameExists provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) CheckNameExists(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, name, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckNameExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, name, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, name, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, name, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_CheckNameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNameExists'
type ProjectUsecaseMock_CheckNameExists_Call struct {
	*mock.Call
}

// CheckNameExists is a helper method to define mock.On call
//   - ctx
//   - name
//   - excludeID
func (_e *ProjectUsecaseMock_Expecter) CheckNameExists(ctx interface{}, name interface{}, excludeID interface{}) *ProjectUsecaseMock_CheckNameExists_Call {
	return &ProjectUsecaseMock_CheckNameExists_Call{Call: _e.mock.On("CheckNameExists", ctx, name, excludeID)}
}

func (_c *ProjectUsecaseMock_CheckNameExists_Call) Run(run func(ctx context.Context, name string, excludeID *uuid.UUID)) *ProjectUsecaseMock_CheckNameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_CheckNameExists_Call) Return(b bool, err error) *ProjectUsecaseMock_CheckNameExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *ProjectUsecaseMock_CheckNameExists_Call) RunAndReturn(run func(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error)) *ProjectUsecaseMock_CheckNameExists_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) Create(ctx context.Context, req CreateProjectRequest) (*entity.Project, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateProjectRequest) (*entity.Project, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateProjectRequest) *entity.Project); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateProjectRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProjectUsecaseMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *ProjectUsecaseMock_Expecter) Create(ctx interface{}, req interface{}) *ProjectUsecaseMock_Create_Call {
	return &ProjectUsecaseMock_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *ProjectUsecaseMock_Create_Call) Run(run func(ctx context.Context, req CreateProjectRequest)) *ProjectUsecaseMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateProjectRequest))
	})
	return _c
}

func (_c *ProjectUsecaseMock_Create_Call) Return(project *entity.Project, err error) *ProjectUsecaseMock_Create_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *ProjectUsecaseMock_Create_Call) RunAndReturn(run func(ctx context.Context, req CreateProjectRequest) (*entity.Project, error)) *ProjectUsecaseMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProjectUsecaseMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ProjectUsecaseMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ProjectUsecaseMock_Expecter) Delete(ctx interface{}, id interface{}) *ProjectUsecaseMock_Delete_Call {
	return &ProjectUsecaseMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ProjectUsecaseMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectUsecaseMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_Delete_Call) Return(err error) *ProjectUsecaseMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProjectUsecaseMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ProjectUsecaseMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) GetAll(ctx context.Context, params GetProjectsParams) (*GetProjectsResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *GetProjectsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetProjectsParams) (*GetProjectsResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetProjectsParams) *GetProjectsResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetProjectsResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetProjectsParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ProjectUsecaseMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *ProjectUsecaseMock_Expecter) GetAll(ctx interface{}, params interface{}) *ProjectUsecaseMock_GetAll_Call {
	return &ProjectUsecaseMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, params)}
}

func (_c *ProjectUsecaseMock_GetAll_Call) Run(run func(ctx context.Context, params GetProjectsParams)) *ProjectUsecaseMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetProjectsParams))
	})
	return _c
}

func (_c *ProjectUsecaseMock_GetAll_Call) Return(getProjectsResult *GetProjectsResult, err error) *ProjectUsecaseMock_GetAll_Call {
	_c.Call.Return(getProjectsResult, err)
	return _c
}

func (_c *ProjectUsecaseMock_GetAll_Call) RunAndReturn(run func(ctx context.Context, params GetProjectsParams) (*GetProjectsResult, error)) *ProjectUsecaseMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProjectUsecaseMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ProjectUsecaseMock_Expecter) GetByID(ctx interface{}, id interface{}) *ProjectUsecaseMock_GetByID_Call {
	return &ProjectUsecaseMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ProjectUsecaseMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectUsecaseMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_GetByID_Call) Return(project *entity.Project, err error) *ProjectUsecaseMock_GetByID_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *ProjectUsecaseMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *ProjectUsecaseMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGitStatus provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) GetGitStatus(ctx context.Context, projectID uuid.UUID) (*GitStatus, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetGitStatus")
	}

	var r0 *GitStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*GitStatus, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *GitStatus); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GitStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_GetGitStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGitStatus'
type ProjectUsecaseMock_GetGitStatus_Call struct {
	*mock.Call
}

// GetGitStatus is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *ProjectUsecaseMock_Expecter) GetGitStatus(ctx interface{}, projectID interface{}) *ProjectUsecaseMock_GetGitStatus_Call {
	return &ProjectUsecaseMock_GetGitStatus_Call{Call: _e.mock.On("GetGitStatus", ctx, projectID)}
}

func (_c *ProjectUsecaseMock_GetGitStatus_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *ProjectUsecaseMock_GetGitStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_GetGitStatus_Call) Return(gitStatus *GitStatus, err error) *ProjectUsecaseMock_GetGitStatus_Call {
	_c.Call.Return(gitStatus, err)
	return _c
}

func (_c *ProjectUsecaseMock_GetGitStatus_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*GitStatus, error)) *ProjectUsecaseMock_GetGitStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettings provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) GetSettings(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type ProjectUsecaseMock_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *ProjectUsecaseMock_Expecter) GetSettings(ctx interface{}, projectID interface{}) *ProjectUsecaseMock_GetSettings_Call {
	return &ProjectUsecaseMock_GetSettings_Call{Call: _e.mock.On("GetSettings", ctx, projectID)}
}

func (_c *ProjectUsecaseMock_GetSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *ProjectUsecaseMock_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_GetSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *ProjectUsecaseMock_GetSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *ProjectUsecaseMock_GetSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error)) *ProjectUsecaseMock_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) GetStatistics(ctx context.Context, id uuid.UUID) (*ProjectStatistics, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 *ProjectStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ProjectStatistics, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ProjectStatistics); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type ProjectUsecaseMock_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ProjectUsecaseMock_Expecter) GetStatistics(ctx interface{}, id interface{}) *ProjectUsecaseMock_GetStatistics_Call {
	return &ProjectUsecaseMock_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx, id)}
}

func (_c *ProjectUsecaseMock_GetStatistics_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectUsecaseMock_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_GetStatistics_Call) Return(projectStatistics *ProjectStatistics, err error) *ProjectUsecaseMock_GetStatistics_Call {
	_c.Call.Return(projectStatistics, err)
	return _c
}

func (_c *ProjectUsecaseMock_GetStatistics_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*ProjectStatistics, error)) *ProjectUsecaseMock_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithTasks provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) GetWithTasks(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithTasks")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_GetWithTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithTasks'
type ProjectUsecaseMock_GetWithTasks_Call struct {
	*mock.Call
}

// GetWithTasks is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ProjectUsecaseMock_Expecter) GetWithTasks(ctx interface{}, id interface{}) *ProjectUsecaseMock_GetWithTasks_Call {
	return &ProjectUsecaseMock_GetWithTasks_Call{Call: _e.mock.On("GetWithTasks", ctx, id)}
}

func (_c *ProjectUsecaseMock_GetWithTasks_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectUsecaseMock_GetWithTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_GetWithTasks_Call) Return(project *entity.Project, err error) *ProjectUsecaseMock_GetWithTasks_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *ProjectUsecaseMock_GetWithTasks_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *ProjectUsecaseMock_GetWithTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ReinitGitRepository provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) ReinitGitRepository(ctx context.Context, projectID uuid.UUID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ReinitGitRepository")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProjectUsecaseMock_ReinitGitRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReinitGitRepository'
type ProjectUsecaseMock_ReinitGitRepository_Call struct {
	*mock.Call
}

// ReinitGitRepository is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *ProjectUsecaseMock_Expecter) ReinitGitRepository(ctx interface{}, projectID interface{}) *ProjectUsecaseMock_ReinitGitRepository_Call {
	return &ProjectUsecaseMock_ReinitGitRepository_Call{Call: _e.mock.On("ReinitGitRepository", ctx, projectID)}
}

func (_c *ProjectUsecaseMock_ReinitGitRepository_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *ProjectUsecaseMock_ReinitGitRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_ReinitGitRepository_Call) Return(err error) *ProjectUsecaseMock_ReinitGitRepository_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProjectUsecaseMock_ReinitGitRepository_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) error) *ProjectUsecaseMock_ReinitGitRepository_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) Restore(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProjectUsecaseMock_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type ProjectUsecaseMock_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ProjectUsecaseMock_Expecter) Restore(ctx interface{}, id interface{}) *ProjectUsecaseMock_Restore_Call {
	return &ProjectUsecaseMock_Restore_Call{Call: _e.mock.On("Restore", ctx, id)}
}

func (_c *ProjectUsecaseMock_Restore_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectUsecaseMock_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectUsecaseMock_Restore_Call) Return(err error) *ProjectUsecaseMock_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProjectUsecaseMock_Restore_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ProjectUsecaseMock_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) Update(ctx context.Context, id uuid.UUID, req UpdateProjectRequest) (*entity.Project, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateProjectRequest) (*entity.Project, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, UpdateProjectRequest) *entity.Project); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, UpdateProjectRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProjectUsecaseMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *ProjectUsecaseMock_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *ProjectUsecaseMock_Update_Call {
	return &ProjectUsecaseMock_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *ProjectUsecaseMock_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, req UpdateProjectRequest)) *ProjectUsecaseMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(UpdateProjectRequest))
	})
	return _c
}

func (_c *ProjectUsecaseMock_Update_Call) Return(project *entity.Project, err error) *ProjectUsecaseMock_Update_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *ProjectUsecaseMock_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req UpdateProjectRequest) (*entity.Project, error)) *ProjectUsecaseMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepositoryURL provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) UpdateRepositoryURL(ctx context.Context, projectID uuid.UUID, repositoryURL string) error {
	ret := _mock.Called(ctx, projectID, repositoryURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryURL")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, projectID, repositoryURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProjectUsecaseMock_UpdateRepositoryURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepositoryURL'
type ProjectUsecaseMock_UpdateRepositoryURL_Call struct {
	*mock.Call
}

// UpdateRepositoryURL is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - repositoryURL
func (_e *ProjectUsecaseMock_Expecter) UpdateRepositoryURL(ctx interface{}, projectID interface{}, repositoryURL interface{}) *ProjectUsecaseMock_UpdateRepositoryURL_Call {
	return &ProjectUsecaseMock_UpdateRepositoryURL_Call{Call: _e.mock.On("UpdateRepositoryURL", ctx, projectID, repositoryURL)}
}

func (_c *ProjectUsecaseMock_UpdateRepositoryURL_Call) Run(run func(ctx context.Context, projectID uuid.UUID, repositoryURL string)) *ProjectUsecaseMock_UpdateRepositoryURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ProjectUsecaseMock_UpdateRepositoryURL_Call) Return(err error) *ProjectUsecaseMock_UpdateRepositoryURL_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProjectUsecaseMock_UpdateRepositoryURL_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, repositoryURL string) error) *ProjectUsecaseMock_UpdateRepositoryURL_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function for the type ProjectUsecaseMock
func (_mock *ProjectUsecaseMock) UpdateSettings(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ProjectSettings) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID, settings)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ProjectSettings) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.ProjectSettings) error); ok {
		r1 = returnFunc(ctx, projectID, settings)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProjectUsecaseMock_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type ProjectUsecaseMock_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - settings
func (_e *ProjectUsecaseMock_Expecter) UpdateSettings(ctx interface{}, projectID interface{}, settings interface{}) *ProjectUsecaseMock_UpdateSettings_Call {
	return &ProjectUsecaseMock_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", ctx, projectID, settings)}
}

func (_c *ProjectUsecaseMock_UpdateSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings)) *ProjectUsecaseMock_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*entity.ProjectSettings))
	})
	return _c
}

func (_c *ProjectUsecaseMock_UpdateSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *ProjectUsecaseMock_UpdateSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *ProjectUsecaseMock_UpdateSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings) (*entity.ProjectSettings, error)) *ProjectUsecaseMock_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}
