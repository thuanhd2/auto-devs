// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotificationUsecase creates a new instance of MockNotificationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationUsecase {
	mock := &MockNotificationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationUsecase is an autogenerated mock type for the NotificationUsecase type
type MockNotificationUsecase struct {
	mock.Mock
}

type MockNotificationUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationUsecase) EXPECT() *MockNotificationUsecase_Expecter {
	return &MockNotificationUsecase_Expecter{mock: &_m.Mock}
}

// RegisterHandler provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) RegisterHandler(notificationType entity.NotificationType, handler entity.NotificationHandler) error {
	ret := _mock.Called(notificationType, handler)

	if len(ret) == 0 {
		panic("no return value specified for RegisterHandler")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.NotificationType, entity.NotificationHandler) error); ok {
		r0 = returnFunc(notificationType, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type MockNotificationUsecase_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - notificationType
//   - handler
func (_e *MockNotificationUsecase_Expecter) RegisterHandler(notificationType interface{}, handler interface{}) *MockNotificationUsecase_RegisterHandler_Call {
	return &MockNotificationUsecase_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", notificationType, handler)}
}

func (_c *MockNotificationUsecase_RegisterHandler_Call) Run(run func(notificationType entity.NotificationType, handler entity.NotificationHandler)) *MockNotificationUsecase_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.NotificationType), args[1].(entity.NotificationHandler))
	})
	return _c
}

func (_c *MockNotificationUsecase_RegisterHandler_Call) Return(err error) *MockNotificationUsecase_RegisterHandler_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_RegisterHandler_Call) RunAndReturn(run func(notificationType entity.NotificationType, handler entity.NotificationHandler) error) *MockNotificationUsecase_RegisterHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SendTaskCreatedNotification provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) SendTaskCreatedNotification(ctx context.Context, task *entity.Task, project *entity.Project) error {
	ret := _mock.Called(ctx, task, project)

	if len(ret) == 0 {
		panic("no return value specified for SendTaskCreatedNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Task, *entity.Project) error); ok {
		r0 = returnFunc(ctx, task, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_SendTaskCreatedNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTaskCreatedNotification'
type MockNotificationUsecase_SendTaskCreatedNotification_Call struct {
	*mock.Call
}

// SendTaskCreatedNotification is a helper method to define mock.On call
//   - ctx
//   - task
//   - project
func (_e *MockNotificationUsecase_Expecter) SendTaskCreatedNotification(ctx interface{}, task interface{}, project interface{}) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	return &MockNotificationUsecase_SendTaskCreatedNotification_Call{Call: _e.mock.On("SendTaskCreatedNotification", ctx, task, project)}
}

func (_c *MockNotificationUsecase_SendTaskCreatedNotification_Call) Run(run func(ctx context.Context, task *entity.Task, project *entity.Project)) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Task), args[2].(*entity.Project))
	})
	return _c
}

func (_c *MockNotificationUsecase_SendTaskCreatedNotification_Call) Return(err error) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_SendTaskCreatedNotification_Call) RunAndReturn(run func(ctx context.Context, task *entity.Task, project *entity.Project) error) *MockNotificationUsecase_SendTaskCreatedNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendTaskStatusChangeNotification provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) SendTaskStatusChangeNotification(ctx context.Context, data entity.TaskStatusChangeNotificationData) error {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SendTaskStatusChangeNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatusChangeNotificationData) error); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_SendTaskStatusChangeNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTaskStatusChangeNotification'
type MockNotificationUsecase_SendTaskStatusChangeNotification_Call struct {
	*mock.Call
}

// SendTaskStatusChangeNotification is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockNotificationUsecase_Expecter) SendTaskStatusChangeNotification(ctx interface{}, data interface{}) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	return &MockNotificationUsecase_SendTaskStatusChangeNotification_Call{Call: _e.mock.On("SendTaskStatusChangeNotification", ctx, data)}
}

func (_c *MockNotificationUsecase_SendTaskStatusChangeNotification_Call) Run(run func(ctx context.Context, data entity.TaskStatusChangeNotificationData)) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskStatusChangeNotificationData))
	})
	return _c
}

func (_c *MockNotificationUsecase_SendTaskStatusChangeNotification_Call) Return(err error) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_SendTaskStatusChangeNotification_Call) RunAndReturn(run func(ctx context.Context, data entity.TaskStatusChangeNotificationData) error) *MockNotificationUsecase_SendTaskStatusChangeNotification_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterHandler provides a mock function for the type MockNotificationUsecase
func (_mock *MockNotificationUsecase) UnregisterHandler(notificationType entity.NotificationType) error {
	ret := _mock.Called(notificationType)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterHandler")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(entity.NotificationType) error); ok {
		r0 = returnFunc(notificationType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationUsecase_UnregisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterHandler'
type MockNotificationUsecase_UnregisterHandler_Call struct {
	*mock.Call
}

// UnregisterHandler is a helper method to define mock.On call
//   - notificationType
func (_e *MockNotificationUsecase_Expecter) UnregisterHandler(notificationType interface{}) *MockNotificationUsecase_UnregisterHandler_Call {
	return &MockNotificationUsecase_UnregisterHandler_Call{Call: _e.mock.On("UnregisterHandler", notificationType)}
}

func (_c *MockNotificationUsecase_UnregisterHandler_Call) Run(run func(notificationType entity.NotificationType)) *MockNotificationUsecase_UnregisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.NotificationType))
	})
	return _c
}

func (_c *MockNotificationUsecase_UnregisterHandler_Call) Return(err error) *MockNotificationUsecase_UnregisterHandler_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationUsecase_UnregisterHandler_Call) RunAndReturn(run func(notificationType entity.NotificationType) error) *MockNotificationUsecase_UnregisterHandler_Call {
	_c.Call.Return(run)
	return _c
}
