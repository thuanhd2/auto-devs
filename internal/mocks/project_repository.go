// Code generated by mockery; DO NOT EDIT.
package mocks

import (
	"context"
	"time"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/auto-devs/auto-devs/internal/repository"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockProjectRepository is an autogenerated mock type for the ProjectRepository type
type MockProjectRepository struct {
	mock.Mock
}

func (m *MockProjectRepository) Create(ctx context.Context, project *entity.Project) error {
	args := m.Called(ctx, project)
	return args.Error(0)
}

func (m *MockProjectRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*entity.Project), args.Error(1)
}

func (m *MockProjectRepository) GetAll(ctx context.Context) ([]*entity.Project, error) {
	args := m.Called(ctx)
	return args.Get(0).([]*entity.Project), args.Error(1)
}

func (m *MockProjectRepository) GetAllWithParams(ctx context.Context, params repository.GetProjectsParams) ([]*entity.Project, int, error) {
	args := m.Called(ctx, params)
	return args.Get(0).([]*entity.Project), args.Int(1), args.Error(2)
}

func (m *MockProjectRepository) Update(ctx context.Context, project *entity.Project) error {
	args := m.Called(ctx, project)
	return args.Error(0)
}

func (m *MockProjectRepository) Delete(ctx context.Context, id uuid.UUID) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *MockProjectRepository) GetWithTaskCount(ctx context.Context, id uuid.UUID) (*repository.ProjectWithTaskCount, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*repository.ProjectWithTaskCount), args.Error(1)
}

func (m *MockProjectRepository) GetTaskStatistics(ctx context.Context, projectID uuid.UUID) (map[entity.TaskStatus]int, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).(map[entity.TaskStatus]int), args.Error(1)
}

func (m *MockProjectRepository) GetLastActivityAt(ctx context.Context, projectID uuid.UUID) (*time.Time, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).(*time.Time), args.Error(1)
}

func (m *MockProjectRepository) Archive(ctx context.Context, id uuid.UUID) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *MockProjectRepository) Restore(ctx context.Context, id uuid.UUID) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *MockProjectRepository) CheckNameExists(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error) {
	args := m.Called(ctx, name, excludeID)
	return args.Bool(0), args.Error(1)
}

func (m *MockProjectRepository) GetSettings(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).(*entity.ProjectSettings), args.Error(1)
}

func (m *MockProjectRepository) CreateSettings(ctx context.Context, settings *entity.ProjectSettings) error {
	args := m.Called(ctx, settings)
	return args.Error(0)
}

func (m *MockProjectRepository) UpdateSettings(ctx context.Context, settings *entity.ProjectSettings) error {
	args := m.Called(ctx, settings)
	return args.Error(0)
}