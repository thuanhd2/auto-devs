// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/auto-devs/auto-devs/internal/usecase"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectUsecase creates a new instance of MockProjectUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectUsecase {
	mock := &MockProjectUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectUsecase is an autogenerated mock type for the ProjectUsecase type
type MockProjectUsecase struct {
	mock.Mock
}

type MockProjectUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectUsecase) EXPECT() *MockProjectUsecase_Expecter {
	return &MockProjectUsecase_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Archive(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectUsecase_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockProjectUsecase_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) Archive(ctx interface{}, id interface{}) *MockProjectUsecase_Archive_Call {
	return &MockProjectUsecase_Archive_Call{Call: _e.mock.On("Archive", ctx, id)}
}

func (_c *MockProjectUsecase_Archive_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_Archive_Call) Return(err error) *MockProjectUsecase_Archive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectUsecase_Archive_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectUsecase_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// CheckNameExists provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) CheckNameExists(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, name, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckNameExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, name, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, name, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, name, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_CheckNameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNameExists'
type MockProjectUsecase_CheckNameExists_Call struct {
	*mock.Call
}

// CheckNameExists is a helper method to define mock.On call
//   - ctx
//   - name
//   - excludeID
func (_e *MockProjectUsecase_Expecter) CheckNameExists(ctx interface{}, name interface{}, excludeID interface{}) *MockProjectUsecase_CheckNameExists_Call {
	return &MockProjectUsecase_CheckNameExists_Call{Call: _e.mock.On("CheckNameExists", ctx, name, excludeID)}
}

func (_c *MockProjectUsecase_CheckNameExists_Call) Run(run func(ctx context.Context, name string, excludeID *uuid.UUID)) *MockProjectUsecase_CheckNameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_CheckNameExists_Call) Return(b bool, err error) *MockProjectUsecase_CheckNameExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProjectUsecase_CheckNameExists_Call) RunAndReturn(run func(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error)) *MockProjectUsecase_CheckNameExists_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Create(ctx context.Context, req usecase.CreateProjectRequest) (*entity.Project, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecase.CreateProjectRequest) (*entity.Project, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecase.CreateProjectRequest) *entity.Project); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, usecase.CreateProjectRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockProjectUsecase_Expecter) Create(ctx interface{}, req interface{}) *MockProjectUsecase_Create_Call {
	return &MockProjectUsecase_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockProjectUsecase_Create_Call) Run(run func(ctx context.Context, req usecase.CreateProjectRequest)) *MockProjectUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.CreateProjectRequest))
	})
	return _c
}

func (_c *MockProjectUsecase_Create_Call) Return(project *entity.Project, err error) *MockProjectUsecase_Create_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_Create_Call) RunAndReturn(run func(ctx context.Context, req usecase.CreateProjectRequest) (*entity.Project, error)) *MockProjectUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) Delete(ctx interface{}, id interface{}) *MockProjectUsecase_Delete_Call {
	return &MockProjectUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProjectUsecase_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_Delete_Call) Return(err error) *MockProjectUsecase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectUsecase_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetAll(ctx context.Context, params usecase.GetProjectsParams) (*usecase.GetProjectsResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *usecase.GetProjectsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecase.GetProjectsParams) (*usecase.GetProjectsResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecase.GetProjectsParams) *usecase.GetProjectsResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.GetProjectsResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, usecase.GetProjectsParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockProjectUsecase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockProjectUsecase_Expecter) GetAll(ctx interface{}, params interface{}) *MockProjectUsecase_GetAll_Call {
	return &MockProjectUsecase_GetAll_Call{Call: _e.mock.On("GetAll", ctx, params)}
}

func (_c *MockProjectUsecase_GetAll_Call) Run(run func(ctx context.Context, params usecase.GetProjectsParams)) *MockProjectUsecase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.GetProjectsParams))
	})
	return _c
}

func (_c *MockProjectUsecase_GetAll_Call) Return(getProjectsResult *usecase.GetProjectsResult, err error) *MockProjectUsecase_GetAll_Call {
	_c.Call.Return(getProjectsResult, err)
	return _c
}

func (_c *MockProjectUsecase_GetAll_Call) RunAndReturn(run func(ctx context.Context, params usecase.GetProjectsParams) (*usecase.GetProjectsResult, error)) *MockProjectUsecase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetByID(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProjectUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) GetByID(ctx interface{}, id interface{}) *MockProjectUsecase_GetByID_Call {
	return &MockProjectUsecase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProjectUsecase_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetByID_Call) Return(project *entity.Project, err error) *MockProjectUsecase_GetByID_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *MockProjectUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettings provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetSettings(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type MockProjectUsecase_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockProjectUsecase_Expecter) GetSettings(ctx interface{}, projectID interface{}) *MockProjectUsecase_GetSettings_Call {
	return &MockProjectUsecase_GetSettings_Call{Call: _e.mock.On("GetSettings", ctx, projectID)}
}

func (_c *MockProjectUsecase_GetSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockProjectUsecase_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *MockProjectUsecase_GetSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *MockProjectUsecase_GetSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error)) *MockProjectUsecase_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetStatistics(ctx context.Context, id uuid.UUID) (*usecase.ProjectStatistics, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 *usecase.ProjectStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*usecase.ProjectStatistics, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *usecase.ProjectStatistics); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.ProjectStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type MockProjectUsecase_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) GetStatistics(ctx interface{}, id interface{}) *MockProjectUsecase_GetStatistics_Call {
	return &MockProjectUsecase_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx, id)}
}

func (_c *MockProjectUsecase_GetStatistics_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetStatistics_Call) Return(projectStatistics *usecase.ProjectStatistics, err error) *MockProjectUsecase_GetStatistics_Call {
	_c.Call.Return(projectStatistics, err)
	return _c
}

func (_c *MockProjectUsecase_GetStatistics_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*usecase.ProjectStatistics, error)) *MockProjectUsecase_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithTasks provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) GetWithTasks(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithTasks")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_GetWithTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithTasks'
type MockProjectUsecase_GetWithTasks_Call struct {
	*mock.Call
}

// GetWithTasks is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) GetWithTasks(ctx interface{}, id interface{}) *MockProjectUsecase_GetWithTasks_Call {
	return &MockProjectUsecase_GetWithTasks_Call{Call: _e.mock.On("GetWithTasks", ctx, id)}
}

func (_c *MockProjectUsecase_GetWithTasks_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_GetWithTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_GetWithTasks_Call) Return(project *entity.Project, err error) *MockProjectUsecase_GetWithTasks_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_GetWithTasks_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *MockProjectUsecase_GetWithTasks_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Restore(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectUsecase_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockProjectUsecase_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectUsecase_Expecter) Restore(ctx interface{}, id interface{}) *MockProjectUsecase_Restore_Call {
	return &MockProjectUsecase_Restore_Call{Call: _e.mock.On("Restore", ctx, id)}
}

func (_c *MockProjectUsecase_Restore_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectUsecase_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectUsecase_Restore_Call) Return(err error) *MockProjectUsecase_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectUsecase_Restore_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectUsecase_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) Update(ctx context.Context, id uuid.UUID, req usecase.UpdateProjectRequest) (*entity.Project, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, usecase.UpdateProjectRequest) (*entity.Project, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, usecase.UpdateProjectRequest) *entity.Project); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, usecase.UpdateProjectRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *MockProjectUsecase_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *MockProjectUsecase_Update_Call {
	return &MockProjectUsecase_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *MockProjectUsecase_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, req usecase.UpdateProjectRequest)) *MockProjectUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(usecase.UpdateProjectRequest))
	})
	return _c
}

func (_c *MockProjectUsecase_Update_Call) Return(project *entity.Project, err error) *MockProjectUsecase_Update_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectUsecase_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req usecase.UpdateProjectRequest) (*entity.Project, error)) *MockProjectUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function for the type MockProjectUsecase
func (_mock *MockProjectUsecase) UpdateSettings(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ProjectSettings) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID, settings)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.ProjectSettings) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.ProjectSettings) error); ok {
		r1 = returnFunc(ctx, projectID, settings)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectUsecase_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type MockProjectUsecase_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - settings
func (_e *MockProjectUsecase_Expecter) UpdateSettings(ctx interface{}, projectID interface{}, settings interface{}) *MockProjectUsecase_UpdateSettings_Call {
	return &MockProjectUsecase_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", ctx, projectID, settings)}
}

func (_c *MockProjectUsecase_UpdateSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings)) *MockProjectUsecase_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*entity.ProjectSettings))
	})
	return _c
}

func (_c *MockProjectUsecase_UpdateSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *MockProjectUsecase_UpdateSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *MockProjectUsecase_UpdateSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, settings *entity.ProjectSettings) (*entity.ProjectSettings, error)) *MockProjectUsecase_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}
