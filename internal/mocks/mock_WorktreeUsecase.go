// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/worktree.go

package mocks

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/auto-devs/auto-devs/internal/usecase"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockWorktreeUsecase is a mock of WorktreeUsecase interface
type MockWorktreeUsecase struct {
	mock.Mock
}

// CreateWorktreeForTask mocks base method
func (m *MockWorktreeUsecase) CreateWorktreeForTask(ctx context.Context, req usecase.CreateWorktreeRequest) (*entity.Worktree, error) {
	args := m.Called(ctx, req)
	return args.Get(0).(*entity.Worktree), args.Error(1)
}

// CleanupWorktreeForTask mocks base method
func (m *MockWorktreeUsecase) CleanupWorktreeForTask(ctx context.Context, req usecase.CleanupWorktreeRequest) error {
	args := m.Called(ctx, req)
	return args.Error(0)
}

// GetWorktreeByTaskID mocks base method
func (m *MockWorktreeUsecase) GetWorktreeByTaskID(ctx context.Context, taskID uuid.UUID) (*entity.Worktree, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).(*entity.Worktree), args.Error(1)
}

// GetWorktreesByProjectID mocks base method
func (m *MockWorktreeUsecase) GetWorktreesByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Worktree, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).([]*entity.Worktree), args.Error(1)
}

// UpdateWorktreeStatus mocks base method
func (m *MockWorktreeUsecase) UpdateWorktreeStatus(ctx context.Context, worktreeID uuid.UUID, status entity.WorktreeStatus) error {
	args := m.Called(ctx, worktreeID, status)
	return args.Error(0)
}

// ValidateWorktree mocks base method
func (m *MockWorktreeUsecase) ValidateWorktree(ctx context.Context, worktreeID uuid.UUID) (*usecase.WorktreeValidationResult, error) {
	args := m.Called(ctx, worktreeID)
	return args.Get(0).(*usecase.WorktreeValidationResult), args.Error(1)
}

// GetWorktreeHealth mocks base method
func (m *MockWorktreeUsecase) GetWorktreeHealth(ctx context.Context, worktreeID uuid.UUID) (*usecase.WorktreeHealthInfo, error) {
	args := m.Called(ctx, worktreeID)
	return args.Get(0).(*usecase.WorktreeHealthInfo), args.Error(1)
}

// CreateBranchForTask mocks base method
func (m *MockWorktreeUsecase) CreateBranchForTask(ctx context.Context, taskID uuid.UUID, branchName string) error {
	args := m.Called(ctx, taskID, branchName)
	return args.Error(0)
}

// SwitchToBranch mocks base method
func (m *MockWorktreeUsecase) SwitchToBranch(ctx context.Context, worktreeID uuid.UUID, branchName string) error {
	args := m.Called(ctx, worktreeID, branchName)
	return args.Error(0)
}

// GetBranchInfo mocks base method
func (m *MockWorktreeUsecase) GetBranchInfo(ctx context.Context, worktreeID uuid.UUID) (*usecase.BranchInfo, error) {
	args := m.Called(ctx, worktreeID)
	return args.Get(0).(*usecase.BranchInfo), args.Error(1)
}

// InitializeWorktree mocks base method
func (m *MockWorktreeUsecase) InitializeWorktree(ctx context.Context, worktreeID uuid.UUID) error {
	args := m.Called(ctx, worktreeID)
	return args.Error(0)
}

// CopyConfigurationFiles mocks base method
func (m *MockWorktreeUsecase) CopyConfigurationFiles(ctx context.Context, worktreeID uuid.UUID, sourcePath string) error {
	args := m.Called(ctx, worktreeID, sourcePath)
	return args.Error(0)
}

// HandleWorktreeCreationFailure mocks base method
func (m *MockWorktreeUsecase) HandleWorktreeCreationFailure(ctx context.Context, taskID uuid.UUID, error error) error {
	args := m.Called(ctx, taskID, error)
	return args.Error(0)
}

// RecoverFailedWorktree mocks base method
func (m *MockWorktreeUsecase) RecoverFailedWorktree(ctx context.Context, worktreeID uuid.UUID) error {
	args := m.Called(ctx, worktreeID)
	return args.Error(0)
}

// GetWorktreeStatistics mocks base method
func (m *MockWorktreeUsecase) GetWorktreeStatistics(ctx context.Context, projectID uuid.UUID) (*entity.WorktreeStatistics, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).(*entity.WorktreeStatistics), args.Error(1)
}

// GetActiveWorktreesCount mocks base method
func (m *MockWorktreeUsecase) GetActiveWorktreesCount(ctx context.Context, projectID uuid.UUID) (int, error) {
	args := m.Called(ctx, projectID)
	return args.Int(0), args.Error(1)
}

// NewMockWorktreeUsecase creates a new mock instance
func NewMockWorktreeUsecase(ctrl interface{}) *MockWorktreeUsecase {
	mock := &MockWorktreeUsecase{}
	return mock
}
