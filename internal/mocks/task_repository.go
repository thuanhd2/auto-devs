// Code generated by mockery; DO NOT EDIT.
package mocks

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockTaskRepository is an autogenerated mock type for the TaskRepository type
type MockTaskRepository struct {
	mock.Mock
}

func (m *MockTaskRepository) Create(ctx context.Context, task *entity.Task) error {
	args := m.Called(ctx, task)
	return args.Error(0)
}

func (m *MockTaskRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Task, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) Update(ctx context.Context, task *entity.Task) error {
	args := m.Called(ctx, task)
	return args.Error(0)
}

func (m *MockTaskRepository) Delete(ctx context.Context, id uuid.UUID) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *MockTaskRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.TaskStatus) error {
	args := m.Called(ctx, id, status)
	return args.Error(0)
}

func (m *MockTaskRepository) UpdateStatusWithHistory(ctx context.Context, id uuid.UUID, status entity.TaskStatus, changedBy *string, reason *string) error {
	args := m.Called(ctx, id, status, changedBy, reason)
	return args.Error(0)
}

func (m *MockTaskRepository) GetByStatus(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error) {
	args := m.Called(ctx, status)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetByStatuses(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error) {
	args := m.Called(ctx, statuses)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) BulkUpdateStatus(ctx context.Context, ids []uuid.UUID, status entity.TaskStatus, changedBy *string) error {
	args := m.Called(ctx, ids, status, changedBy)
	return args.Error(0)
}

func (m *MockTaskRepository) GetStatusHistory(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).([]*entity.TaskStatusHistory), args.Error(1)
}

func (m *MockTaskRepository) GetStatusAnalytics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).(*entity.TaskStatusAnalytics), args.Error(1)
}

func (m *MockTaskRepository) GetTasksWithFilters(ctx context.Context, filters entity.TaskFilters) ([]*entity.Task, error) {
	args := m.Called(ctx, filters)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) SearchTasks(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error) {
	args := m.Called(ctx, query, projectID)
	return args.Get(0).([]*entity.TaskSearchResult), args.Error(1)
}

func (m *MockTaskRepository) GetTasksByPriority(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error) {
	args := m.Called(ctx, priority)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetTasksByTags(ctx context.Context, tags []string) ([]*entity.Task, error) {
	args := m.Called(ctx, tags)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetArchivedTasks(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetTasksWithSubtasks(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetSubtasks(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error) {
	args := m.Called(ctx, parentTaskID)
	return args.Get(0).([]*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetParentTask(ctx context.Context, taskID uuid.UUID) (*entity.Task, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).(*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) UpdateParentTask(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error {
	args := m.Called(ctx, taskID, parentTaskID)
	return args.Error(0)
}

func (m *MockTaskRepository) BulkDelete(ctx context.Context, taskIDs []uuid.UUID) error {
	args := m.Called(ctx, taskIDs)
	return args.Error(0)
}

func (m *MockTaskRepository) BulkArchive(ctx context.Context, taskIDs []uuid.UUID) error {
	args := m.Called(ctx, taskIDs)
	return args.Error(0)
}

func (m *MockTaskRepository) BulkUnarchive(ctx context.Context, taskIDs []uuid.UUID) error {
	args := m.Called(ctx, taskIDs)
	return args.Error(0)
}

func (m *MockTaskRepository) BulkUpdatePriority(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error {
	args := m.Called(ctx, taskIDs, priority)
	return args.Error(0)
}

func (m *MockTaskRepository) BulkAssign(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error {
	args := m.Called(ctx, taskIDs, assignedTo)
	return args.Error(0)
}

func (m *MockTaskRepository) CreateTemplate(ctx context.Context, template *entity.TaskTemplate) error {
	args := m.Called(ctx, template)
	return args.Error(0)
}

func (m *MockTaskRepository) GetTemplates(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error) {
	args := m.Called(ctx, projectID, includeGlobal)
	return args.Get(0).([]*entity.TaskTemplate), args.Error(1)
}

func (m *MockTaskRepository) GetTemplateByID(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*entity.TaskTemplate), args.Error(1)
}

func (m *MockTaskRepository) UpdateTemplate(ctx context.Context, template *entity.TaskTemplate) error {
	args := m.Called(ctx, template)
	return args.Error(0)
}

func (m *MockTaskRepository) DeleteTemplate(ctx context.Context, id uuid.UUID) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *MockTaskRepository) CreateTaskFromTemplate(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error) {
	args := m.Called(ctx, templateID, projectID, createdBy)
	return args.Get(0).(*entity.Task), args.Error(1)
}

func (m *MockTaskRepository) GetAuditLogs(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error) {
	args := m.Called(ctx, taskID, limit)
	return args.Get(0).([]*entity.TaskAuditLog), args.Error(1)
}

func (m *MockTaskRepository) CreateAuditLog(ctx context.Context, auditLog *entity.TaskAuditLog) error {
	args := m.Called(ctx, auditLog)
	return args.Error(0)
}

func (m *MockTaskRepository) GetTaskStatistics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error) {
	args := m.Called(ctx, projectID)
	return args.Get(0).(*entity.TaskStatistics), args.Error(1)
}

func (m *MockTaskRepository) AddDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error {
	args := m.Called(ctx, taskID, dependsOnTaskID, dependencyType)
	return args.Error(0)
}

func (m *MockTaskRepository) RemoveDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error {
	args := m.Called(ctx, taskID, dependsOnTaskID)
	return args.Error(0)
}

func (m *MockTaskRepository) GetDependencies(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).([]*entity.TaskDependency), args.Error(1)
}

func (m *MockTaskRepository) GetDependents(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).([]*entity.TaskDependency), args.Error(1)
}

func (m *MockTaskRepository) AddComment(ctx context.Context, comment *entity.TaskComment) error {
	args := m.Called(ctx, comment)
	return args.Error(0)
}

func (m *MockTaskRepository) GetComments(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).([]*entity.TaskComment), args.Error(1)
}

func (m *MockTaskRepository) UpdateComment(ctx context.Context, comment *entity.TaskComment) error {
	args := m.Called(ctx, comment)
	return args.Error(0)
}

func (m *MockTaskRepository) DeleteComment(ctx context.Context, commentID uuid.UUID) error {
	args := m.Called(ctx, commentID)
	return args.Error(0)
}

func (m *MockTaskRepository) AddAttachment(ctx context.Context, attachment *entity.TaskAttachment) error {
	args := m.Called(ctx, attachment)
	return args.Error(0)
}

func (m *MockTaskRepository) GetAttachments(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskAttachment, error) {
	args := m.Called(ctx, taskID)
	return args.Get(0).([]*entity.TaskAttachment), args.Error(1)
}

func (m *MockTaskRepository) DeleteAttachment(ctx context.Context, attachmentID uuid.UUID) error {
	args := m.Called(ctx, attachmentID)
	return args.Error(0)
}

func (m *MockTaskRepository) ExportTasks(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error) {
	args := m.Called(ctx, filters, format)
	return args.Get(0).([]byte), args.Error(1)
}

func (m *MockTaskRepository) CheckDuplicateTitle(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error) {
	args := m.Called(ctx, projectID, title, excludeID)
	return args.Bool(0), args.Error(1)
}

func (m *MockTaskRepository) ValidateTaskExists(ctx context.Context, taskID uuid.UUID) (bool, error) {
	args := m.Called(ctx, taskID)
	return args.Bool(0), args.Error(1)
}

func (m *MockTaskRepository) ValidateProjectExists(ctx context.Context, projectID uuid.UUID) (bool, error) {
	args := m.Called(ctx, projectID)
	return args.Bool(0), args.Error(1)
}