// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/auto-devs/auto-devs/internal/repository"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectRepository creates a new instance of MockProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectRepository {
	mock := &MockProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectRepository is an autogenerated mock type for the ProjectRepository type
type MockProjectRepository struct {
	mock.Mock
}

type MockProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectRepository) EXPECT() *MockProjectRepository_Expecter {
	return &MockProjectRepository_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Archive(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockProjectRepository_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectRepository_Expecter) Archive(ctx interface{}, id interface{}) *MockProjectRepository_Archive_Call {
	return &MockProjectRepository_Archive_Call{Call: _e.mock.On("Archive", ctx, id)}
}

func (_c *MockProjectRepository_Archive_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectRepository_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_Archive_Call) Return(err error) *MockProjectRepository_Archive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_Archive_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectRepository_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// CheckNameExists provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) CheckNameExists(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, name, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckNameExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, name, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, name, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, name, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_CheckNameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNameExists'
type MockProjectRepository_CheckNameExists_Call struct {
	*mock.Call
}

// CheckNameExists is a helper method to define mock.On call
//   - ctx
//   - name
//   - excludeID
func (_e *MockProjectRepository_Expecter) CheckNameExists(ctx interface{}, name interface{}, excludeID interface{}) *MockProjectRepository_CheckNameExists_Call {
	return &MockProjectRepository_CheckNameExists_Call{Call: _e.mock.On("CheckNameExists", ctx, name, excludeID)}
}

func (_c *MockProjectRepository_CheckNameExists_Call) Run(run func(ctx context.Context, name string, excludeID *uuid.UUID)) *MockProjectRepository_CheckNameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_CheckNameExists_Call) Return(b bool, err error) *MockProjectRepository_CheckNameExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProjectRepository_CheckNameExists_Call) RunAndReturn(run func(ctx context.Context, name string, excludeID *uuid.UUID) (bool, error)) *MockProjectRepository_CheckNameExists_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Create(ctx context.Context, project *entity.Project) error {
	ret := _mock.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Project) error); ok {
		r0 = returnFunc(ctx, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - project
func (_e *MockProjectRepository_Expecter) Create(ctx interface{}, project interface{}) *MockProjectRepository_Create_Call {
	return &MockProjectRepository_Create_Call{Call: _e.mock.On("Create", ctx, project)}
}

func (_c *MockProjectRepository_Create_Call) Run(run func(ctx context.Context, project *entity.Project)) *MockProjectRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Project))
	})
	return _c
}

func (_c *MockProjectRepository_Create_Call) Return(err error) *MockProjectRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_Create_Call) RunAndReturn(run func(ctx context.Context, project *entity.Project) error) *MockProjectRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSettings provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) CreateSettings(ctx context.Context, settings *entity.ProjectSettings) error {
	ret := _mock.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for CreateSettings")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.ProjectSettings) error); ok {
		r0 = returnFunc(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_CreateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSettings'
type MockProjectRepository_CreateSettings_Call struct {
	*mock.Call
}

// CreateSettings is a helper method to define mock.On call
//   - ctx
//   - settings
func (_e *MockProjectRepository_Expecter) CreateSettings(ctx interface{}, settings interface{}) *MockProjectRepository_CreateSettings_Call {
	return &MockProjectRepository_CreateSettings_Call{Call: _e.mock.On("CreateSettings", ctx, settings)}
}

func (_c *MockProjectRepository_CreateSettings_Call) Run(run func(ctx context.Context, settings *entity.ProjectSettings)) *MockProjectRepository_CreateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ProjectSettings))
	})
	return _c
}

func (_c *MockProjectRepository_CreateSettings_Call) Return(err error) *MockProjectRepository_CreateSettings_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_CreateSettings_Call) RunAndReturn(run func(ctx context.Context, settings *entity.ProjectSettings) error) *MockProjectRepository_CreateSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockProjectRepository_Delete_Call {
	return &MockProjectRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProjectRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_Delete_Call) Return(err error) *MockProjectRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetAll(ctx context.Context) ([]*entity.Project, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entity.Project, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entity.Project); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockProjectRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
func (_e *MockProjectRepository_Expecter) GetAll(ctx interface{}) *MockProjectRepository_GetAll_Call {
	return &MockProjectRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockProjectRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockProjectRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectRepository_GetAll_Call) Return(projects []*entity.Project, err error) *MockProjectRepository_GetAll_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockProjectRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]*entity.Project, error)) *MockProjectRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWithParams provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetAllWithParams(ctx context.Context, params repository.GetProjectsParams) ([]*entity.Project, int, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithParams")
	}

	var r0 []*entity.Project
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.GetProjectsParams) ([]*entity.Project, int, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository.GetProjectsParams) []*entity.Project); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository.GetProjectsParams) int); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, repository.GetProjectsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectRepository_GetAllWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWithParams'
type MockProjectRepository_GetAllWithParams_Call struct {
	*mock.Call
}

// GetAllWithParams is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockProjectRepository_Expecter) GetAllWithParams(ctx interface{}, params interface{}) *MockProjectRepository_GetAllWithParams_Call {
	return &MockProjectRepository_GetAllWithParams_Call{Call: _e.mock.On("GetAllWithParams", ctx, params)}
}

func (_c *MockProjectRepository_GetAllWithParams_Call) Run(run func(ctx context.Context, params repository.GetProjectsParams)) *MockProjectRepository_GetAllWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.GetProjectsParams))
	})
	return _c
}

func (_c *MockProjectRepository_GetAllWithParams_Call) Return(projects []*entity.Project, n int, err error) *MockProjectRepository_GetAllWithParams_Call {
	_c.Call.Return(projects, n, err)
	return _c
}

func (_c *MockProjectRepository_GetAllWithParams_Call) RunAndReturn(run func(ctx context.Context, params repository.GetProjectsParams) ([]*entity.Project, int, error)) *MockProjectRepository_GetAllWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Project, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Project, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Project); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProjectRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockProjectRepository_GetByID_Call {
	return &MockProjectRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProjectRepository_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_GetByID_Call) Return(project *entity.Project, err error) *MockProjectRepository_GetByID_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockProjectRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Project, error)) *MockProjectRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastActivityAt provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetLastActivityAt(ctx context.Context, projectID uuid.UUID) (*time.Time, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastActivityAt")
	}

	var r0 *time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*time.Time, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *time.Time); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_GetLastActivityAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastActivityAt'
type MockProjectRepository_GetLastActivityAt_Call struct {
	*mock.Call
}

// GetLastActivityAt is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockProjectRepository_Expecter) GetLastActivityAt(ctx interface{}, projectID interface{}) *MockProjectRepository_GetLastActivityAt_Call {
	return &MockProjectRepository_GetLastActivityAt_Call{Call: _e.mock.On("GetLastActivityAt", ctx, projectID)}
}

func (_c *MockProjectRepository_GetLastActivityAt_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockProjectRepository_GetLastActivityAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_GetLastActivityAt_Call) Return(time1 *time.Time, err error) *MockProjectRepository_GetLastActivityAt_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *MockProjectRepository_GetLastActivityAt_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*time.Time, error)) *MockProjectRepository_GetLastActivityAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetSettings provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetSettings(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *entity.ProjectSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.ProjectSettings, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.ProjectSettings); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProjectSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_GetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSettings'
type MockProjectRepository_GetSettings_Call struct {
	*mock.Call
}

// GetSettings is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockProjectRepository_Expecter) GetSettings(ctx interface{}, projectID interface{}) *MockProjectRepository_GetSettings_Call {
	return &MockProjectRepository_GetSettings_Call{Call: _e.mock.On("GetSettings", ctx, projectID)}
}

func (_c *MockProjectRepository_GetSettings_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockProjectRepository_GetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_GetSettings_Call) Return(projectSettings *entity.ProjectSettings, err error) *MockProjectRepository_GetSettings_Call {
	_c.Call.Return(projectSettings, err)
	return _c
}

func (_c *MockProjectRepository_GetSettings_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.ProjectSettings, error)) *MockProjectRepository_GetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatistics provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetTaskStatistics(ctx context.Context, projectID uuid.UUID) (map[entity.TaskStatus]int, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatistics")
	}

	var r0 map[entity.TaskStatus]int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (map[entity.TaskStatus]int, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) map[entity.TaskStatus]int); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[entity.TaskStatus]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_GetTaskStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatistics'
type MockProjectRepository_GetTaskStatistics_Call struct {
	*mock.Call
}

// GetTaskStatistics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *MockProjectRepository_Expecter) GetTaskStatistics(ctx interface{}, projectID interface{}) *MockProjectRepository_GetTaskStatistics_Call {
	return &MockProjectRepository_GetTaskStatistics_Call{Call: _e.mock.On("GetTaskStatistics", ctx, projectID)}
}

func (_c *MockProjectRepository_GetTaskStatistics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *MockProjectRepository_GetTaskStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_GetTaskStatistics_Call) Return(taskStatusToInt map[entity.TaskStatus]int, err error) *MockProjectRepository_GetTaskStatistics_Call {
	_c.Call.Return(taskStatusToInt, err)
	return _c
}

func (_c *MockProjectRepository_GetTaskStatistics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (map[entity.TaskStatus]int, error)) *MockProjectRepository_GetTaskStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithTaskCount provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) GetWithTaskCount(ctx context.Context, id uuid.UUID) (*repository.ProjectWithTaskCount, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithTaskCount")
	}

	var r0 *repository.ProjectWithTaskCount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*repository.ProjectWithTaskCount, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.ProjectWithTaskCount); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.ProjectWithTaskCount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectRepository_GetWithTaskCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithTaskCount'
type MockProjectRepository_GetWithTaskCount_Call struct {
	*mock.Call
}

// GetWithTaskCount is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectRepository_Expecter) GetWithTaskCount(ctx interface{}, id interface{}) *MockProjectRepository_GetWithTaskCount_Call {
	return &MockProjectRepository_GetWithTaskCount_Call{Call: _e.mock.On("GetWithTaskCount", ctx, id)}
}

func (_c *MockProjectRepository_GetWithTaskCount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectRepository_GetWithTaskCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_GetWithTaskCount_Call) Return(projectWithTaskCount *repository.ProjectWithTaskCount, err error) *MockProjectRepository_GetWithTaskCount_Call {
	_c.Call.Return(projectWithTaskCount, err)
	return _c
}

func (_c *MockProjectRepository_GetWithTaskCount_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*repository.ProjectWithTaskCount, error)) *MockProjectRepository_GetWithTaskCount_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Restore(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockProjectRepository_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProjectRepository_Expecter) Restore(ctx interface{}, id interface{}) *MockProjectRepository_Restore_Call {
	return &MockProjectRepository_Restore_Call{Call: _e.mock.On("Restore", ctx, id)}
}

func (_c *MockProjectRepository_Restore_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProjectRepository_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProjectRepository_Restore_Call) Return(err error) *MockProjectRepository_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_Restore_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockProjectRepository_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) Update(ctx context.Context, project *entity.Project) error {
	ret := _mock.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Project) error); ok {
		r0 = returnFunc(ctx, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - project
func (_e *MockProjectRepository_Expecter) Update(ctx interface{}, project interface{}) *MockProjectRepository_Update_Call {
	return &MockProjectRepository_Update_Call{Call: _e.mock.On("Update", ctx, project)}
}

func (_c *MockProjectRepository_Update_Call) Run(run func(ctx context.Context, project *entity.Project)) *MockProjectRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Project))
	})
	return _c
}

func (_c *MockProjectRepository_Update_Call) Return(err error) *MockProjectRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_Update_Call) RunAndReturn(run func(ctx context.Context, project *entity.Project) error) *MockProjectRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSettings provides a mock function for the type MockProjectRepository
func (_mock *MockProjectRepository) UpdateSettings(ctx context.Context, settings *entity.ProjectSettings) error {
	ret := _mock.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.ProjectSettings) error); ok {
		r0 = returnFunc(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectRepository_UpdateSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSettings'
type MockProjectRepository_UpdateSettings_Call struct {
	*mock.Call
}

// UpdateSettings is a helper method to define mock.On call
//   - ctx
//   - settings
func (_e *MockProjectRepository_Expecter) UpdateSettings(ctx interface{}, settings interface{}) *MockProjectRepository_UpdateSettings_Call {
	return &MockProjectRepository_UpdateSettings_Call{Call: _e.mock.On("UpdateSettings", ctx, settings)}
}

func (_c *MockProjectRepository_UpdateSettings_Call) Run(run func(ctx context.Context, settings *entity.ProjectSettings)) *MockProjectRepository_UpdateSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ProjectSettings))
	})
	return _c
}

func (_c *MockProjectRepository_UpdateSettings_Call) Return(err error) *MockProjectRepository_UpdateSettings_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectRepository_UpdateSettings_Call) RunAndReturn(run func(ctx context.Context, settings *entity.ProjectSettings) error) *MockProjectRepository_UpdateSettings_Call {
	_c.Call.Return(run)
	return _c
}
