// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewPullRequestRepositoryMock creates a new instance of PullRequestRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPullRequestRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PullRequestRepositoryMock {
	mock := &PullRequestRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PullRequestRepositoryMock is an autogenerated mock type for the PullRequestRepository type
type PullRequestRepositoryMock struct {
	mock.Mock
}

type PullRequestRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PullRequestRepositoryMock) EXPECT() *PullRequestRepositoryMock_Expecter {
	return &PullRequestRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) Create(ctx context.Context, pr *entity.PullRequest) error {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.PullRequest) error); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PullRequestRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PullRequestRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - pr
func (_e *PullRequestRepositoryMock_Expecter) Create(ctx interface{}, pr interface{}) *PullRequestRepositoryMock_Create_Call {
	return &PullRequestRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, pr)}
}

func (_c *PullRequestRepositoryMock_Create_Call) Run(run func(ctx context.Context, pr *entity.PullRequest)) *PullRequestRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.PullRequest))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_Create_Call) Return(err error) *PullRequestRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PullRequestRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, pr *entity.PullRequest) error) *PullRequestRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PullRequestRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PullRequestRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *PullRequestRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *PullRequestRepositoryMock_Delete_Call {
	return &PullRequestRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PullRequestRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PullRequestRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_Delete_Call) Return(err error) *PullRequestRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PullRequestRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *PullRequestRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveMonitoringPRs provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetActiveMonitoringPRs(ctx context.Context) ([]*entity.PullRequest, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMonitoringPRs")
	}

	var r0 []*entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entity.PullRequest, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entity.PullRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetActiveMonitoringPRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMonitoringPRs'
type PullRequestRepositoryMock_GetActiveMonitoringPRs_Call struct {
	*mock.Call
}

// GetActiveMonitoringPRs is a helper method to define mock.On call
//   - ctx
func (_e *PullRequestRepositoryMock_Expecter) GetActiveMonitoringPRs(ctx interface{}) *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call {
	return &PullRequestRepositoryMock_GetActiveMonitoringPRs_Call{Call: _e.mock.On("GetActiveMonitoringPRs", ctx)}
}

func (_c *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call) Run(run func(ctx context.Context)) *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call) Return(pullRequests []*entity.PullRequest, err error) *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call {
	_c.Call.Return(pullRequests, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call) RunAndReturn(run func(ctx context.Context) ([]*entity.PullRequest, error)) *PullRequestRepositoryMock_GetActiveMonitoringPRs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByGitHubPRNumber provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetByGitHubPRNumber(ctx context.Context, repo string, prNumber int) (*entity.PullRequest, error) {
	ret := _mock.Called(ctx, repo, prNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByGitHubPRNumber")
	}

	var r0 *entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) (*entity.PullRequest, error)); ok {
		return returnFunc(ctx, repo, prNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) *entity.PullRequest); ok {
		r0 = returnFunc(ctx, repo, prNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = returnFunc(ctx, repo, prNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetByGitHubPRNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByGitHubPRNumber'
type PullRequestRepositoryMock_GetByGitHubPRNumber_Call struct {
	*mock.Call
}

// GetByGitHubPRNumber is a helper method to define mock.On call
//   - ctx
//   - repo
//   - prNumber
func (_e *PullRequestRepositoryMock_Expecter) GetByGitHubPRNumber(ctx interface{}, repo interface{}, prNumber interface{}) *PullRequestRepositoryMock_GetByGitHubPRNumber_Call {
	return &PullRequestRepositoryMock_GetByGitHubPRNumber_Call{Call: _e.mock.On("GetByGitHubPRNumber", ctx, repo, prNumber)}
}

func (_c *PullRequestRepositoryMock_GetByGitHubPRNumber_Call) Run(run func(ctx context.Context, repo string, prNumber int)) *PullRequestRepositoryMock_GetByGitHubPRNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetByGitHubPRNumber_Call) Return(pullRequest *entity.PullRequest, err error) *PullRequestRepositoryMock_GetByGitHubPRNumber_Call {
	_c.Call.Return(pullRequest, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetByGitHubPRNumber_Call) RunAndReturn(run func(ctx context.Context, repo string, prNumber int) (*entity.PullRequest, error)) *PullRequestRepositoryMock_GetByGitHubPRNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.PullRequest, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.PullRequest, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.PullRequest); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type PullRequestRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *PullRequestRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *PullRequestRepositoryMock_GetByID_Call {
	return &PullRequestRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *PullRequestRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PullRequestRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetByID_Call) Return(pullRequest *entity.PullRequest, err error) *PullRequestRepositoryMock_GetByID_Call {
	_c.Call.Return(pullRequest, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.PullRequest, error)) *PullRequestRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRepository provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetByRepository(ctx context.Context, repo string) ([]*entity.PullRequest, error) {
	ret := _mock.Called(ctx, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetByRepository")
	}

	var r0 []*entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*entity.PullRequest, error)); ok {
		return returnFunc(ctx, repo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*entity.PullRequest); ok {
		r0 = returnFunc(ctx, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, repo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetByRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRepository'
type PullRequestRepositoryMock_GetByRepository_Call struct {
	*mock.Call
}

// GetByRepository is a helper method to define mock.On call
//   - ctx
//   - repo
func (_e *PullRequestRepositoryMock_Expecter) GetByRepository(ctx interface{}, repo interface{}) *PullRequestRepositoryMock_GetByRepository_Call {
	return &PullRequestRepositoryMock_GetByRepository_Call{Call: _e.mock.On("GetByRepository", ctx, repo)}
}

func (_c *PullRequestRepositoryMock_GetByRepository_Call) Run(run func(ctx context.Context, repo string)) *PullRequestRepositoryMock_GetByRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetByRepository_Call) Return(pullRequests []*entity.PullRequest, err error) *PullRequestRepositoryMock_GetByRepository_Call {
	_c.Call.Return(pullRequests, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetByRepository_Call) RunAndReturn(run func(ctx context.Context, repo string) ([]*entity.PullRequest, error)) *PullRequestRepositoryMock_GetByRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetByStatus(ctx context.Context, status entity.PullRequestStatus) ([]*entity.PullRequest, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.PullRequestStatus) ([]*entity.PullRequest, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.PullRequestStatus) []*entity.PullRequest); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.PullRequestStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type PullRequestRepositoryMock_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *PullRequestRepositoryMock_Expecter) GetByStatus(ctx interface{}, status interface{}) *PullRequestRepositoryMock_GetByStatus_Call {
	return &PullRequestRepositoryMock_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, status)}
}

func (_c *PullRequestRepositoryMock_GetByStatus_Call) Run(run func(ctx context.Context, status entity.PullRequestStatus)) *PullRequestRepositoryMock_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PullRequestStatus))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetByStatus_Call) Return(pullRequests []*entity.PullRequest, err error) *PullRequestRepositoryMock_GetByStatus_Call {
	_c.Call.Return(pullRequests, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.PullRequestStatus) ([]*entity.PullRequest, error)) *PullRequestRepositoryMock_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTaskID provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetByTaskID(ctx context.Context, taskID uuid.UUID) (*entity.PullRequest, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 *entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.PullRequest, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.PullRequest); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTaskID'
type PullRequestRepositoryMock_GetByTaskID_Call struct {
	*mock.Call
}

// GetByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *PullRequestRepositoryMock_Expecter) GetByTaskID(ctx interface{}, taskID interface{}) *PullRequestRepositoryMock_GetByTaskID_Call {
	return &PullRequestRepositoryMock_GetByTaskID_Call{Call: _e.mock.On("GetByTaskID", ctx, taskID)}
}

func (_c *PullRequestRepositoryMock_GetByTaskID_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *PullRequestRepositoryMock_GetByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetByTaskID_Call) Return(pullRequest *entity.PullRequest, err error) *PullRequestRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(pullRequest, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.PullRequest, error)) *PullRequestRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenPRs provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) GetOpenPRs(ctx context.Context) ([]*entity.PullRequest, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenPRs")
	}

	var r0 []*entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entity.PullRequest, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entity.PullRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_GetOpenPRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenPRs'
type PullRequestRepositoryMock_GetOpenPRs_Call struct {
	*mock.Call
}

// GetOpenPRs is a helper method to define mock.On call
//   - ctx
func (_e *PullRequestRepositoryMock_Expecter) GetOpenPRs(ctx interface{}) *PullRequestRepositoryMock_GetOpenPRs_Call {
	return &PullRequestRepositoryMock_GetOpenPRs_Call{Call: _e.mock.On("GetOpenPRs", ctx)}
}

func (_c *PullRequestRepositoryMock_GetOpenPRs_Call) Run(run func(ctx context.Context)) *PullRequestRepositoryMock_GetOpenPRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_GetOpenPRs_Call) Return(pullRequests []*entity.PullRequest, err error) *PullRequestRepositoryMock_GetOpenPRs_Call {
	_c.Call.Return(pullRequests, err)
	return _c
}

func (_c *PullRequestRepositoryMock_GetOpenPRs_Call) RunAndReturn(run func(ctx context.Context) ([]*entity.PullRequest, error)) *PullRequestRepositoryMock_GetOpenPRs_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) List(ctx context.Context, offset int, limit int) ([]*entity.PullRequest, error) {
	ret := _mock.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*entity.PullRequest, error)); ok {
		return returnFunc(ctx, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*entity.PullRequest); ok {
		r0 = returnFunc(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PullRequestRepositoryMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - offset
//   - limit
func (_e *PullRequestRepositoryMock_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *PullRequestRepositoryMock_List_Call {
	return &PullRequestRepositoryMock_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *PullRequestRepositoryMock_List_Call) Run(run func(ctx context.Context, offset int, limit int)) *PullRequestRepositoryMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_List_Call) Return(pullRequests []*entity.PullRequest, err error) *PullRequestRepositoryMock_List_Call {
	_c.Call.Return(pullRequests, err)
	return _c
}

func (_c *PullRequestRepositoryMock_List_Call) RunAndReturn(run func(ctx context.Context, offset int, limit int) ([]*entity.PullRequest, error)) *PullRequestRepositoryMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) ListByProjectID(ctx context.Context, projectID uuid.UUID, offset int, limit int) ([]*entity.PullRequest, error) {
	ret := _mock.Called(ctx, projectID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []*entity.PullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*entity.PullRequest, error)); ok {
		return returnFunc(ctx, projectID, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*entity.PullRequest); ok {
		r0 = returnFunc(ctx, projectID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = returnFunc(ctx, projectID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PullRequestRepositoryMock_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type PullRequestRepositoryMock_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - offset
//   - limit
func (_e *PullRequestRepositoryMock_Expecter) ListByProjectID(ctx interface{}, projectID interface{}, offset interface{}, limit interface{}) *PullRequestRepositoryMock_ListByProjectID_Call {
	return &PullRequestRepositoryMock_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID, offset, limit)}
}

func (_c *PullRequestRepositoryMock_ListByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID, offset int, limit int)) *PullRequestRepositoryMock_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_ListByProjectID_Call) Return(pullRequests []*entity.PullRequest, err error) *PullRequestRepositoryMock_ListByProjectID_Call {
	_c.Call.Return(pullRequests, err)
	return _c
}

func (_c *PullRequestRepositoryMock_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, offset int, limit int) ([]*entity.PullRequest, error)) *PullRequestRepositoryMock_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type PullRequestRepositoryMock
func (_mock *PullRequestRepositoryMock) Update(ctx context.Context, pr *entity.PullRequest) error {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.PullRequest) error); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PullRequestRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PullRequestRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - pr
func (_e *PullRequestRepositoryMock_Expecter) Update(ctx interface{}, pr interface{}) *PullRequestRepositoryMock_Update_Call {
	return &PullRequestRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, pr)}
}

func (_c *PullRequestRepositoryMock_Update_Call) Run(run func(ctx context.Context, pr *entity.PullRequest)) *PullRequestRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.PullRequest))
	})
	return _c
}

func (_c *PullRequestRepositoryMock_Update_Call) Return(err error) *PullRequestRepositoryMock_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PullRequestRepositoryMock_Update_Call) RunAndReturn(run func(ctx context.Context, pr *entity.PullRequest) error) *PullRequestRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}
