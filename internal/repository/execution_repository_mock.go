// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"
	"time"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewExecutionRepositoryMock creates a new instance of ExecutionRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionRepositoryMock {
	mock := &ExecutionRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExecutionRepositoryMock is an autogenerated mock type for the ExecutionRepository type
type ExecutionRepositoryMock struct {
	mock.Mock
}

type ExecutionRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionRepositoryMock) EXPECT() *ExecutionRepositoryMock_Expecter {
	return &ExecutionRepositoryMock_Expecter{mock: &_m.Mock}
}

// BulkDelete provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) BulkDelete(ctx context.Context, ids []uuid.UUID) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type ExecutionRepositoryMock_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *ExecutionRepositoryMock_Expecter) BulkDelete(ctx interface{}, ids interface{}) *ExecutionRepositoryMock_BulkDelete_Call {
	return &ExecutionRepositoryMock_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, ids)}
}

func (_c *ExecutionRepositoryMock_BulkDelete_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *ExecutionRepositoryMock_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_BulkDelete_Call) Return(err error) *ExecutionRepositoryMock_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, ids []uuid.UUID) error) *ExecutionRepositoryMock_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdateStatus provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) BulkUpdateStatus(ctx context.Context, ids []uuid.UUID, status entity.ExecutionStatus) error {
	ret := _mock.Called(ctx, ids, status)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.ExecutionStatus) error); ok {
		r0 = returnFunc(ctx, ids, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_BulkUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateStatus'
type ExecutionRepositoryMock_BulkUpdateStatus_Call struct {
	*mock.Call
}

// BulkUpdateStatus is a helper method to define mock.On call
//   - ctx
//   - ids
//   - status
func (_e *ExecutionRepositoryMock_Expecter) BulkUpdateStatus(ctx interface{}, ids interface{}, status interface{}) *ExecutionRepositoryMock_BulkUpdateStatus_Call {
	return &ExecutionRepositoryMock_BulkUpdateStatus_Call{Call: _e.mock.On("BulkUpdateStatus", ctx, ids, status)}
}

func (_c *ExecutionRepositoryMock_BulkUpdateStatus_Call) Run(run func(ctx context.Context, ids []uuid.UUID, status entity.ExecutionStatus)) *ExecutionRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.ExecutionStatus))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_BulkUpdateStatus_Call) Return(err error) *ExecutionRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_BulkUpdateStatus_Call) RunAndReturn(run func(ctx context.Context, ids []uuid.UUID, status entity.ExecutionStatus) error) *ExecutionRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupOldExecutions provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) CleanupOldExecutions(ctx context.Context, olderThan time.Time) (int64, error) {
	ret := _mock.Called(ctx, olderThan)

	if len(ret) == 0 {
		panic("no return value specified for CleanupOldExecutions")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) (int64, error)); ok {
		return returnFunc(ctx, olderThan)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) int64); ok {
		r0 = returnFunc(ctx, olderThan)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, olderThan)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_CleanupOldExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupOldExecutions'
type ExecutionRepositoryMock_CleanupOldExecutions_Call struct {
	*mock.Call
}

// CleanupOldExecutions is a helper method to define mock.On call
//   - ctx
//   - olderThan
func (_e *ExecutionRepositoryMock_Expecter) CleanupOldExecutions(ctx interface{}, olderThan interface{}) *ExecutionRepositoryMock_CleanupOldExecutions_Call {
	return &ExecutionRepositoryMock_CleanupOldExecutions_Call{Call: _e.mock.On("CleanupOldExecutions", ctx, olderThan)}
}

func (_c *ExecutionRepositoryMock_CleanupOldExecutions_Call) Run(run func(ctx context.Context, olderThan time.Time)) *ExecutionRepositoryMock_CleanupOldExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_CleanupOldExecutions_Call) Return(n int64, err error) *ExecutionRepositoryMock_CleanupOldExecutions_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ExecutionRepositoryMock_CleanupOldExecutions_Call) RunAndReturn(run func(ctx context.Context, olderThan time.Time) (int64, error)) *ExecutionRepositoryMock_CleanupOldExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) Create(ctx context.Context, execution *entity.Execution) error {
	ret := _mock.Called(ctx, execution)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Execution) error); ok {
		r0 = returnFunc(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ExecutionRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - execution
func (_e *ExecutionRepositoryMock_Expecter) Create(ctx interface{}, execution interface{}) *ExecutionRepositoryMock_Create_Call {
	return &ExecutionRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, execution)}
}

func (_c *ExecutionRepositoryMock_Create_Call) Run(run func(ctx context.Context, execution *entity.Execution)) *ExecutionRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Execution))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_Create_Call) Return(err error) *ExecutionRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, execution *entity.Execution) error) *ExecutionRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ExecutionRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *ExecutionRepositoryMock_Delete_Call {
	return &ExecutionRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ExecutionRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_Delete_Call) Return(err error) *ExecutionRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ExecutionRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActive provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetActive(ctx context.Context) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActive")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entity.Execution); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActive'
type ExecutionRepositoryMock_GetActive_Call struct {
	*mock.Call
}

// GetActive is a helper method to define mock.On call
//   - ctx
func (_e *ExecutionRepositoryMock_Expecter) GetActive(ctx interface{}) *ExecutionRepositoryMock_GetActive_Call {
	return &ExecutionRepositoryMock_GetActive_Call{Call: _e.mock.On("GetActive", ctx)}
}

func (_c *ExecutionRepositoryMock_GetActive_Call) Run(run func(ctx context.Context)) *ExecutionRepositoryMock_GetActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetActive_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetActive_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetActive_Call) RunAndReturn(run func(ctx context.Context) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetActive_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateRange provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetByDateRange(ctx context.Context, startDate time.Time, endDate time.Time) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateRange")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, startDate, endDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []*entity.Execution); ok {
		r0 = returnFunc(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateRange'
type ExecutionRepositoryMock_GetByDateRange_Call struct {
	*mock.Call
}

// GetByDateRange is a helper method to define mock.On call
//   - ctx
//   - startDate
//   - endDate
func (_e *ExecutionRepositoryMock_Expecter) GetByDateRange(ctx interface{}, startDate interface{}, endDate interface{}) *ExecutionRepositoryMock_GetByDateRange_Call {
	return &ExecutionRepositoryMock_GetByDateRange_Call{Call: _e.mock.On("GetByDateRange", ctx, startDate, endDate)}
}

func (_c *ExecutionRepositoryMock_GetByDateRange_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time)) *ExecutionRepositoryMock_GetByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetByDateRange_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetByDateRange_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetByDateRange_Call) RunAndReturn(run func(ctx context.Context, startDate time.Time, endDate time.Time) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Execution); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ExecutionRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *ExecutionRepositoryMock_GetByID_Call {
	return &ExecutionRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ExecutionRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetByID_Call) Return(execution *entity.Execution, err error) *ExecutionRepositoryMock_GetByID_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Execution, error)) *ExecutionRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetByStatus(ctx context.Context, status entity.ExecutionStatus) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.ExecutionStatus) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.ExecutionStatus) []*entity.Execution); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.ExecutionStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type ExecutionRepositoryMock_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *ExecutionRepositoryMock_Expecter) GetByStatus(ctx interface{}, status interface{}) *ExecutionRepositoryMock_GetByStatus_Call {
	return &ExecutionRepositoryMock_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, status)}
}

func (_c *ExecutionRepositoryMock_GetByStatus_Call) Run(run func(ctx context.Context, status entity.ExecutionStatus)) *ExecutionRepositoryMock_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ExecutionStatus))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetByStatus_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetByStatus_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.ExecutionStatus) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatuses provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetByStatuses(ctx context.Context, statuses []entity.ExecutionStatus) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatuses")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.ExecutionStatus) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, statuses)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.ExecutionStatus) []*entity.Execution); ok {
		r0 = returnFunc(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []entity.ExecutionStatus) error); ok {
		r1 = returnFunc(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetByStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatuses'
type ExecutionRepositoryMock_GetByStatuses_Call struct {
	*mock.Call
}

// GetByStatuses is a helper method to define mock.On call
//   - ctx
//   - statuses
func (_e *ExecutionRepositoryMock_Expecter) GetByStatuses(ctx interface{}, statuses interface{}) *ExecutionRepositoryMock_GetByStatuses_Call {
	return &ExecutionRepositoryMock_GetByStatuses_Call{Call: _e.mock.On("GetByStatuses", ctx, statuses)}
}

func (_c *ExecutionRepositoryMock_GetByStatuses_Call) Run(run func(ctx context.Context, statuses []entity.ExecutionStatus)) *ExecutionRepositoryMock_GetByStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.ExecutionStatus))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetByStatuses_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetByStatuses_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetByStatuses_Call) RunAndReturn(run func(ctx context.Context, statuses []entity.ExecutionStatus) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetByStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTaskID provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetByTaskID(ctx context.Context, taskID uuid.UUID) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Execution); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTaskID'
type ExecutionRepositoryMock_GetByTaskID_Call struct {
	*mock.Call
}

// GetByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *ExecutionRepositoryMock_Expecter) GetByTaskID(ctx interface{}, taskID interface{}) *ExecutionRepositoryMock_GetByTaskID_Call {
	return &ExecutionRepositoryMock_GetByTaskID_Call{Call: _e.mock.On("GetByTaskID", ctx, taskID)}
}

func (_c *ExecutionRepositoryMock_GetByTaskID_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *ExecutionRepositoryMock_GetByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetByTaskID_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompleted provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetCompleted(ctx context.Context, limit int) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCompleted")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []*entity.Execution); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompleted'
type ExecutionRepositoryMock_GetCompleted_Call struct {
	*mock.Call
}

// GetCompleted is a helper method to define mock.On call
//   - ctx
//   - limit
func (_e *ExecutionRepositoryMock_Expecter) GetCompleted(ctx interface{}, limit interface{}) *ExecutionRepositoryMock_GetCompleted_Call {
	return &ExecutionRepositoryMock_GetCompleted_Call{Call: _e.mock.On("GetCompleted", ctx, limit)}
}

func (_c *ExecutionRepositoryMock_GetCompleted_Call) Run(run func(ctx context.Context, limit int)) *ExecutionRepositoryMock_GetCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetCompleted_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetCompleted_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetCompleted_Call) RunAndReturn(run func(ctx context.Context, limit int) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionStats provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetExecutionStats(ctx context.Context, taskID *uuid.UUID) (*ExecutionStats, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionStats")
	}

	var r0 *ExecutionStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (*ExecutionStats, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *ExecutionStats); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ExecutionStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetExecutionStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionStats'
type ExecutionRepositoryMock_GetExecutionStats_Call struct {
	*mock.Call
}

// GetExecutionStats is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *ExecutionRepositoryMock_Expecter) GetExecutionStats(ctx interface{}, taskID interface{}) *ExecutionRepositoryMock_GetExecutionStats_Call {
	return &ExecutionRepositoryMock_GetExecutionStats_Call{Call: _e.mock.On("GetExecutionStats", ctx, taskID)}
}

func (_c *ExecutionRepositoryMock_GetExecutionStats_Call) Run(run func(ctx context.Context, taskID *uuid.UUID)) *ExecutionRepositoryMock_GetExecutionStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetExecutionStats_Call) Return(executionStats *ExecutionStats, err error) *ExecutionRepositoryMock_GetExecutionStats_Call {
	_c.Call.Return(executionStats, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetExecutionStats_Call) RunAndReturn(run func(ctx context.Context, taskID *uuid.UUID) (*ExecutionStats, error)) *ExecutionRepositoryMock_GetExecutionStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentExecutions provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetRecentExecutions(ctx context.Context, limit int) ([]*entity.Execution, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentExecutions")
	}

	var r0 []*entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]*entity.Execution, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []*entity.Execution); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetRecentExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentExecutions'
type ExecutionRepositoryMock_GetRecentExecutions_Call struct {
	*mock.Call
}

// GetRecentExecutions is a helper method to define mock.On call
//   - ctx
//   - limit
func (_e *ExecutionRepositoryMock_Expecter) GetRecentExecutions(ctx interface{}, limit interface{}) *ExecutionRepositoryMock_GetRecentExecutions_Call {
	return &ExecutionRepositoryMock_GetRecentExecutions_Call{Call: _e.mock.On("GetRecentExecutions", ctx, limit)}
}

func (_c *ExecutionRepositoryMock_GetRecentExecutions_Call) Run(run func(ctx context.Context, limit int)) *ExecutionRepositoryMock_GetRecentExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetRecentExecutions_Call) Return(executions []*entity.Execution, err error) *ExecutionRepositoryMock_GetRecentExecutions_Call {
	_c.Call.Return(executions, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetRecentExecutions_Call) RunAndReturn(run func(ctx context.Context, limit int) ([]*entity.Execution, error)) *ExecutionRepositoryMock_GetRecentExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithLogs provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetWithLogs(ctx context.Context, id uuid.UUID, logLimit int) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id, logLimit)

	if len(ret) == 0 {
		panic("no return value specified for GetWithLogs")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id, logLimit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) *entity.Execution); ok {
		r0 = returnFunc(ctx, id, logLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, id, logLimit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetWithLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithLogs'
type ExecutionRepositoryMock_GetWithLogs_Call struct {
	*mock.Call
}

// GetWithLogs is a helper method to define mock.On call
//   - ctx
//   - id
//   - logLimit
func (_e *ExecutionRepositoryMock_Expecter) GetWithLogs(ctx interface{}, id interface{}, logLimit interface{}) *ExecutionRepositoryMock_GetWithLogs_Call {
	return &ExecutionRepositoryMock_GetWithLogs_Call{Call: _e.mock.On("GetWithLogs", ctx, id, logLimit)}
}

func (_c *ExecutionRepositoryMock_GetWithLogs_Call) Run(run func(ctx context.Context, id uuid.UUID, logLimit int)) *ExecutionRepositoryMock_GetWithLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetWithLogs_Call) Return(execution *entity.Execution, err error) *ExecutionRepositoryMock_GetWithLogs_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetWithLogs_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, logLimit int) (*entity.Execution, error)) *ExecutionRepositoryMock_GetWithLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithProcesses provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) GetWithProcesses(ctx context.Context, id uuid.UUID) (*entity.Execution, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithProcesses")
	}

	var r0 *entity.Execution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Execution, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Execution); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Execution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_GetWithProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithProcesses'
type ExecutionRepositoryMock_GetWithProcesses_Call struct {
	*mock.Call
}

// GetWithProcesses is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionRepositoryMock_Expecter) GetWithProcesses(ctx interface{}, id interface{}) *ExecutionRepositoryMock_GetWithProcesses_Call {
	return &ExecutionRepositoryMock_GetWithProcesses_Call{Call: _e.mock.On("GetWithProcesses", ctx, id)}
}

func (_c *ExecutionRepositoryMock_GetWithProcesses_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionRepositoryMock_GetWithProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_GetWithProcesses_Call) Return(execution *entity.Execution, err error) *ExecutionRepositoryMock_GetWithProcesses_Call {
	_c.Call.Return(execution, err)
	return _c
}

func (_c *ExecutionRepositoryMock_GetWithProcesses_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Execution, error)) *ExecutionRepositoryMock_GetWithProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// MarkCompleted provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) MarkCompleted(ctx context.Context, id uuid.UUID, completedAt time.Time, result *entity.ExecutionResult) error {
	ret := _mock.Called(ctx, id, completedAt, result)

	if len(ret) == 0 {
		panic("no return value specified for MarkCompleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, *entity.ExecutionResult) error); ok {
		r0 = returnFunc(ctx, id, completedAt, result)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_MarkCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkCompleted'
type ExecutionRepositoryMock_MarkCompleted_Call struct {
	*mock.Call
}

// MarkCompleted is a helper method to define mock.On call
//   - ctx
//   - id
//   - completedAt
//   - result
func (_e *ExecutionRepositoryMock_Expecter) MarkCompleted(ctx interface{}, id interface{}, completedAt interface{}, result interface{}) *ExecutionRepositoryMock_MarkCompleted_Call {
	return &ExecutionRepositoryMock_MarkCompleted_Call{Call: _e.mock.On("MarkCompleted", ctx, id, completedAt, result)}
}

func (_c *ExecutionRepositoryMock_MarkCompleted_Call) Run(run func(ctx context.Context, id uuid.UUID, completedAt time.Time, result *entity.ExecutionResult)) *ExecutionRepositoryMock_MarkCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time), args[3].(*entity.ExecutionResult))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_MarkCompleted_Call) Return(err error) *ExecutionRepositoryMock_MarkCompleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_MarkCompleted_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, completedAt time.Time, result *entity.ExecutionResult) error) *ExecutionRepositoryMock_MarkCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFailed provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) MarkFailed(ctx context.Context, id uuid.UUID, completedAt time.Time, error1 string) error {
	ret := _mock.Called(ctx, id, completedAt, error1)

	if len(ret) == 0 {
		panic("no return value specified for MarkFailed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, string) error); ok {
		r0 = returnFunc(ctx, id, completedAt, error1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_MarkFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFailed'
type ExecutionRepositoryMock_MarkFailed_Call struct {
	*mock.Call
}

// MarkFailed is a helper method to define mock.On call
//   - ctx
//   - id
//   - completedAt
//   - error1
func (_e *ExecutionRepositoryMock_Expecter) MarkFailed(ctx interface{}, id interface{}, completedAt interface{}, error1 interface{}) *ExecutionRepositoryMock_MarkFailed_Call {
	return &ExecutionRepositoryMock_MarkFailed_Call{Call: _e.mock.On("MarkFailed", ctx, id, completedAt, error1)}
}

func (_c *ExecutionRepositoryMock_MarkFailed_Call) Run(run func(ctx context.Context, id uuid.UUID, completedAt time.Time, error1 string)) *ExecutionRepositoryMock_MarkFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time), args[3].(string))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_MarkFailed_Call) Return(err error) *ExecutionRepositoryMock_MarkFailed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_MarkFailed_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, completedAt time.Time, error1 string) error) *ExecutionRepositoryMock_MarkFailed_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) Update(ctx context.Context, execution *entity.Execution) error {
	ret := _mock.Called(ctx, execution)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Execution) error); ok {
		r0 = returnFunc(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ExecutionRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - execution
func (_e *ExecutionRepositoryMock_Expecter) Update(ctx interface{}, execution interface{}) *ExecutionRepositoryMock_Update_Call {
	return &ExecutionRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, execution)}
}

func (_c *ExecutionRepositoryMock_Update_Call) Run(run func(ctx context.Context, execution *entity.Execution)) *ExecutionRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Execution))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_Update_Call) Return(err error) *ExecutionRepositoryMock_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_Update_Call) RunAndReturn(run func(ctx context.Context, execution *entity.Execution) error) *ExecutionRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateError provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) UpdateError(ctx context.Context, id uuid.UUID, error1 string) error {
	ret := _mock.Called(ctx, id, error1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, id, error1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_UpdateError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateError'
type ExecutionRepositoryMock_UpdateError_Call struct {
	*mock.Call
}

// UpdateError is a helper method to define mock.On call
//   - ctx
//   - id
//   - error1
func (_e *ExecutionRepositoryMock_Expecter) UpdateError(ctx interface{}, id interface{}, error1 interface{}) *ExecutionRepositoryMock_UpdateError_Call {
	return &ExecutionRepositoryMock_UpdateError_Call{Call: _e.mock.On("UpdateError", ctx, id, error1)}
}

func (_c *ExecutionRepositoryMock_UpdateError_Call) Run(run func(ctx context.Context, id uuid.UUID, error1 string)) *ExecutionRepositoryMock_UpdateError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_UpdateError_Call) Return(err error) *ExecutionRepositoryMock_UpdateError_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_UpdateError_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, error1 string) error) *ExecutionRepositoryMock_UpdateError_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProgress provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) UpdateProgress(ctx context.Context, id uuid.UUID, progress float64) error {
	ret := _mock.Called(ctx, id, progress)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgress")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) error); ok {
		r0 = returnFunc(ctx, id, progress)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_UpdateProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProgress'
type ExecutionRepositoryMock_UpdateProgress_Call struct {
	*mock.Call
}

// UpdateProgress is a helper method to define mock.On call
//   - ctx
//   - id
//   - progress
func (_e *ExecutionRepositoryMock_Expecter) UpdateProgress(ctx interface{}, id interface{}, progress interface{}) *ExecutionRepositoryMock_UpdateProgress_Call {
	return &ExecutionRepositoryMock_UpdateProgress_Call{Call: _e.mock.On("UpdateProgress", ctx, id, progress)}
}

func (_c *ExecutionRepositoryMock_UpdateProgress_Call) Run(run func(ctx context.Context, id uuid.UUID, progress float64)) *ExecutionRepositoryMock_UpdateProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_UpdateProgress_Call) Return(err error) *ExecutionRepositoryMock_UpdateProgress_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_UpdateProgress_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, progress float64) error) *ExecutionRepositoryMock_UpdateProgress_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.ExecutionStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.ExecutionStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionRepositoryMock_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ExecutionRepositoryMock_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *ExecutionRepositoryMock_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *ExecutionRepositoryMock_UpdateStatus_Call {
	return &ExecutionRepositoryMock_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *ExecutionRepositoryMock_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.ExecutionStatus)) *ExecutionRepositoryMock_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.ExecutionStatus))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_UpdateStatus_Call) Return(err error) *ExecutionRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionRepositoryMock_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.ExecutionStatus) error) *ExecutionRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateExecutionExists provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) ValidateExecutionExists(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ValidateExecutionExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_ValidateExecutionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateExecutionExists'
type ExecutionRepositoryMock_ValidateExecutionExists_Call struct {
	*mock.Call
}

// ValidateExecutionExists is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionRepositoryMock_Expecter) ValidateExecutionExists(ctx interface{}, id interface{}) *ExecutionRepositoryMock_ValidateExecutionExists_Call {
	return &ExecutionRepositoryMock_ValidateExecutionExists_Call{Call: _e.mock.On("ValidateExecutionExists", ctx, id)}
}

func (_c *ExecutionRepositoryMock_ValidateExecutionExists_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionRepositoryMock_ValidateExecutionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_ValidateExecutionExists_Call) Return(b bool, err error) *ExecutionRepositoryMock_ValidateExecutionExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *ExecutionRepositoryMock_ValidateExecutionExists_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (bool, error)) *ExecutionRepositoryMock_ValidateExecutionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTaskExists provides a mock function for the type ExecutionRepositoryMock
func (_mock *ExecutionRepositoryMock) ValidateTaskExists(ctx context.Context, taskID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTaskExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionRepositoryMock_ValidateTaskExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTaskExists'
type ExecutionRepositoryMock_ValidateTaskExists_Call struct {
	*mock.Call
}

// ValidateTaskExists is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *ExecutionRepositoryMock_Expecter) ValidateTaskExists(ctx interface{}, taskID interface{}) *ExecutionRepositoryMock_ValidateTaskExists_Call {
	return &ExecutionRepositoryMock_ValidateTaskExists_Call{Call: _e.mock.On("ValidateTaskExists", ctx, taskID)}
}

func (_c *ExecutionRepositoryMock_ValidateTaskExists_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *ExecutionRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionRepositoryMock_ValidateTaskExists_Call) Return(b bool, err error) *ExecutionRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *ExecutionRepositoryMock_ValidateTaskExists_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (bool, error)) *ExecutionRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Return(run)
	return _c
}
