// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewPlanRepositoryMock creates a new instance of PlanRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlanRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlanRepositoryMock {
	mock := &PlanRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PlanRepositoryMock is an autogenerated mock type for the PlanRepository type
type PlanRepositoryMock struct {
	mock.Mock
}

type PlanRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PlanRepositoryMock) EXPECT() *PlanRepositoryMock_Expecter {
	return &PlanRepositoryMock_Expecter{mock: &_m.Mock}
}

// BulkDelete provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) BulkDelete(ctx context.Context, planIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, planIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, planIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type PlanRepositoryMock_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - planIDs
func (_e *PlanRepositoryMock_Expecter) BulkDelete(ctx interface{}, planIDs interface{}) *PlanRepositoryMock_BulkDelete_Call {
	return &PlanRepositoryMock_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, planIDs)}
}

func (_c *PlanRepositoryMock_BulkDelete_Call) Run(run func(ctx context.Context, planIDs []uuid.UUID)) *PlanRepositoryMock_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_BulkDelete_Call) Return(err error) *PlanRepositoryMock_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, planIDs []uuid.UUID) error) *PlanRepositoryMock_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdateStatus provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) BulkUpdateStatus(ctx context.Context, planIDs []uuid.UUID, status entity.PlanStatus) error {
	ret := _mock.Called(ctx, planIDs, status)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.PlanStatus) error); ok {
		r0 = returnFunc(ctx, planIDs, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_BulkUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateStatus'
type PlanRepositoryMock_BulkUpdateStatus_Call struct {
	*mock.Call
}

// BulkUpdateStatus is a helper method to define mock.On call
//   - ctx
//   - planIDs
//   - status
func (_e *PlanRepositoryMock_Expecter) BulkUpdateStatus(ctx interface{}, planIDs interface{}, status interface{}) *PlanRepositoryMock_BulkUpdateStatus_Call {
	return &PlanRepositoryMock_BulkUpdateStatus_Call{Call: _e.mock.On("BulkUpdateStatus", ctx, planIDs, status)}
}

func (_c *PlanRepositoryMock_BulkUpdateStatus_Call) Run(run func(ctx context.Context, planIDs []uuid.UUID, status entity.PlanStatus)) *PlanRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.PlanStatus))
	})
	return _c
}

func (_c *PlanRepositoryMock_BulkUpdateStatus_Call) Return(err error) *PlanRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_BulkUpdateStatus_Call) RunAndReturn(run func(ctx context.Context, planIDs []uuid.UUID, status entity.PlanStatus) error) *PlanRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDuplicatePlanForTask provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) CheckDuplicatePlanForTask(ctx context.Context, taskID uuid.UUID, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, taskID, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicatePlanForTask")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, taskID, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, taskID, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_CheckDuplicatePlanForTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicatePlanForTask'
type PlanRepositoryMock_CheckDuplicatePlanForTask_Call struct {
	*mock.Call
}

// CheckDuplicatePlanForTask is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - excludeID
func (_e *PlanRepositoryMock_Expecter) CheckDuplicatePlanForTask(ctx interface{}, taskID interface{}, excludeID interface{}) *PlanRepositoryMock_CheckDuplicatePlanForTask_Call {
	return &PlanRepositoryMock_CheckDuplicatePlanForTask_Call{Call: _e.mock.On("CheckDuplicatePlanForTask", ctx, taskID, excludeID)}
}

func (_c *PlanRepositoryMock_CheckDuplicatePlanForTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID, excludeID *uuid.UUID)) *PlanRepositoryMock_CheckDuplicatePlanForTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_CheckDuplicatePlanForTask_Call) Return(b bool, err error) *PlanRepositoryMock_CheckDuplicatePlanForTask_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *PlanRepositoryMock_CheckDuplicatePlanForTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, excludeID *uuid.UUID) (bool, error)) *PlanRepositoryMock_CheckDuplicatePlanForTask_Call {
	_c.Call.Return(run)
	return _c
}

// CompareVersions provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) CompareVersions(ctx context.Context, planID uuid.UUID, fromVersion int, toVersion int) (*entity.PlanVersionComparison, error) {
	ret := _mock.Called(ctx, planID, fromVersion, toVersion)

	if len(ret) == 0 {
		panic("no return value specified for CompareVersions")
	}

	var r0 *entity.PlanVersionComparison
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) (*entity.PlanVersionComparison, error)); ok {
		return returnFunc(ctx, planID, fromVersion, toVersion)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) *entity.PlanVersionComparison); ok {
		r0 = returnFunc(ctx, planID, fromVersion, toVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PlanVersionComparison)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = returnFunc(ctx, planID, fromVersion, toVersion)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_CompareVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareVersions'
type PlanRepositoryMock_CompareVersions_Call struct {
	*mock.Call
}

// CompareVersions is a helper method to define mock.On call
//   - ctx
//   - planID
//   - fromVersion
//   - toVersion
func (_e *PlanRepositoryMock_Expecter) CompareVersions(ctx interface{}, planID interface{}, fromVersion interface{}, toVersion interface{}) *PlanRepositoryMock_CompareVersions_Call {
	return &PlanRepositoryMock_CompareVersions_Call{Call: _e.mock.On("CompareVersions", ctx, planID, fromVersion, toVersion)}
}

func (_c *PlanRepositoryMock_CompareVersions_Call) Run(run func(ctx context.Context, planID uuid.UUID, fromVersion int, toVersion int)) *PlanRepositoryMock_CompareVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *PlanRepositoryMock_CompareVersions_Call) Return(planVersionComparison *entity.PlanVersionComparison, err error) *PlanRepositoryMock_CompareVersions_Call {
	_c.Call.Return(planVersionComparison, err)
	return _c
}

func (_c *PlanRepositoryMock_CompareVersions_Call) RunAndReturn(run func(ctx context.Context, planID uuid.UUID, fromVersion int, toVersion int) (*entity.PlanVersionComparison, error)) *PlanRepositoryMock_CompareVersions_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) Create(ctx context.Context, plan *entity.Plan) error {
	ret := _mock.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Plan) error); ok {
		r0 = returnFunc(ctx, plan)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PlanRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - plan
func (_e *PlanRepositoryMock_Expecter) Create(ctx interface{}, plan interface{}) *PlanRepositoryMock_Create_Call {
	return &PlanRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, plan)}
}

func (_c *PlanRepositoryMock_Create_Call) Run(run func(ctx context.Context, plan *entity.Plan)) *PlanRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Plan))
	})
	return _c
}

func (_c *PlanRepositoryMock_Create_Call) Return(err error) *PlanRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, plan *entity.Plan) error) *PlanRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVersion provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) CreateVersion(ctx context.Context, planID uuid.UUID, content string, createdBy string) (*entity.PlanVersion, error) {
	ret := _mock.Called(ctx, planID, content, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateVersion")
	}

	var r0 *entity.PlanVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (*entity.PlanVersion, error)); ok {
		return returnFunc(ctx, planID, content, createdBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) *entity.PlanVersion); ok {
		r0 = returnFunc(ctx, planID, content, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PlanVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = returnFunc(ctx, planID, content, createdBy)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_CreateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVersion'
type PlanRepositoryMock_CreateVersion_Call struct {
	*mock.Call
}

// CreateVersion is a helper method to define mock.On call
//   - ctx
//   - planID
//   - content
//   - createdBy
func (_e *PlanRepositoryMock_Expecter) CreateVersion(ctx interface{}, planID interface{}, content interface{}, createdBy interface{}) *PlanRepositoryMock_CreateVersion_Call {
	return &PlanRepositoryMock_CreateVersion_Call{Call: _e.mock.On("CreateVersion", ctx, planID, content, createdBy)}
}

func (_c *PlanRepositoryMock_CreateVersion_Call) Run(run func(ctx context.Context, planID uuid.UUID, content string, createdBy string)) *PlanRepositoryMock_CreateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *PlanRepositoryMock_CreateVersion_Call) Return(planVersion *entity.PlanVersion, err error) *PlanRepositoryMock_CreateVersion_Call {
	_c.Call.Return(planVersion, err)
	return _c
}

func (_c *PlanRepositoryMock_CreateVersion_Call) RunAndReturn(run func(ctx context.Context, planID uuid.UUID, content string, createdBy string) (*entity.PlanVersion, error)) *PlanRepositoryMock_CreateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PlanRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *PlanRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *PlanRepositoryMock_Delete_Call {
	return &PlanRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PlanRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PlanRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_Delete_Call) Return(err error) *PlanRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *PlanRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Plan, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Plan, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Plan); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type PlanRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *PlanRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *PlanRepositoryMock_GetByID_Call {
	return &PlanRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *PlanRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PlanRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetByID_Call) Return(plan *entity.Plan, err error) *PlanRepositoryMock_GetByID_Call {
	_c.Call.Return(plan, err)
	return _c
}

func (_c *PlanRepositoryMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Plan, error)) *PlanRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTaskID provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetByTaskID(ctx context.Context, taskID uuid.UUID) (*entity.Plan, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 *entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Plan, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Plan); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTaskID'
type PlanRepositoryMock_GetByTaskID_Call struct {
	*mock.Call
}

// GetByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *PlanRepositoryMock_Expecter) GetByTaskID(ctx interface{}, taskID interface{}) *PlanRepositoryMock_GetByTaskID_Call {
	return &PlanRepositoryMock_GetByTaskID_Call{Call: _e.mock.On("GetByTaskID", ctx, taskID)}
}

func (_c *PlanRepositoryMock_GetByTaskID_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *PlanRepositoryMock_GetByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetByTaskID_Call) Return(plan *entity.Plan, err error) *PlanRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(plan, err)
	return _c
}

func (_c *PlanRepositoryMock_GetByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.Plan, error)) *PlanRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestByTaskID provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetLatestByTaskID(ctx context.Context, taskID uuid.UUID) (*entity.Plan, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestByTaskID")
	}

	var r0 *entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Plan, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Plan); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetLatestByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestByTaskID'
type PlanRepositoryMock_GetLatestByTaskID_Call struct {
	*mock.Call
}

// GetLatestByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *PlanRepositoryMock_Expecter) GetLatestByTaskID(ctx interface{}, taskID interface{}) *PlanRepositoryMock_GetLatestByTaskID_Call {
	return &PlanRepositoryMock_GetLatestByTaskID_Call{Call: _e.mock.On("GetLatestByTaskID", ctx, taskID)}
}

func (_c *PlanRepositoryMock_GetLatestByTaskID_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *PlanRepositoryMock_GetLatestByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetLatestByTaskID_Call) Return(plan *entity.Plan, err error) *PlanRepositoryMock_GetLatestByTaskID_Call {
	_c.Call.Return(plan, err)
	return _c
}

func (_c *PlanRepositoryMock_GetLatestByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.Plan, error)) *PlanRepositoryMock_GetLatestByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlanStatistics provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetPlanStatistics(ctx context.Context, projectID uuid.UUID) (*entity.PlanStatistics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanStatistics")
	}

	var r0 *entity.PlanStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.PlanStatistics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.PlanStatistics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PlanStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetPlanStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlanStatistics'
type PlanRepositoryMock_GetPlanStatistics_Call struct {
	*mock.Call
}

// GetPlanStatistics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *PlanRepositoryMock_Expecter) GetPlanStatistics(ctx interface{}, projectID interface{}) *PlanRepositoryMock_GetPlanStatistics_Call {
	return &PlanRepositoryMock_GetPlanStatistics_Call{Call: _e.mock.On("GetPlanStatistics", ctx, projectID)}
}

func (_c *PlanRepositoryMock_GetPlanStatistics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *PlanRepositoryMock_GetPlanStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetPlanStatistics_Call) Return(planStatistics *entity.PlanStatistics, err error) *PlanRepositoryMock_GetPlanStatistics_Call {
	_c.Call.Return(planStatistics, err)
	return _c
}

func (_c *PlanRepositoryMock_GetPlanStatistics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.PlanStatistics, error)) *PlanRepositoryMock_GetPlanStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusDistribution provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetStatusDistribution(ctx context.Context, projectID *uuid.UUID) (map[entity.PlanStatus]int, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusDistribution")
	}

	var r0 map[entity.PlanStatus]int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (map[entity.PlanStatus]int, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) map[entity.PlanStatus]int); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[entity.PlanStatus]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetStatusDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusDistribution'
type PlanRepositoryMock_GetStatusDistribution_Call struct {
	*mock.Call
}

// GetStatusDistribution is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *PlanRepositoryMock_Expecter) GetStatusDistribution(ctx interface{}, projectID interface{}) *PlanRepositoryMock_GetStatusDistribution_Call {
	return &PlanRepositoryMock_GetStatusDistribution_Call{Call: _e.mock.On("GetStatusDistribution", ctx, projectID)}
}

func (_c *PlanRepositoryMock_GetStatusDistribution_Call) Run(run func(ctx context.Context, projectID *uuid.UUID)) *PlanRepositoryMock_GetStatusDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetStatusDistribution_Call) Return(planStatusToInt map[entity.PlanStatus]int, err error) *PlanRepositoryMock_GetStatusDistribution_Call {
	_c.Call.Return(planStatusToInt, err)
	return _c
}

func (_c *PlanRepositoryMock_GetStatusDistribution_Call) RunAndReturn(run func(ctx context.Context, projectID *uuid.UUID) (map[entity.PlanStatus]int, error)) *PlanRepositoryMock_GetStatusDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetVersion(ctx context.Context, planID uuid.UUID, version int) (*entity.PlanVersion, error) {
	ret := _mock.Called(ctx, planID, version)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 *entity.PlanVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) (*entity.PlanVersion, error)); ok {
		return returnFunc(ctx, planID, version)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) *entity.PlanVersion); ok {
		r0 = returnFunc(ctx, planID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PlanVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, planID, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type PlanRepositoryMock_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx
//   - planID
//   - version
func (_e *PlanRepositoryMock_Expecter) GetVersion(ctx interface{}, planID interface{}, version interface{}) *PlanRepositoryMock_GetVersion_Call {
	return &PlanRepositoryMock_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx, planID, version)}
}

func (_c *PlanRepositoryMock_GetVersion_Call) Run(run func(ctx context.Context, planID uuid.UUID, version int)) *PlanRepositoryMock_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetVersion_Call) Return(planVersion *entity.PlanVersion, err error) *PlanRepositoryMock_GetVersion_Call {
	_c.Call.Return(planVersion, err)
	return _c
}

func (_c *PlanRepositoryMock_GetVersion_Call) RunAndReturn(run func(ctx context.Context, planID uuid.UUID, version int) (*entity.PlanVersion, error)) *PlanRepositoryMock_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersions provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) GetVersions(ctx context.Context, planID uuid.UUID) ([]*entity.PlanVersion, error) {
	ret := _mock.Called(ctx, planID)

	if len(ret) == 0 {
		panic("no return value specified for GetVersions")
	}

	var r0 []*entity.PlanVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.PlanVersion, error)); ok {
		return returnFunc(ctx, planID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.PlanVersion); ok {
		r0 = returnFunc(ctx, planID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.PlanVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, planID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_GetVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersions'
type PlanRepositoryMock_GetVersions_Call struct {
	*mock.Call
}

// GetVersions is a helper method to define mock.On call
//   - ctx
//   - planID
func (_e *PlanRepositoryMock_Expecter) GetVersions(ctx interface{}, planID interface{}) *PlanRepositoryMock_GetVersions_Call {
	return &PlanRepositoryMock_GetVersions_Call{Call: _e.mock.On("GetVersions", ctx, planID)}
}

func (_c *PlanRepositoryMock_GetVersions_Call) Run(run func(ctx context.Context, planID uuid.UUID)) *PlanRepositoryMock_GetVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_GetVersions_Call) Return(planVersions []*entity.PlanVersion, err error) *PlanRepositoryMock_GetVersions_Call {
	_c.Call.Return(planVersions, err)
	return _c
}

func (_c *PlanRepositoryMock_GetVersions_Call) RunAndReturn(run func(ctx context.Context, planID uuid.UUID) ([]*entity.PlanVersion, error)) *PlanRepositoryMock_GetVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProjectID provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) ListByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Plan, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProjectID")
	}

	var r0 []*entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Plan, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Plan); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_ListByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProjectID'
type PlanRepositoryMock_ListByProjectID_Call struct {
	*mock.Call
}

// ListByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *PlanRepositoryMock_Expecter) ListByProjectID(ctx interface{}, projectID interface{}) *PlanRepositoryMock_ListByProjectID_Call {
	return &PlanRepositoryMock_ListByProjectID_Call{Call: _e.mock.On("ListByProjectID", ctx, projectID)}
}

func (_c *PlanRepositoryMock_ListByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *PlanRepositoryMock_ListByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_ListByProjectID_Call) Return(plans []*entity.Plan, err error) *PlanRepositoryMock_ListByProjectID_Call {
	_c.Call.Return(plans, err)
	return _c
}

func (_c *PlanRepositoryMock_ListByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Plan, error)) *PlanRepositoryMock_ListByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByStatus provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) ListByStatus(ctx context.Context, status entity.PlanStatus) ([]*entity.Plan, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for ListByStatus")
	}

	var r0 []*entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.PlanStatus) ([]*entity.Plan, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.PlanStatus) []*entity.Plan); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.PlanStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_ListByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByStatus'
type PlanRepositoryMock_ListByStatus_Call struct {
	*mock.Call
}

// ListByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *PlanRepositoryMock_Expecter) ListByStatus(ctx interface{}, status interface{}) *PlanRepositoryMock_ListByStatus_Call {
	return &PlanRepositoryMock_ListByStatus_Call{Call: _e.mock.On("ListByStatus", ctx, status)}
}

func (_c *PlanRepositoryMock_ListByStatus_Call) Run(run func(ctx context.Context, status entity.PlanStatus)) *PlanRepositoryMock_ListByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PlanStatus))
	})
	return _c
}

func (_c *PlanRepositoryMock_ListByStatus_Call) Return(plans []*entity.Plan, err error) *PlanRepositoryMock_ListByStatus_Call {
	_c.Call.Return(plans, err)
	return _c
}

func (_c *PlanRepositoryMock_ListByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.PlanStatus) ([]*entity.Plan, error)) *PlanRepositoryMock_ListByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListByTaskIDs provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) ListByTaskIDs(ctx context.Context, taskIDs []uuid.UUID) ([]*entity.Plan, error) {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListByTaskIDs")
	}

	var r0 []*entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*entity.Plan, error)); ok {
		return returnFunc(ctx, taskIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*entity.Plan); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_ListByTaskIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByTaskIDs'
type PlanRepositoryMock_ListByTaskIDs_Call struct {
	*mock.Call
}

// ListByTaskIDs is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *PlanRepositoryMock_Expecter) ListByTaskIDs(ctx interface{}, taskIDs interface{}) *PlanRepositoryMock_ListByTaskIDs_Call {
	return &PlanRepositoryMock_ListByTaskIDs_Call{Call: _e.mock.On("ListByTaskIDs", ctx, taskIDs)}
}

func (_c *PlanRepositoryMock_ListByTaskIDs_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *PlanRepositoryMock_ListByTaskIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_ListByTaskIDs_Call) Return(plans []*entity.Plan, err error) *PlanRepositoryMock_ListByTaskIDs_Call {
	_c.Call.Return(plans, err)
	return _c
}

func (_c *PlanRepositoryMock_ListByTaskIDs_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) ([]*entity.Plan, error)) *PlanRepositoryMock_ListByTaskIDs_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreVersion provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) RestoreVersion(ctx context.Context, planID uuid.UUID, version int) error {
	ret := _mock.Called(ctx, planID, version)

	if len(ret) == 0 {
		panic("no return value specified for RestoreVersion")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) error); ok {
		r0 = returnFunc(ctx, planID, version)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_RestoreVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreVersion'
type PlanRepositoryMock_RestoreVersion_Call struct {
	*mock.Call
}

// RestoreVersion is a helper method to define mock.On call
//   - ctx
//   - planID
//   - version
func (_e *PlanRepositoryMock_Expecter) RestoreVersion(ctx interface{}, planID interface{}, version interface{}) *PlanRepositoryMock_RestoreVersion_Call {
	return &PlanRepositoryMock_RestoreVersion_Call{Call: _e.mock.On("RestoreVersion", ctx, planID, version)}
}

func (_c *PlanRepositoryMock_RestoreVersion_Call) Run(run func(ctx context.Context, planID uuid.UUID, version int)) *PlanRepositoryMock_RestoreVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *PlanRepositoryMock_RestoreVersion_Call) Return(err error) *PlanRepositoryMock_RestoreVersion_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_RestoreVersion_Call) RunAndReturn(run func(ctx context.Context, planID uuid.UUID, version int) error) *PlanRepositoryMock_RestoreVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByContent provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) SearchByContent(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.Plan, error) {
	ret := _mock.Called(ctx, query, projectID)

	if len(ret) == 0 {
		panic("no return value specified for SearchByContent")
	}

	var r0 []*entity.Plan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) ([]*entity.Plan, error)); ok {
		return returnFunc(ctx, query, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) []*entity.Plan); ok {
		r0 = returnFunc(ctx, query, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Plan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, query, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_SearchByContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByContent'
type PlanRepositoryMock_SearchByContent_Call struct {
	*mock.Call
}

// SearchByContent is a helper method to define mock.On call
//   - ctx
//   - query
//   - projectID
func (_e *PlanRepositoryMock_Expecter) SearchByContent(ctx interface{}, query interface{}, projectID interface{}) *PlanRepositoryMock_SearchByContent_Call {
	return &PlanRepositoryMock_SearchByContent_Call{Call: _e.mock.On("SearchByContent", ctx, query, projectID)}
}

func (_c *PlanRepositoryMock_SearchByContent_Call) Run(run func(ctx context.Context, query string, projectID *uuid.UUID)) *PlanRepositoryMock_SearchByContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_SearchByContent_Call) Return(plans []*entity.Plan, err error) *PlanRepositoryMock_SearchByContent_Call {
	_c.Call.Return(plans, err)
	return _c
}

func (_c *PlanRepositoryMock_SearchByContent_Call) RunAndReturn(run func(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.Plan, error)) *PlanRepositoryMock_SearchByContent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) Update(ctx context.Context, plan *entity.Plan) error {
	ret := _mock.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Plan) error); ok {
		r0 = returnFunc(ctx, plan)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PlanRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - plan
func (_e *PlanRepositoryMock_Expecter) Update(ctx interface{}, plan interface{}) *PlanRepositoryMock_Update_Call {
	return &PlanRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, plan)}
}

func (_c *PlanRepositoryMock_Update_Call) Run(run func(ctx context.Context, plan *entity.Plan)) *PlanRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Plan))
	})
	return _c
}

func (_c *PlanRepositoryMock_Update_Call) Return(err error) *PlanRepositoryMock_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_Update_Call) RunAndReturn(run func(ctx context.Context, plan *entity.Plan) error) *PlanRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) UpdateContent(ctx context.Context, id uuid.UUID, content string) error {
	ret := _mock.Called(ctx, id, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, id, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type PlanRepositoryMock_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - ctx
//   - id
//   - content
func (_e *PlanRepositoryMock_Expecter) UpdateContent(ctx interface{}, id interface{}, content interface{}) *PlanRepositoryMock_UpdateContent_Call {
	return &PlanRepositoryMock_UpdateContent_Call{Call: _e.mock.On("UpdateContent", ctx, id, content)}
}

func (_c *PlanRepositoryMock_UpdateContent_Call) Run(run func(ctx context.Context, id uuid.UUID, content string)) *PlanRepositoryMock_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *PlanRepositoryMock_UpdateContent_Call) Return(err error) *PlanRepositoryMock_UpdateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_UpdateContent_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, content string) error) *PlanRepositoryMock_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.PlanStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.PlanStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlanRepositoryMock_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type PlanRepositoryMock_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *PlanRepositoryMock_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *PlanRepositoryMock_UpdateStatus_Call {
	return &PlanRepositoryMock_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *PlanRepositoryMock_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.PlanStatus)) *PlanRepositoryMock_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.PlanStatus))
	})
	return _c
}

func (_c *PlanRepositoryMock_UpdateStatus_Call) Return(err error) *PlanRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlanRepositoryMock_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.PlanStatus) error) *PlanRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePlanExists provides a mock function for the type PlanRepositoryMock
func (_mock *PlanRepositoryMock) ValidatePlanExists(ctx context.Context, planID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, planID)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePlanExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, planID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, planID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, planID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlanRepositoryMock_ValidatePlanExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePlanExists'
type PlanRepositoryMock_ValidatePlanExists_Call struct {
	*mock.Call
}

// ValidatePlanExists is a helper method to define mock.On call
//   - ctx
//   - planID
func (_e *PlanRepositoryMock_Expecter) ValidatePlanExists(ctx interface{}, planID interface{}) *PlanRepositoryMock_ValidatePlanExists_Call {
	return &PlanRepositoryMock_ValidatePlanExists_Call{Call: _e.mock.On("ValidatePlanExists", ctx, planID)}
}

func (_c *PlanRepositoryMock_ValidatePlanExists_Call) Run(run func(ctx context.Context, planID uuid.UUID)) *PlanRepositoryMock_ValidatePlanExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PlanRepositoryMock_ValidatePlanExists_Call) Return(b bool, err error) *PlanRepositoryMock_ValidatePlanExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *PlanRepositoryMock_ValidatePlanExists_Call) RunAndReturn(run func(ctx context.Context, planID uuid.UUID) (bool, error)) *PlanRepositoryMock_ValidatePlanExists_Call {
	_c.Call.Return(run)
	return _c
}
