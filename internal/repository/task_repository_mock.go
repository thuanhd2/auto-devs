// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewTaskRepositoryMock creates a new instance of TaskRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryMock {
	mock := &TaskRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskRepositoryMock is an autogenerated mock type for the TaskRepository type
type TaskRepositoryMock struct {
	mock.Mock
}

type TaskRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepositoryMock) EXPECT() *TaskRepositoryMock_Expecter {
	return &TaskRepositoryMock_Expecter{mock: &_m.Mock}
}

// AddAttachment provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) AddAttachment(ctx context.Context, attachment *entity.TaskAttachment) error {
	ret := _mock.Called(ctx, attachment)

	if len(ret) == 0 {
		panic("no return value specified for AddAttachment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.TaskAttachment) error); ok {
		r0 = returnFunc(ctx, attachment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_AddAttachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAttachment'
type TaskRepositoryMock_AddAttachment_Call struct {
	*mock.Call
}

// AddAttachment is a helper method to define mock.On call
//   - ctx
//   - attachment
func (_e *TaskRepositoryMock_Expecter) AddAttachment(ctx interface{}, attachment interface{}) *TaskRepositoryMock_AddAttachment_Call {
	return &TaskRepositoryMock_AddAttachment_Call{Call: _e.mock.On("AddAttachment", ctx, attachment)}
}

func (_c *TaskRepositoryMock_AddAttachment_Call) Run(run func(ctx context.Context, attachment *entity.TaskAttachment)) *TaskRepositoryMock_AddAttachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TaskAttachment))
	})
	return _c
}

func (_c *TaskRepositoryMock_AddAttachment_Call) Return(err error) *TaskRepositoryMock_AddAttachment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_AddAttachment_Call) RunAndReturn(run func(ctx context.Context, attachment *entity.TaskAttachment) error) *TaskRepositoryMock_AddAttachment_Call {
	_c.Call.Return(run)
	return _c
}

// AddComment provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) AddComment(ctx context.Context, comment *entity.TaskComment) error {
	ret := _mock.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.TaskComment) error); ok {
		r0 = returnFunc(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type TaskRepositoryMock_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - ctx
//   - comment
func (_e *TaskRepositoryMock_Expecter) AddComment(ctx interface{}, comment interface{}) *TaskRepositoryMock_AddComment_Call {
	return &TaskRepositoryMock_AddComment_Call{Call: _e.mock.On("AddComment", ctx, comment)}
}

func (_c *TaskRepositoryMock_AddComment_Call) Run(run func(ctx context.Context, comment *entity.TaskComment)) *TaskRepositoryMock_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TaskComment))
	})
	return _c
}

func (_c *TaskRepositoryMock_AddComment_Call) Return(err error) *TaskRepositoryMock_AddComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_AddComment_Call) RunAndReturn(run func(ctx context.Context, comment *entity.TaskComment) error) *TaskRepositoryMock_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// AddDependency provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) AddDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error {
	ret := _mock.Called(ctx, taskID, dependsOnTaskID, dependencyType)

	if len(ret) == 0 {
		panic("no return value specified for AddDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, taskID, dependsOnTaskID, dependencyType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_AddDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDependency'
type TaskRepositoryMock_AddDependency_Call struct {
	*mock.Call
}

// AddDependency is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - dependsOnTaskID
//   - dependencyType
func (_e *TaskRepositoryMock_Expecter) AddDependency(ctx interface{}, taskID interface{}, dependsOnTaskID interface{}, dependencyType interface{}) *TaskRepositoryMock_AddDependency_Call {
	return &TaskRepositoryMock_AddDependency_Call{Call: _e.mock.On("AddDependency", ctx, taskID, dependsOnTaskID, dependencyType)}
}

func (_c *TaskRepositoryMock_AddDependency_Call) Run(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string)) *TaskRepositoryMock_AddDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *TaskRepositoryMock_AddDependency_Call) Return(err error) *TaskRepositoryMock_AddDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_AddDependency_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID, dependencyType string) error) *TaskRepositoryMock_AddDependency_Call {
	_c.Call.Return(run)
	return _c
}

// BulkArchive provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) BulkArchive(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkArchive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_BulkArchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkArchive'
type TaskRepositoryMock_BulkArchive_Call struct {
	*mock.Call
}

// BulkArchive is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *TaskRepositoryMock_Expecter) BulkArchive(ctx interface{}, taskIDs interface{}) *TaskRepositoryMock_BulkArchive_Call {
	return &TaskRepositoryMock_BulkArchive_Call{Call: _e.mock.On("BulkArchive", ctx, taskIDs)}
}

func (_c *TaskRepositoryMock_BulkArchive_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *TaskRepositoryMock_BulkArchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_BulkArchive_Call) Return(err error) *TaskRepositoryMock_BulkArchive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_BulkArchive_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *TaskRepositoryMock_BulkArchive_Call {
	_c.Call.Return(run)
	return _c
}

// BulkAssign provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) BulkAssign(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error {
	ret := _mock.Called(ctx, taskIDs, assignedTo)

	if len(ret) == 0 {
		panic("no return value specified for BulkAssign")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, taskIDs, assignedTo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_BulkAssign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkAssign'
type TaskRepositoryMock_BulkAssign_Call struct {
	*mock.Call
}

// BulkAssign is a helper method to define mock.On call
//   - ctx
//   - taskIDs
//   - assignedTo
func (_e *TaskRepositoryMock_Expecter) BulkAssign(ctx interface{}, taskIDs interface{}, assignedTo interface{}) *TaskRepositoryMock_BulkAssign_Call {
	return &TaskRepositoryMock_BulkAssign_Call{Call: _e.mock.On("BulkAssign", ctx, taskIDs, assignedTo)}
}

func (_c *TaskRepositoryMock_BulkAssign_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, assignedTo string)) *TaskRepositoryMock_BulkAssign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *TaskRepositoryMock_BulkAssign_Call) Return(err error) *TaskRepositoryMock_BulkAssign_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_BulkAssign_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, assignedTo string) error) *TaskRepositoryMock_BulkAssign_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDelete provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) BulkDelete(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type TaskRepositoryMock_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *TaskRepositoryMock_Expecter) BulkDelete(ctx interface{}, taskIDs interface{}) *TaskRepositoryMock_BulkDelete_Call {
	return &TaskRepositoryMock_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, taskIDs)}
}

func (_c *TaskRepositoryMock_BulkDelete_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *TaskRepositoryMock_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_BulkDelete_Call) Return(err error) *TaskRepositoryMock_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *TaskRepositoryMock_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUnarchive provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) BulkUnarchive(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkUnarchive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_BulkUnarchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUnarchive'
type TaskRepositoryMock_BulkUnarchive_Call struct {
	*mock.Call
}

// BulkUnarchive is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *TaskRepositoryMock_Expecter) BulkUnarchive(ctx interface{}, taskIDs interface{}) *TaskRepositoryMock_BulkUnarchive_Call {
	return &TaskRepositoryMock_BulkUnarchive_Call{Call: _e.mock.On("BulkUnarchive", ctx, taskIDs)}
}

func (_c *TaskRepositoryMock_BulkUnarchive_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *TaskRepositoryMock_BulkUnarchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_BulkUnarchive_Call) Return(err error) *TaskRepositoryMock_BulkUnarchive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_BulkUnarchive_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *TaskRepositoryMock_BulkUnarchive_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdatePriority provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) BulkUpdatePriority(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error {
	ret := _mock.Called(ctx, taskIDs, priority)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdatePriority")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.TaskPriority) error); ok {
		r0 = returnFunc(ctx, taskIDs, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_BulkUpdatePriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdatePriority'
type TaskRepositoryMock_BulkUpdatePriority_Call struct {
	*mock.Call
}

// BulkUpdatePriority is a helper method to define mock.On call
//   - ctx
//   - taskIDs
//   - priority
func (_e *TaskRepositoryMock_Expecter) BulkUpdatePriority(ctx interface{}, taskIDs interface{}, priority interface{}) *TaskRepositoryMock_BulkUpdatePriority_Call {
	return &TaskRepositoryMock_BulkUpdatePriority_Call{Call: _e.mock.On("BulkUpdatePriority", ctx, taskIDs, priority)}
}

func (_c *TaskRepositoryMock_BulkUpdatePriority_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority)) *TaskRepositoryMock_BulkUpdatePriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.TaskPriority))
	})
	return _c
}

func (_c *TaskRepositoryMock_BulkUpdatePriority_Call) Return(err error) *TaskRepositoryMock_BulkUpdatePriority_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_BulkUpdatePriority_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, priority entity.TaskPriority) error) *TaskRepositoryMock_BulkUpdatePriority_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdateStatus provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) BulkUpdateStatus(ctx context.Context, ids []uuid.UUID, status entity.TaskStatus, changedBy *string) error {
	ret := _mock.Called(ctx, ids, status, changedBy)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.TaskStatus, *string) error); ok {
		r0 = returnFunc(ctx, ids, status, changedBy)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_BulkUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateStatus'
type TaskRepositoryMock_BulkUpdateStatus_Call struct {
	*mock.Call
}

// BulkUpdateStatus is a helper method to define mock.On call
//   - ctx
//   - ids
//   - status
//   - changedBy
func (_e *TaskRepositoryMock_Expecter) BulkUpdateStatus(ctx interface{}, ids interface{}, status interface{}, changedBy interface{}) *TaskRepositoryMock_BulkUpdateStatus_Call {
	return &TaskRepositoryMock_BulkUpdateStatus_Call{Call: _e.mock.On("BulkUpdateStatus", ctx, ids, status, changedBy)}
}

func (_c *TaskRepositoryMock_BulkUpdateStatus_Call) Run(run func(ctx context.Context, ids []uuid.UUID, status entity.TaskStatus, changedBy *string)) *TaskRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.TaskStatus), args[3].(*string))
	})
	return _c
}

func (_c *TaskRepositoryMock_BulkUpdateStatus_Call) Return(err error) *TaskRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_BulkUpdateStatus_Call) RunAndReturn(run func(ctx context.Context, ids []uuid.UUID, status entity.TaskStatus, changedBy *string) error) *TaskRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDuplicateTitle provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) CheckDuplicateTitle(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, projectID, title, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicateTitle")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, projectID, title, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, projectID, title, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID, title, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_CheckDuplicateTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicateTitle'
type TaskRepositoryMock_CheckDuplicateTitle_Call struct {
	*mock.Call
}

// CheckDuplicateTitle is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - title
//   - excludeID
func (_e *TaskRepositoryMock_Expecter) CheckDuplicateTitle(ctx interface{}, projectID interface{}, title interface{}, excludeID interface{}) *TaskRepositoryMock_CheckDuplicateTitle_Call {
	return &TaskRepositoryMock_CheckDuplicateTitle_Call{Call: _e.mock.On("CheckDuplicateTitle", ctx, projectID, title, excludeID)}
}

func (_c *TaskRepositoryMock_CheckDuplicateTitle_Call) Run(run func(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID)) *TaskRepositoryMock_CheckDuplicateTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_CheckDuplicateTitle_Call) Return(b bool, err error) *TaskRepositoryMock_CheckDuplicateTitle_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *TaskRepositoryMock_CheckDuplicateTitle_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, title string, excludeID *uuid.UUID) (bool, error)) *TaskRepositoryMock_CheckDuplicateTitle_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) Create(ctx context.Context, task *entity.Task) error {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Task) error); ok {
		r0 = returnFunc(ctx, task)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TaskRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - task
func (_e *TaskRepositoryMock_Expecter) Create(ctx interface{}, task interface{}) *TaskRepositoryMock_Create_Call {
	return &TaskRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, task)}
}

func (_c *TaskRepositoryMock_Create_Call) Run(run func(ctx context.Context, task *entity.Task)) *TaskRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Task))
	})
	return _c
}

func (_c *TaskRepositoryMock_Create_Call) Return(err error) *TaskRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, task *entity.Task) error) *TaskRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuditLog provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) CreateAuditLog(ctx context.Context, auditLog *entity.TaskAuditLog) error {
	ret := _mock.Called(ctx, auditLog)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuditLog")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.TaskAuditLog) error); ok {
		r0 = returnFunc(ctx, auditLog)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_CreateAuditLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuditLog'
type TaskRepositoryMock_CreateAuditLog_Call struct {
	*mock.Call
}

// CreateAuditLog is a helper method to define mock.On call
//   - ctx
//   - auditLog
func (_e *TaskRepositoryMock_Expecter) CreateAuditLog(ctx interface{}, auditLog interface{}) *TaskRepositoryMock_CreateAuditLog_Call {
	return &TaskRepositoryMock_CreateAuditLog_Call{Call: _e.mock.On("CreateAuditLog", ctx, auditLog)}
}

func (_c *TaskRepositoryMock_CreateAuditLog_Call) Run(run func(ctx context.Context, auditLog *entity.TaskAuditLog)) *TaskRepositoryMock_CreateAuditLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TaskAuditLog))
	})
	return _c
}

func (_c *TaskRepositoryMock_CreateAuditLog_Call) Return(err error) *TaskRepositoryMock_CreateAuditLog_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_CreateAuditLog_Call) RunAndReturn(run func(ctx context.Context, auditLog *entity.TaskAuditLog) error) *TaskRepositoryMock_CreateAuditLog_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskFromTemplate provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) CreateTaskFromTemplate(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error) {
	ret := _mock.Called(ctx, templateID, projectID, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskFromTemplate")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) (*entity.Task, error)); ok {
		return returnFunc(ctx, templateID, projectID, createdBy)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) *entity.Task); ok {
		r0 = returnFunc(ctx, templateID, projectID, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, templateID, projectID, createdBy)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_CreateTaskFromTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskFromTemplate'
type TaskRepositoryMock_CreateTaskFromTemplate_Call struct {
	*mock.Call
}

// CreateTaskFromTemplate is a helper method to define mock.On call
//   - ctx
//   - templateID
//   - projectID
//   - createdBy
func (_e *TaskRepositoryMock_Expecter) CreateTaskFromTemplate(ctx interface{}, templateID interface{}, projectID interface{}, createdBy interface{}) *TaskRepositoryMock_CreateTaskFromTemplate_Call {
	return &TaskRepositoryMock_CreateTaskFromTemplate_Call{Call: _e.mock.On("CreateTaskFromTemplate", ctx, templateID, projectID, createdBy)}
}

func (_c *TaskRepositoryMock_CreateTaskFromTemplate_Call) Run(run func(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string)) *TaskRepositoryMock_CreateTaskFromTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *TaskRepositoryMock_CreateTaskFromTemplate_Call) Return(task *entity.Task, err error) *TaskRepositoryMock_CreateTaskFromTemplate_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskRepositoryMock_CreateTaskFromTemplate_Call) RunAndReturn(run func(ctx context.Context, templateID uuid.UUID, projectID uuid.UUID, createdBy string) (*entity.Task, error)) *TaskRepositoryMock_CreateTaskFromTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplate provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) CreateTemplate(ctx context.Context, template *entity.TaskTemplate) error {
	ret := _mock.Called(ctx, template)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.TaskTemplate) error); ok {
		r0 = returnFunc(ctx, template)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type TaskRepositoryMock_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - ctx
//   - template
func (_e *TaskRepositoryMock_Expecter) CreateTemplate(ctx interface{}, template interface{}) *TaskRepositoryMock_CreateTemplate_Call {
	return &TaskRepositoryMock_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", ctx, template)}
}

func (_c *TaskRepositoryMock_CreateTemplate_Call) Run(run func(ctx context.Context, template *entity.TaskTemplate)) *TaskRepositoryMock_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TaskTemplate))
	})
	return _c
}

func (_c *TaskRepositoryMock_CreateTemplate_Call) Return(err error) *TaskRepositoryMock_CreateTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_CreateTemplate_Call) RunAndReturn(run func(ctx context.Context, template *entity.TaskTemplate) error) *TaskRepositoryMock_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TaskRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *TaskRepositoryMock_Delete_Call {
	return &TaskRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *TaskRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_Delete_Call) Return(err error) *TaskRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *TaskRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAttachment provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) DeleteAttachment(ctx context.Context, attachmentID uuid.UUID) error {
	ret := _mock.Called(ctx, attachmentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttachment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, attachmentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_DeleteAttachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAttachment'
type TaskRepositoryMock_DeleteAttachment_Call struct {
	*mock.Call
}

// DeleteAttachment is a helper method to define mock.On call
//   - ctx
//   - attachmentID
func (_e *TaskRepositoryMock_Expecter) DeleteAttachment(ctx interface{}, attachmentID interface{}) *TaskRepositoryMock_DeleteAttachment_Call {
	return &TaskRepositoryMock_DeleteAttachment_Call{Call: _e.mock.On("DeleteAttachment", ctx, attachmentID)}
}

func (_c *TaskRepositoryMock_DeleteAttachment_Call) Run(run func(ctx context.Context, attachmentID uuid.UUID)) *TaskRepositoryMock_DeleteAttachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_DeleteAttachment_Call) Return(err error) *TaskRepositoryMock_DeleteAttachment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_DeleteAttachment_Call) RunAndReturn(run func(ctx context.Context, attachmentID uuid.UUID) error) *TaskRepositoryMock_DeleteAttachment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) DeleteComment(ctx context.Context, commentID uuid.UUID) error {
	ret := _mock.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type TaskRepositoryMock_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx
//   - commentID
func (_e *TaskRepositoryMock_Expecter) DeleteComment(ctx interface{}, commentID interface{}) *TaskRepositoryMock_DeleteComment_Call {
	return &TaskRepositoryMock_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, commentID)}
}

func (_c *TaskRepositoryMock_DeleteComment_Call) Run(run func(ctx context.Context, commentID uuid.UUID)) *TaskRepositoryMock_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_DeleteComment_Call) Return(err error) *TaskRepositoryMock_DeleteComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_DeleteComment_Call) RunAndReturn(run func(ctx context.Context, commentID uuid.UUID) error) *TaskRepositoryMock_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplate provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) DeleteTemplate(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type TaskRepositoryMock_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskRepositoryMock_Expecter) DeleteTemplate(ctx interface{}, id interface{}) *TaskRepositoryMock_DeleteTemplate_Call {
	return &TaskRepositoryMock_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate", ctx, id)}
}

func (_c *TaskRepositoryMock_DeleteTemplate_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskRepositoryMock_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_DeleteTemplate_Call) Return(err error) *TaskRepositoryMock_DeleteTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_DeleteTemplate_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *TaskRepositoryMock_DeleteTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTasks provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) ExportTasks(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error) {
	ret := _mock.Called(ctx, filters, format)

	if len(ret) == 0 {
		panic("no return value specified for ExportTasks")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) ([]byte, error)); ok {
		return returnFunc(ctx, filters, format)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) []byte); ok {
		r0 = returnFunc(ctx, filters, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskFilters, entity.TaskExportFormat) error); ok {
		r1 = returnFunc(ctx, filters, format)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_ExportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTasks'
type TaskRepositoryMock_ExportTasks_Call struct {
	*mock.Call
}

// ExportTasks is a helper method to define mock.On call
//   - ctx
//   - filters
//   - format
func (_e *TaskRepositoryMock_Expecter) ExportTasks(ctx interface{}, filters interface{}, format interface{}) *TaskRepositoryMock_ExportTasks_Call {
	return &TaskRepositoryMock_ExportTasks_Call{Call: _e.mock.On("ExportTasks", ctx, filters, format)}
}

func (_c *TaskRepositoryMock_ExportTasks_Call) Run(run func(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat)) *TaskRepositoryMock_ExportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskFilters), args[2].(entity.TaskExportFormat))
	})
	return _c
}

func (_c *TaskRepositoryMock_ExportTasks_Call) Return(bytes []byte, err error) *TaskRepositoryMock_ExportTasks_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *TaskRepositoryMock_ExportTasks_Call) RunAndReturn(run func(ctx context.Context, filters entity.TaskFilters, format entity.TaskExportFormat) ([]byte, error)) *TaskRepositoryMock_ExportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetArchivedTasks provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetArchivedTasks(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetArchivedTasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetArchivedTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArchivedTasks'
type TaskRepositoryMock_GetArchivedTasks_Call struct {
	*mock.Call
}

// GetArchivedTasks is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskRepositoryMock_Expecter) GetArchivedTasks(ctx interface{}, projectID interface{}) *TaskRepositoryMock_GetArchivedTasks_Call {
	return &TaskRepositoryMock_GetArchivedTasks_Call{Call: _e.mock.On("GetArchivedTasks", ctx, projectID)}
}

func (_c *TaskRepositoryMock_GetArchivedTasks_Call) Run(run func(ctx context.Context, projectID *uuid.UUID)) *TaskRepositoryMock_GetArchivedTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetArchivedTasks_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetArchivedTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetArchivedTasks_Call) RunAndReturn(run func(ctx context.Context, projectID *uuid.UUID) ([]*entity.Task, error)) *TaskRepositoryMock_GetArchivedTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttachments provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetAttachments(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskAttachment, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachments")
	}

	var r0 []*entity.TaskAttachment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskAttachment, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskAttachment); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskAttachment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetAttachments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttachments'
type TaskRepositoryMock_GetAttachments_Call struct {
	*mock.Call
}

// GetAttachments is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) GetAttachments(ctx interface{}, taskID interface{}) *TaskRepositoryMock_GetAttachments_Call {
	return &TaskRepositoryMock_GetAttachments_Call{Call: _e.mock.On("GetAttachments", ctx, taskID)}
}

func (_c *TaskRepositoryMock_GetAttachments_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_GetAttachments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetAttachments_Call) Return(taskAttachments []*entity.TaskAttachment, err error) *TaskRepositoryMock_GetAttachments_Call {
	_c.Call.Return(taskAttachments, err)
	return _c
}

func (_c *TaskRepositoryMock_GetAttachments_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskAttachment, error)) *TaskRepositoryMock_GetAttachments_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogs provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetAuditLogs(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error) {
	ret := _mock.Called(ctx, taskID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogs")
	}

	var r0 []*entity.TaskAuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int) ([]*entity.TaskAuditLog, error)); ok {
		return returnFunc(ctx, taskID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *int) []*entity.TaskAuditLog); ok {
		r0 = returnFunc(ctx, taskID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskAuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *int) error); ok {
		r1 = returnFunc(ctx, taskID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogs'
type TaskRepositoryMock_GetAuditLogs_Call struct {
	*mock.Call
}

// GetAuditLogs is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - limit
func (_e *TaskRepositoryMock_Expecter) GetAuditLogs(ctx interface{}, taskID interface{}, limit interface{}) *TaskRepositoryMock_GetAuditLogs_Call {
	return &TaskRepositoryMock_GetAuditLogs_Call{Call: _e.mock.On("GetAuditLogs", ctx, taskID, limit)}
}

func (_c *TaskRepositoryMock_GetAuditLogs_Call) Run(run func(ctx context.Context, taskID uuid.UUID, limit *int)) *TaskRepositoryMock_GetAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*int))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetAuditLogs_Call) Return(taskAuditLogs []*entity.TaskAuditLog, err error) *TaskRepositoryMock_GetAuditLogs_Call {
	_c.Call.Return(taskAuditLogs, err)
	return _c
}

func (_c *TaskRepositoryMock_GetAuditLogs_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, limit *int) ([]*entity.TaskAuditLog, error)) *TaskRepositoryMock_GetAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TaskRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *TaskRepositoryMock_GetByID_Call {
	return &TaskRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *TaskRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetByID_Call) Return(task *entity.Task, err error) *TaskRepositoryMock_GetByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskRepositoryMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Task, error)) *TaskRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type TaskRepositoryMock_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskRepositoryMock_Expecter) GetByProjectID(ctx interface{}, projectID interface{}) *TaskRepositoryMock_GetByProjectID_Call {
	return &TaskRepositoryMock_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", ctx, projectID)}
}

func (_c *TaskRepositoryMock_GetByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskRepositoryMock_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetByProjectID_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetByProjectID_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error)) *TaskRepositoryMock_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetByStatus(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatus) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskStatus) []*entity.Task); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type TaskRepositoryMock_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *TaskRepositoryMock_Expecter) GetByStatus(ctx interface{}, status interface{}) *TaskRepositoryMock_GetByStatus_Call {
	return &TaskRepositoryMock_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, status)}
}

func (_c *TaskRepositoryMock_GetByStatus_Call) Run(run func(ctx context.Context, status entity.TaskStatus)) *TaskRepositoryMock_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskStatus))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetByStatus_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetByStatus_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.TaskStatus) ([]*entity.Task, error)) *TaskRepositoryMock_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatuses provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetByStatuses(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatuses")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.TaskStatus) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, statuses)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.TaskStatus) []*entity.Task); ok {
		r0 = returnFunc(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []entity.TaskStatus) error); ok {
		r1 = returnFunc(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetByStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatuses'
type TaskRepositoryMock_GetByStatuses_Call struct {
	*mock.Call
}

// GetByStatuses is a helper method to define mock.On call
//   - ctx
//   - statuses
func (_e *TaskRepositoryMock_Expecter) GetByStatuses(ctx interface{}, statuses interface{}) *TaskRepositoryMock_GetByStatuses_Call {
	return &TaskRepositoryMock_GetByStatuses_Call{Call: _e.mock.On("GetByStatuses", ctx, statuses)}
}

func (_c *TaskRepositoryMock_GetByStatuses_Call) Run(run func(ctx context.Context, statuses []entity.TaskStatus)) *TaskRepositoryMock_GetByStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.TaskStatus))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetByStatuses_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetByStatuses_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetByStatuses_Call) RunAndReturn(run func(ctx context.Context, statuses []entity.TaskStatus) ([]*entity.Task, error)) *TaskRepositoryMock_GetByStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetComments provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetComments(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []*entity.TaskComment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskComment, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskComment); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type TaskRepositoryMock_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) GetComments(ctx interface{}, taskID interface{}) *TaskRepositoryMock_GetComments_Call {
	return &TaskRepositoryMock_GetComments_Call{Call: _e.mock.On("GetComments", ctx, taskID)}
}

func (_c *TaskRepositoryMock_GetComments_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetComments_Call) Return(taskComments []*entity.TaskComment, err error) *TaskRepositoryMock_GetComments_Call {
	_c.Call.Return(taskComments, err)
	return _c
}

func (_c *TaskRepositoryMock_GetComments_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskComment, error)) *TaskRepositoryMock_GetComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencies provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetDependencies(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencies")
	}

	var r0 []*entity.TaskDependency
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskDependency, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskDependency); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskDependency)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencies'
type TaskRepositoryMock_GetDependencies_Call struct {
	*mock.Call
}

// GetDependencies is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) GetDependencies(ctx interface{}, taskID interface{}) *TaskRepositoryMock_GetDependencies_Call {
	return &TaskRepositoryMock_GetDependencies_Call{Call: _e.mock.On("GetDependencies", ctx, taskID)}
}

func (_c *TaskRepositoryMock_GetDependencies_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_GetDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetDependencies_Call) Return(taskDependencys []*entity.TaskDependency, err error) *TaskRepositoryMock_GetDependencies_Call {
	_c.Call.Return(taskDependencys, err)
	return _c
}

func (_c *TaskRepositoryMock_GetDependencies_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error)) *TaskRepositoryMock_GetDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependents provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetDependents(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependents")
	}

	var r0 []*entity.TaskDependency
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskDependency, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskDependency); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskDependency)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetDependents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependents'
type TaskRepositoryMock_GetDependents_Call struct {
	*mock.Call
}

// GetDependents is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) GetDependents(ctx interface{}, taskID interface{}) *TaskRepositoryMock_GetDependents_Call {
	return &TaskRepositoryMock_GetDependents_Call{Call: _e.mock.On("GetDependents", ctx, taskID)}
}

func (_c *TaskRepositoryMock_GetDependents_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_GetDependents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetDependents_Call) Return(taskDependencys []*entity.TaskDependency, err error) *TaskRepositoryMock_GetDependents_Call {
	_c.Call.Return(taskDependencys, err)
	return _c
}

func (_c *TaskRepositoryMock_GetDependents_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskDependency, error)) *TaskRepositoryMock_GetDependents_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentTask provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetParentTask(ctx context.Context, taskID uuid.UUID) (*entity.Task, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetParentTask")
	}

	var r0 *entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetParentTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentTask'
type TaskRepositoryMock_GetParentTask_Call struct {
	*mock.Call
}

// GetParentTask is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) GetParentTask(ctx interface{}, taskID interface{}) *TaskRepositoryMock_GetParentTask_Call {
	return &TaskRepositoryMock_GetParentTask_Call{Call: _e.mock.On("GetParentTask", ctx, taskID)}
}

func (_c *TaskRepositoryMock_GetParentTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_GetParentTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetParentTask_Call) Return(task *entity.Task, err error) *TaskRepositoryMock_GetParentTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskRepositoryMock_GetParentTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.Task, error)) *TaskRepositoryMock_GetParentTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusAnalytics provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetStatusAnalytics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusAnalytics")
	}

	var r0 *entity.TaskStatusAnalytics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskStatusAnalytics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskStatusAnalytics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskStatusAnalytics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetStatusAnalytics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusAnalytics'
type TaskRepositoryMock_GetStatusAnalytics_Call struct {
	*mock.Call
}

// GetStatusAnalytics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskRepositoryMock_Expecter) GetStatusAnalytics(ctx interface{}, projectID interface{}) *TaskRepositoryMock_GetStatusAnalytics_Call {
	return &TaskRepositoryMock_GetStatusAnalytics_Call{Call: _e.mock.On("GetStatusAnalytics", ctx, projectID)}
}

func (_c *TaskRepositoryMock_GetStatusAnalytics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskRepositoryMock_GetStatusAnalytics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetStatusAnalytics_Call) Return(taskStatusAnalytics *entity.TaskStatusAnalytics, err error) *TaskRepositoryMock_GetStatusAnalytics_Call {
	_c.Call.Return(taskStatusAnalytics, err)
	return _c
}

func (_c *TaskRepositoryMock_GetStatusAnalytics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatusAnalytics, error)) *TaskRepositoryMock_GetStatusAnalytics_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusHistory provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetStatusHistory(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusHistory")
	}

	var r0 []*entity.TaskStatusHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.TaskStatusHistory, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.TaskStatusHistory); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskStatusHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetStatusHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusHistory'
type TaskRepositoryMock_GetStatusHistory_Call struct {
	*mock.Call
}

// GetStatusHistory is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) GetStatusHistory(ctx interface{}, taskID interface{}) *TaskRepositoryMock_GetStatusHistory_Call {
	return &TaskRepositoryMock_GetStatusHistory_Call{Call: _e.mock.On("GetStatusHistory", ctx, taskID)}
}

func (_c *TaskRepositoryMock_GetStatusHistory_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_GetStatusHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetStatusHistory_Call) Return(taskStatusHistorys []*entity.TaskStatusHistory, err error) *TaskRepositoryMock_GetStatusHistory_Call {
	_c.Call.Return(taskStatusHistorys, err)
	return _c
}

func (_c *TaskRepositoryMock_GetStatusHistory_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) ([]*entity.TaskStatusHistory, error)) *TaskRepositoryMock_GetStatusHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubtasks provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetSubtasks(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, parentTaskID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubtasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, parentTaskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, parentTaskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, parentTaskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubtasks'
type TaskRepositoryMock_GetSubtasks_Call struct {
	*mock.Call
}

// GetSubtasks is a helper method to define mock.On call
//   - ctx
//   - parentTaskID
func (_e *TaskRepositoryMock_Expecter) GetSubtasks(ctx interface{}, parentTaskID interface{}) *TaskRepositoryMock_GetSubtasks_Call {
	return &TaskRepositoryMock_GetSubtasks_Call{Call: _e.mock.On("GetSubtasks", ctx, parentTaskID)}
}

func (_c *TaskRepositoryMock_GetSubtasks_Call) Run(run func(ctx context.Context, parentTaskID uuid.UUID)) *TaskRepositoryMock_GetSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetSubtasks_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetSubtasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetSubtasks_Call) RunAndReturn(run func(ctx context.Context, parentTaskID uuid.UUID) ([]*entity.Task, error)) *TaskRepositoryMock_GetSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatistics provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTaskStatistics(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatistics")
	}

	var r0 *entity.TaskStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskStatistics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskStatistics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTaskStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatistics'
type TaskRepositoryMock_GetTaskStatistics_Call struct {
	*mock.Call
}

// GetTaskStatistics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskRepositoryMock_Expecter) GetTaskStatistics(ctx interface{}, projectID interface{}) *TaskRepositoryMock_GetTaskStatistics_Call {
	return &TaskRepositoryMock_GetTaskStatistics_Call{Call: _e.mock.On("GetTaskStatistics", ctx, projectID)}
}

func (_c *TaskRepositoryMock_GetTaskStatistics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskRepositoryMock_GetTaskStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTaskStatistics_Call) Return(taskStatistics *entity.TaskStatistics, err error) *TaskRepositoryMock_GetTaskStatistics_Call {
	_c.Call.Return(taskStatistics, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTaskStatistics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.TaskStatistics, error)) *TaskRepositoryMock_GetTaskStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByPriority provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTasksByPriority(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, priority)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByPriority")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskPriority) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, priority)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskPriority) []*entity.Task); ok {
		r0 = returnFunc(ctx, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskPriority) error); ok {
		r1 = returnFunc(ctx, priority)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTasksByPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByPriority'
type TaskRepositoryMock_GetTasksByPriority_Call struct {
	*mock.Call
}

// GetTasksByPriority is a helper method to define mock.On call
//   - ctx
//   - priority
func (_e *TaskRepositoryMock_Expecter) GetTasksByPriority(ctx interface{}, priority interface{}) *TaskRepositoryMock_GetTasksByPriority_Call {
	return &TaskRepositoryMock_GetTasksByPriority_Call{Call: _e.mock.On("GetTasksByPriority", ctx, priority)}
}

func (_c *TaskRepositoryMock_GetTasksByPriority_Call) Run(run func(ctx context.Context, priority entity.TaskPriority)) *TaskRepositoryMock_GetTasksByPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskPriority))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTasksByPriority_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetTasksByPriority_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTasksByPriority_Call) RunAndReturn(run func(ctx context.Context, priority entity.TaskPriority) ([]*entity.Task, error)) *TaskRepositoryMock_GetTasksByPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByTags provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTasksByTags(ctx context.Context, tags []string) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, tags)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByTags")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, tags)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []*entity.Task); ok {
		r0 = returnFunc(ctx, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, tags)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTasksByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByTags'
type TaskRepositoryMock_GetTasksByTags_Call struct {
	*mock.Call
}

// GetTasksByTags is a helper method to define mock.On call
//   - ctx
//   - tags
func (_e *TaskRepositoryMock_Expecter) GetTasksByTags(ctx interface{}, tags interface{}) *TaskRepositoryMock_GetTasksByTags_Call {
	return &TaskRepositoryMock_GetTasksByTags_Call{Call: _e.mock.On("GetTasksByTags", ctx, tags)}
}

func (_c *TaskRepositoryMock_GetTasksByTags_Call) Run(run func(ctx context.Context, tags []string)) *TaskRepositoryMock_GetTasksByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTasksByTags_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetTasksByTags_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTasksByTags_Call) RunAndReturn(run func(ctx context.Context, tags []string) ([]*entity.Task, error)) *TaskRepositoryMock_GetTasksByTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksWithFilters provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTasksWithFilters(ctx context.Context, filters entity.TaskFilters) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksWithFilters")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.TaskFilters) []*entity.Task); ok {
		r0 = returnFunc(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.TaskFilters) error); ok {
		r1 = returnFunc(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTasksWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithFilters'
type TaskRepositoryMock_GetTasksWithFilters_Call struct {
	*mock.Call
}

// GetTasksWithFilters is a helper method to define mock.On call
//   - ctx
//   - filters
func (_e *TaskRepositoryMock_Expecter) GetTasksWithFilters(ctx interface{}, filters interface{}) *TaskRepositoryMock_GetTasksWithFilters_Call {
	return &TaskRepositoryMock_GetTasksWithFilters_Call{Call: _e.mock.On("GetTasksWithFilters", ctx, filters)}
}

func (_c *TaskRepositoryMock_GetTasksWithFilters_Call) Run(run func(ctx context.Context, filters entity.TaskFilters)) *TaskRepositoryMock_GetTasksWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TaskFilters))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTasksWithFilters_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetTasksWithFilters_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTasksWithFilters_Call) RunAndReturn(run func(ctx context.Context, filters entity.TaskFilters) ([]*entity.Task, error)) *TaskRepositoryMock_GetTasksWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksWithSubtasks provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTasksWithSubtasks(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksWithSubtasks")
	}

	var r0 []*entity.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Task, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Task); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTasksWithSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithSubtasks'
type TaskRepositoryMock_GetTasksWithSubtasks_Call struct {
	*mock.Call
}

// GetTasksWithSubtasks is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskRepositoryMock_Expecter) GetTasksWithSubtasks(ctx interface{}, projectID interface{}) *TaskRepositoryMock_GetTasksWithSubtasks_Call {
	return &TaskRepositoryMock_GetTasksWithSubtasks_Call{Call: _e.mock.On("GetTasksWithSubtasks", ctx, projectID)}
}

func (_c *TaskRepositoryMock_GetTasksWithSubtasks_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskRepositoryMock_GetTasksWithSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTasksWithSubtasks_Call) Return(tasks []*entity.Task, err error) *TaskRepositoryMock_GetTasksWithSubtasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTasksWithSubtasks_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Task, error)) *TaskRepositoryMock_GetTasksWithSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateByID provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTemplateByID(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateByID")
	}

	var r0 *entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTemplateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateByID'
type TaskRepositoryMock_GetTemplateByID_Call struct {
	*mock.Call
}

// GetTemplateByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *TaskRepositoryMock_Expecter) GetTemplateByID(ctx interface{}, id interface{}) *TaskRepositoryMock_GetTemplateByID_Call {
	return &TaskRepositoryMock_GetTemplateByID_Call{Call: _e.mock.On("GetTemplateByID", ctx, id)}
}

func (_c *TaskRepositoryMock_GetTemplateByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TaskRepositoryMock_GetTemplateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTemplateByID_Call) Return(taskTemplate *entity.TaskTemplate, err error) *TaskRepositoryMock_GetTemplateByID_Call {
	_c.Call.Return(taskTemplate, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTemplateByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.TaskTemplate, error)) *TaskRepositoryMock_GetTemplateByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplates provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) GetTemplates(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error) {
	ret := _mock.Called(ctx, projectID, includeGlobal)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplates")
	}

	var r0 []*entity.TaskTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) ([]*entity.TaskTemplate, error)); ok {
		return returnFunc(ctx, projectID, includeGlobal)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) []*entity.TaskTemplate); ok {
		r0 = returnFunc(ctx, projectID, includeGlobal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, projectID, includeGlobal)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_GetTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplates'
type TaskRepositoryMock_GetTemplates_Call struct {
	*mock.Call
}

// GetTemplates is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - includeGlobal
func (_e *TaskRepositoryMock_Expecter) GetTemplates(ctx interface{}, projectID interface{}, includeGlobal interface{}) *TaskRepositoryMock_GetTemplates_Call {
	return &TaskRepositoryMock_GetTemplates_Call{Call: _e.mock.On("GetTemplates", ctx, projectID, includeGlobal)}
}

func (_c *TaskRepositoryMock_GetTemplates_Call) Run(run func(ctx context.Context, projectID uuid.UUID, includeGlobal bool)) *TaskRepositoryMock_GetTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *TaskRepositoryMock_GetTemplates_Call) Return(taskTemplates []*entity.TaskTemplate, err error) *TaskRepositoryMock_GetTemplates_Call {
	_c.Call.Return(taskTemplates, err)
	return _c
}

func (_c *TaskRepositoryMock_GetTemplates_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, includeGlobal bool) ([]*entity.TaskTemplate, error)) *TaskRepositoryMock_GetTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDependency provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) RemoveDependency(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error {
	ret := _mock.Called(ctx, taskID, dependsOnTaskID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDependency")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID, dependsOnTaskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_RemoveDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDependency'
type TaskRepositoryMock_RemoveDependency_Call struct {
	*mock.Call
}

// RemoveDependency is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - dependsOnTaskID
func (_e *TaskRepositoryMock_Expecter) RemoveDependency(ctx interface{}, taskID interface{}, dependsOnTaskID interface{}) *TaskRepositoryMock_RemoveDependency_Call {
	return &TaskRepositoryMock_RemoveDependency_Call{Call: _e.mock.On("RemoveDependency", ctx, taskID, dependsOnTaskID)}
}

func (_c *TaskRepositoryMock_RemoveDependency_Call) Run(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID)) *TaskRepositoryMock_RemoveDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_RemoveDependency_Call) Return(err error) *TaskRepositoryMock_RemoveDependency_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_RemoveDependency_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, dependsOnTaskID uuid.UUID) error) *TaskRepositoryMock_RemoveDependency_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTasks provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) SearchTasks(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error) {
	ret := _mock.Called(ctx, query, projectID)

	if len(ret) == 0 {
		panic("no return value specified for SearchTasks")
	}

	var r0 []*entity.TaskSearchResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) ([]*entity.TaskSearchResult, error)); ok {
		return returnFunc(ctx, query, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) []*entity.TaskSearchResult); ok {
		r0 = returnFunc(ctx, query, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.TaskSearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, query, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_SearchTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTasks'
type TaskRepositoryMock_SearchTasks_Call struct {
	*mock.Call
}

// SearchTasks is a helper method to define mock.On call
//   - ctx
//   - query
//   - projectID
func (_e *TaskRepositoryMock_Expecter) SearchTasks(ctx interface{}, query interface{}, projectID interface{}) *TaskRepositoryMock_SearchTasks_Call {
	return &TaskRepositoryMock_SearchTasks_Call{Call: _e.mock.On("SearchTasks", ctx, query, projectID)}
}

func (_c *TaskRepositoryMock_SearchTasks_Call) Run(run func(ctx context.Context, query string, projectID *uuid.UUID)) *TaskRepositoryMock_SearchTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_SearchTasks_Call) Return(taskSearchResults []*entity.TaskSearchResult, err error) *TaskRepositoryMock_SearchTasks_Call {
	_c.Call.Return(taskSearchResults, err)
	return _c
}

func (_c *TaskRepositoryMock_SearchTasks_Call) RunAndReturn(run func(ctx context.Context, query string, projectID *uuid.UUID) ([]*entity.TaskSearchResult, error)) *TaskRepositoryMock_SearchTasks_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) Update(ctx context.Context, task *entity.Task) error {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Task) error); ok {
		r0 = returnFunc(ctx, task)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TaskRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - task
func (_e *TaskRepositoryMock_Expecter) Update(ctx interface{}, task interface{}) *TaskRepositoryMock_Update_Call {
	return &TaskRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, task)}
}

func (_c *TaskRepositoryMock_Update_Call) Run(run func(ctx context.Context, task *entity.Task)) *TaskRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Task))
	})
	return _c
}

func (_c *TaskRepositoryMock_Update_Call) Return(err error) *TaskRepositoryMock_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_Update_Call) RunAndReturn(run func(ctx context.Context, task *entity.Task) error) *TaskRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) UpdateComment(ctx context.Context, comment *entity.TaskComment) error {
	ret := _mock.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.TaskComment) error); ok {
		r0 = returnFunc(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type TaskRepositoryMock_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx
//   - comment
func (_e *TaskRepositoryMock_Expecter) UpdateComment(ctx interface{}, comment interface{}) *TaskRepositoryMock_UpdateComment_Call {
	return &TaskRepositoryMock_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, comment)}
}

func (_c *TaskRepositoryMock_UpdateComment_Call) Run(run func(ctx context.Context, comment *entity.TaskComment)) *TaskRepositoryMock_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TaskComment))
	})
	return _c
}

func (_c *TaskRepositoryMock_UpdateComment_Call) Return(err error) *TaskRepositoryMock_UpdateComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_UpdateComment_Call) RunAndReturn(run func(ctx context.Context, comment *entity.TaskComment) error) *TaskRepositoryMock_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParentTask provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) UpdateParentTask(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error {
	ret := _mock.Called(ctx, taskID, parentTaskID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParentTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskID, parentTaskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_UpdateParentTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParentTask'
type TaskRepositoryMock_UpdateParentTask_Call struct {
	*mock.Call
}

// UpdateParentTask is a helper method to define mock.On call
//   - ctx
//   - taskID
//   - parentTaskID
func (_e *TaskRepositoryMock_Expecter) UpdateParentTask(ctx interface{}, taskID interface{}, parentTaskID interface{}) *TaskRepositoryMock_UpdateParentTask_Call {
	return &TaskRepositoryMock_UpdateParentTask_Call{Call: _e.mock.On("UpdateParentTask", ctx, taskID, parentTaskID)}
}

func (_c *TaskRepositoryMock_UpdateParentTask_Call) Run(run func(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID)) *TaskRepositoryMock_UpdateParentTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_UpdateParentTask_Call) Return(err error) *TaskRepositoryMock_UpdateParentTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_UpdateParentTask_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID, parentTaskID *uuid.UUID) error) *TaskRepositoryMock_UpdateParentTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.TaskStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type TaskRepositoryMock_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *TaskRepositoryMock_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *TaskRepositoryMock_UpdateStatus_Call {
	return &TaskRepositoryMock_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *TaskRepositoryMock_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus)) *TaskRepositoryMock_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskStatus))
	})
	return _c
}

func (_c *TaskRepositoryMock_UpdateStatus_Call) Return(err error) *TaskRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus) error) *TaskRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusWithHistory provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) UpdateStatusWithHistory(ctx context.Context, id uuid.UUID, status entity.TaskStatus, changedBy *string, reason *string) error {
	ret := _mock.Called(ctx, id, status, changedBy, reason)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusWithHistory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.TaskStatus, *string, *string) error); ok {
		r0 = returnFunc(ctx, id, status, changedBy, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_UpdateStatusWithHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusWithHistory'
type TaskRepositoryMock_UpdateStatusWithHistory_Call struct {
	*mock.Call
}

// UpdateStatusWithHistory is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
//   - changedBy
//   - reason
func (_e *TaskRepositoryMock_Expecter) UpdateStatusWithHistory(ctx interface{}, id interface{}, status interface{}, changedBy interface{}, reason interface{}) *TaskRepositoryMock_UpdateStatusWithHistory_Call {
	return &TaskRepositoryMock_UpdateStatusWithHistory_Call{Call: _e.mock.On("UpdateStatusWithHistory", ctx, id, status, changedBy, reason)}
}

func (_c *TaskRepositoryMock_UpdateStatusWithHistory_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus, changedBy *string, reason *string)) *TaskRepositoryMock_UpdateStatusWithHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.TaskStatus), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *TaskRepositoryMock_UpdateStatusWithHistory_Call) Return(err error) *TaskRepositoryMock_UpdateStatusWithHistory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_UpdateStatusWithHistory_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.TaskStatus, changedBy *string, reason *string) error) *TaskRepositoryMock_UpdateStatusWithHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTemplate provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) UpdateTemplate(ctx context.Context, template *entity.TaskTemplate) error {
	ret := _mock.Called(ctx, template)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.TaskTemplate) error); ok {
		r0 = returnFunc(ctx, template)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepositoryMock_UpdateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplate'
type TaskRepositoryMock_UpdateTemplate_Call struct {
	*mock.Call
}

// UpdateTemplate is a helper method to define mock.On call
//   - ctx
//   - template
func (_e *TaskRepositoryMock_Expecter) UpdateTemplate(ctx interface{}, template interface{}) *TaskRepositoryMock_UpdateTemplate_Call {
	return &TaskRepositoryMock_UpdateTemplate_Call{Call: _e.mock.On("UpdateTemplate", ctx, template)}
}

func (_c *TaskRepositoryMock_UpdateTemplate_Call) Run(run func(ctx context.Context, template *entity.TaskTemplate)) *TaskRepositoryMock_UpdateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TaskTemplate))
	})
	return _c
}

func (_c *TaskRepositoryMock_UpdateTemplate_Call) Return(err error) *TaskRepositoryMock_UpdateTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepositoryMock_UpdateTemplate_Call) RunAndReturn(run func(ctx context.Context, template *entity.TaskTemplate) error) *TaskRepositoryMock_UpdateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProjectExists provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) ValidateProjectExists(ctx context.Context, projectID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProjectExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_ValidateProjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProjectExists'
type TaskRepositoryMock_ValidateProjectExists_Call struct {
	*mock.Call
}

// ValidateProjectExists is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *TaskRepositoryMock_Expecter) ValidateProjectExists(ctx interface{}, projectID interface{}) *TaskRepositoryMock_ValidateProjectExists_Call {
	return &TaskRepositoryMock_ValidateProjectExists_Call{Call: _e.mock.On("ValidateProjectExists", ctx, projectID)}
}

func (_c *TaskRepositoryMock_ValidateProjectExists_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *TaskRepositoryMock_ValidateProjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_ValidateProjectExists_Call) Return(b bool, err error) *TaskRepositoryMock_ValidateProjectExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *TaskRepositoryMock_ValidateProjectExists_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (bool, error)) *TaskRepositoryMock_ValidateProjectExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTaskExists provides a mock function for the type TaskRepositoryMock
func (_mock *TaskRepositoryMock) ValidateTaskExists(ctx context.Context, taskID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTaskExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepositoryMock_ValidateTaskExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTaskExists'
type TaskRepositoryMock_ValidateTaskExists_Call struct {
	*mock.Call
}

// ValidateTaskExists is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *TaskRepositoryMock_Expecter) ValidateTaskExists(ctx interface{}, taskID interface{}) *TaskRepositoryMock_ValidateTaskExists_Call {
	return &TaskRepositoryMock_ValidateTaskExists_Call{Call: _e.mock.On("ValidateTaskExists", ctx, taskID)}
}

func (_c *TaskRepositoryMock_ValidateTaskExists_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *TaskRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TaskRepositoryMock_ValidateTaskExists_Call) Return(b bool, err error) *TaskRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *TaskRepositoryMock_ValidateTaskExists_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (bool, error)) *TaskRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Return(run)
	return _c
}
