// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewWorktreeRepositoryMock creates a new instance of WorktreeRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorktreeRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorktreeRepositoryMock {
	mock := &WorktreeRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WorktreeRepositoryMock is an autogenerated mock type for the WorktreeRepository type
type WorktreeRepositoryMock struct {
	mock.Mock
}

type WorktreeRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WorktreeRepositoryMock) EXPECT() *WorktreeRepositoryMock_Expecter {
	return &WorktreeRepositoryMock_Expecter{mock: &_m.Mock}
}

// BulkDelete provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) BulkDelete(ctx context.Context, worktreeIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, worktreeIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, worktreeIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type WorktreeRepositoryMock_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - worktreeIDs
func (_e *WorktreeRepositoryMock_Expecter) BulkDelete(ctx interface{}, worktreeIDs interface{}) *WorktreeRepositoryMock_BulkDelete_Call {
	return &WorktreeRepositoryMock_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, worktreeIDs)}
}

func (_c *WorktreeRepositoryMock_BulkDelete_Call) Run(run func(ctx context.Context, worktreeIDs []uuid.UUID)) *WorktreeRepositoryMock_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_BulkDelete_Call) Return(err error) *WorktreeRepositoryMock_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, worktreeIDs []uuid.UUID) error) *WorktreeRepositoryMock_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDeleteByProjectID provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) BulkDeleteByProjectID(ctx context.Context, projectID uuid.UUID) error {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for BulkDeleteByProjectID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_BulkDeleteByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteByProjectID'
type WorktreeRepositoryMock_BulkDeleteByProjectID_Call struct {
	*mock.Call
}

// BulkDeleteByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *WorktreeRepositoryMock_Expecter) BulkDeleteByProjectID(ctx interface{}, projectID interface{}) *WorktreeRepositoryMock_BulkDeleteByProjectID_Call {
	return &WorktreeRepositoryMock_BulkDeleteByProjectID_Call{Call: _e.mock.On("BulkDeleteByProjectID", ctx, projectID)}
}

func (_c *WorktreeRepositoryMock_BulkDeleteByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WorktreeRepositoryMock_BulkDeleteByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_BulkDeleteByProjectID_Call) Return(err error) *WorktreeRepositoryMock_BulkDeleteByProjectID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_BulkDeleteByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) error) *WorktreeRepositoryMock_BulkDeleteByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDeleteByTaskIDs provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) BulkDeleteByTaskIDs(ctx context.Context, taskIDs []uuid.UUID) error {
	ret := _mock.Called(ctx, taskIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkDeleteByTaskIDs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, taskIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteByTaskIDs'
type WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call struct {
	*mock.Call
}

// BulkDeleteByTaskIDs is a helper method to define mock.On call
//   - ctx
//   - taskIDs
func (_e *WorktreeRepositoryMock_Expecter) BulkDeleteByTaskIDs(ctx interface{}, taskIDs interface{}) *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call {
	return &WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call{Call: _e.mock.On("BulkDeleteByTaskIDs", ctx, taskIDs)}
}

func (_c *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID)) *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call) Return(err error) *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID) error) *WorktreeRepositoryMock_BulkDeleteByTaskIDs_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpdateStatus provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) BulkUpdateStatus(ctx context.Context, ids []uuid.UUID, status entity.WorktreeStatus) error {
	ret := _mock.Called(ctx, ids, status)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, entity.WorktreeStatus) error); ok {
		r0 = returnFunc(ctx, ids, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_BulkUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateStatus'
type WorktreeRepositoryMock_BulkUpdateStatus_Call struct {
	*mock.Call
}

// BulkUpdateStatus is a helper method to define mock.On call
//   - ctx
//   - ids
//   - status
func (_e *WorktreeRepositoryMock_Expecter) BulkUpdateStatus(ctx interface{}, ids interface{}, status interface{}) *WorktreeRepositoryMock_BulkUpdateStatus_Call {
	return &WorktreeRepositoryMock_BulkUpdateStatus_Call{Call: _e.mock.On("BulkUpdateStatus", ctx, ids, status)}
}

func (_c *WorktreeRepositoryMock_BulkUpdateStatus_Call) Run(run func(ctx context.Context, ids []uuid.UUID, status entity.WorktreeStatus)) *WorktreeRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(entity.WorktreeStatus))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_BulkUpdateStatus_Call) Return(err error) *WorktreeRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_BulkUpdateStatus_Call) RunAndReturn(run func(ctx context.Context, ids []uuid.UUID, status entity.WorktreeStatus) error) *WorktreeRepositoryMock_BulkUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDuplicateBranchName provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) CheckDuplicateBranchName(ctx context.Context, projectID uuid.UUID, branchName string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, projectID, branchName, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicateBranchName")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, projectID, branchName, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, projectID, branchName, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID, branchName, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_CheckDuplicateBranchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicateBranchName'
type WorktreeRepositoryMock_CheckDuplicateBranchName_Call struct {
	*mock.Call
}

// CheckDuplicateBranchName is a helper method to define mock.On call
//   - ctx
//   - projectID
//   - branchName
//   - excludeID
func (_e *WorktreeRepositoryMock_Expecter) CheckDuplicateBranchName(ctx interface{}, projectID interface{}, branchName interface{}, excludeID interface{}) *WorktreeRepositoryMock_CheckDuplicateBranchName_Call {
	return &WorktreeRepositoryMock_CheckDuplicateBranchName_Call{Call: _e.mock.On("CheckDuplicateBranchName", ctx, projectID, branchName, excludeID)}
}

func (_c *WorktreeRepositoryMock_CheckDuplicateBranchName_Call) Run(run func(ctx context.Context, projectID uuid.UUID, branchName string, excludeID *uuid.UUID)) *WorktreeRepositoryMock_CheckDuplicateBranchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_CheckDuplicateBranchName_Call) Return(b bool, err error) *WorktreeRepositoryMock_CheckDuplicateBranchName_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *WorktreeRepositoryMock_CheckDuplicateBranchName_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID, branchName string, excludeID *uuid.UUID) (bool, error)) *WorktreeRepositoryMock_CheckDuplicateBranchName_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDuplicateWorktreePath provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) CheckDuplicateWorktreePath(ctx context.Context, worktreePath string, excludeID *uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, worktreePath, excludeID)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicateWorktreePath")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, worktreePath, excludeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, worktreePath, excludeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, worktreePath, excludeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicateWorktreePath'
type WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call struct {
	*mock.Call
}

// CheckDuplicateWorktreePath is a helper method to define mock.On call
//   - ctx
//   - worktreePath
//   - excludeID
func (_e *WorktreeRepositoryMock_Expecter) CheckDuplicateWorktreePath(ctx interface{}, worktreePath interface{}, excludeID interface{}) *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call {
	return &WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call{Call: _e.mock.On("CheckDuplicateWorktreePath", ctx, worktreePath, excludeID)}
}

func (_c *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call) Run(run func(ctx context.Context, worktreePath string, excludeID *uuid.UUID)) *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call) Return(b bool, err error) *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call) RunAndReturn(run func(ctx context.Context, worktreePath string, excludeID *uuid.UUID) (bool, error)) *WorktreeRepositoryMock_CheckDuplicateWorktreePath_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupCompletedWorktrees provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) CleanupCompletedWorktrees(ctx context.Context, olderThanDays int) error {
	ret := _mock.Called(ctx, olderThanDays)

	if len(ret) == 0 {
		panic("no return value specified for CleanupCompletedWorktrees")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, olderThanDays)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_CleanupCompletedWorktrees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupCompletedWorktrees'
type WorktreeRepositoryMock_CleanupCompletedWorktrees_Call struct {
	*mock.Call
}

// CleanupCompletedWorktrees is a helper method to define mock.On call
//   - ctx
//   - olderThanDays
func (_e *WorktreeRepositoryMock_Expecter) CleanupCompletedWorktrees(ctx interface{}, olderThanDays interface{}) *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call {
	return &WorktreeRepositoryMock_CleanupCompletedWorktrees_Call{Call: _e.mock.On("CleanupCompletedWorktrees", ctx, olderThanDays)}
}

func (_c *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call) Run(run func(ctx context.Context, olderThanDays int)) *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call) Return(err error) *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call) RunAndReturn(run func(ctx context.Context, olderThanDays int) error) *WorktreeRepositoryMock_CleanupCompletedWorktrees_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupErrorWorktrees provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) CleanupErrorWorktrees(ctx context.Context, olderThanDays int) error {
	ret := _mock.Called(ctx, olderThanDays)

	if len(ret) == 0 {
		panic("no return value specified for CleanupErrorWorktrees")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, olderThanDays)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_CleanupErrorWorktrees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupErrorWorktrees'
type WorktreeRepositoryMock_CleanupErrorWorktrees_Call struct {
	*mock.Call
}

// CleanupErrorWorktrees is a helper method to define mock.On call
//   - ctx
//   - olderThanDays
func (_e *WorktreeRepositoryMock_Expecter) CleanupErrorWorktrees(ctx interface{}, olderThanDays interface{}) *WorktreeRepositoryMock_CleanupErrorWorktrees_Call {
	return &WorktreeRepositoryMock_CleanupErrorWorktrees_Call{Call: _e.mock.On("CleanupErrorWorktrees", ctx, olderThanDays)}
}

func (_c *WorktreeRepositoryMock_CleanupErrorWorktrees_Call) Run(run func(ctx context.Context, olderThanDays int)) *WorktreeRepositoryMock_CleanupErrorWorktrees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_CleanupErrorWorktrees_Call) Return(err error) *WorktreeRepositoryMock_CleanupErrorWorktrees_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_CleanupErrorWorktrees_Call) RunAndReturn(run func(ctx context.Context, olderThanDays int) error) *WorktreeRepositoryMock_CleanupErrorWorktrees_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) Create(ctx context.Context, worktree *entity.Worktree) error {
	ret := _mock.Called(ctx, worktree)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Worktree) error); ok {
		r0 = returnFunc(ctx, worktree)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type WorktreeRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - worktree
func (_e *WorktreeRepositoryMock_Expecter) Create(ctx interface{}, worktree interface{}) *WorktreeRepositoryMock_Create_Call {
	return &WorktreeRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, worktree)}
}

func (_c *WorktreeRepositoryMock_Create_Call) Run(run func(ctx context.Context, worktree *entity.Worktree)) *WorktreeRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Worktree))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_Create_Call) Return(err error) *WorktreeRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, worktree *entity.Worktree) error) *WorktreeRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type WorktreeRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *WorktreeRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *WorktreeRepositoryMock_Delete_Call {
	return &WorktreeRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *WorktreeRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *WorktreeRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_Delete_Call) Return(err error) *WorktreeRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *WorktreeRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveWorktreesCount provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetActiveWorktreesCount(ctx context.Context, projectID uuid.UUID) (int, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveWorktreesCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetActiveWorktreesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveWorktreesCount'
type WorktreeRepositoryMock_GetActiveWorktreesCount_Call struct {
	*mock.Call
}

// GetActiveWorktreesCount is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *WorktreeRepositoryMock_Expecter) GetActiveWorktreesCount(ctx interface{}, projectID interface{}) *WorktreeRepositoryMock_GetActiveWorktreesCount_Call {
	return &WorktreeRepositoryMock_GetActiveWorktreesCount_Call{Call: _e.mock.On("GetActiveWorktreesCount", ctx, projectID)}
}

func (_c *WorktreeRepositoryMock_GetActiveWorktreesCount_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WorktreeRepositoryMock_GetActiveWorktreesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetActiveWorktreesCount_Call) Return(n int, err error) *WorktreeRepositoryMock_GetActiveWorktreesCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetActiveWorktreesCount_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (int, error)) *WorktreeRepositoryMock_GetActiveWorktreesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetByBranchName provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByBranchName(ctx context.Context, branchName string) ([]*entity.Worktree, error) {
	ret := _mock.Called(ctx, branchName)

	if len(ret) == 0 {
		panic("no return value specified for GetByBranchName")
	}

	var r0 []*entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*entity.Worktree, error)); ok {
		return returnFunc(ctx, branchName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*entity.Worktree); ok {
		r0 = returnFunc(ctx, branchName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, branchName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByBranchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBranchName'
type WorktreeRepositoryMock_GetByBranchName_Call struct {
	*mock.Call
}

// GetByBranchName is a helper method to define mock.On call
//   - ctx
//   - branchName
func (_e *WorktreeRepositoryMock_Expecter) GetByBranchName(ctx interface{}, branchName interface{}) *WorktreeRepositoryMock_GetByBranchName_Call {
	return &WorktreeRepositoryMock_GetByBranchName_Call{Call: _e.mock.On("GetByBranchName", ctx, branchName)}
}

func (_c *WorktreeRepositoryMock_GetByBranchName_Call) Run(run func(ctx context.Context, branchName string)) *WorktreeRepositoryMock_GetByBranchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByBranchName_Call) Return(worktrees []*entity.Worktree, err error) *WorktreeRepositoryMock_GetByBranchName_Call {
	_c.Call.Return(worktrees, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByBranchName_Call) RunAndReturn(run func(ctx context.Context, branchName string) ([]*entity.Worktree, error)) *WorktreeRepositoryMock_GetByBranchName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Worktree, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Worktree, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Worktree); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type WorktreeRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *WorktreeRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *WorktreeRepositoryMock_GetByID_Call {
	return &WorktreeRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *WorktreeRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *WorktreeRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByID_Call) Return(worktree *entity.Worktree, err error) *WorktreeRepositoryMock_GetByID_Call {
	_c.Call.Return(worktree, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.Worktree, error)) *WorktreeRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByProjectID(ctx context.Context, projectID uuid.UUID) ([]*entity.Worktree, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []*entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.Worktree, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.Worktree); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type WorktreeRepositoryMock_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *WorktreeRepositoryMock_Expecter) GetByProjectID(ctx interface{}, projectID interface{}) *WorktreeRepositoryMock_GetByProjectID_Call {
	return &WorktreeRepositoryMock_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", ctx, projectID)}
}

func (_c *WorktreeRepositoryMock_GetByProjectID_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WorktreeRepositoryMock_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByProjectID_Call) Return(worktrees []*entity.Worktree, err error) *WorktreeRepositoryMock_GetByProjectID_Call {
	_c.Call.Return(worktrees, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByProjectID_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) ([]*entity.Worktree, error)) *WorktreeRepositoryMock_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByStatus(ctx context.Context, status entity.WorktreeStatus) ([]*entity.Worktree, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []*entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.WorktreeStatus) ([]*entity.Worktree, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.WorktreeStatus) []*entity.Worktree); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.WorktreeStatus) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type WorktreeRepositoryMock_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx
//   - status
func (_e *WorktreeRepositoryMock_Expecter) GetByStatus(ctx interface{}, status interface{}) *WorktreeRepositoryMock_GetByStatus_Call {
	return &WorktreeRepositoryMock_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, status)}
}

func (_c *WorktreeRepositoryMock_GetByStatus_Call) Run(run func(ctx context.Context, status entity.WorktreeStatus)) *WorktreeRepositoryMock_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.WorktreeStatus))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByStatus_Call) Return(worktrees []*entity.Worktree, err error) *WorktreeRepositoryMock_GetByStatus_Call {
	_c.Call.Return(worktrees, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entity.WorktreeStatus) ([]*entity.Worktree, error)) *WorktreeRepositoryMock_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatuses provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByStatuses(ctx context.Context, statuses []entity.WorktreeStatus) ([]*entity.Worktree, error) {
	ret := _mock.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatuses")
	}

	var r0 []*entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.WorktreeStatus) ([]*entity.Worktree, error)); ok {
		return returnFunc(ctx, statuses)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []entity.WorktreeStatus) []*entity.Worktree); ok {
		r0 = returnFunc(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []entity.WorktreeStatus) error); ok {
		r1 = returnFunc(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatuses'
type WorktreeRepositoryMock_GetByStatuses_Call struct {
	*mock.Call
}

// GetByStatuses is a helper method to define mock.On call
//   - ctx
//   - statuses
func (_e *WorktreeRepositoryMock_Expecter) GetByStatuses(ctx interface{}, statuses interface{}) *WorktreeRepositoryMock_GetByStatuses_Call {
	return &WorktreeRepositoryMock_GetByStatuses_Call{Call: _e.mock.On("GetByStatuses", ctx, statuses)}
}

func (_c *WorktreeRepositoryMock_GetByStatuses_Call) Run(run func(ctx context.Context, statuses []entity.WorktreeStatus)) *WorktreeRepositoryMock_GetByStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.WorktreeStatus))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByStatuses_Call) Return(worktrees []*entity.Worktree, err error) *WorktreeRepositoryMock_GetByStatuses_Call {
	_c.Call.Return(worktrees, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByStatuses_Call) RunAndReturn(run func(ctx context.Context, statuses []entity.WorktreeStatus) ([]*entity.Worktree, error)) *WorktreeRepositoryMock_GetByStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTaskID provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByTaskID(ctx context.Context, taskID uuid.UUID) (*entity.Worktree, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 *entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Worktree, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Worktree); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTaskID'
type WorktreeRepositoryMock_GetByTaskID_Call struct {
	*mock.Call
}

// GetByTaskID is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *WorktreeRepositoryMock_Expecter) GetByTaskID(ctx interface{}, taskID interface{}) *WorktreeRepositoryMock_GetByTaskID_Call {
	return &WorktreeRepositoryMock_GetByTaskID_Call{Call: _e.mock.On("GetByTaskID", ctx, taskID)}
}

func (_c *WorktreeRepositoryMock_GetByTaskID_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *WorktreeRepositoryMock_GetByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByTaskID_Call) Return(worktree *entity.Worktree, err error) *WorktreeRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(worktree, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByTaskID_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (*entity.Worktree, error)) *WorktreeRepositoryMock_GetByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByWorktreePath provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetByWorktreePath(ctx context.Context, worktreePath string) (*entity.Worktree, error) {
	ret := _mock.Called(ctx, worktreePath)

	if len(ret) == 0 {
		panic("no return value specified for GetByWorktreePath")
	}

	var r0 *entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entity.Worktree, error)); ok {
		return returnFunc(ctx, worktreePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entity.Worktree); ok {
		r0 = returnFunc(ctx, worktreePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, worktreePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetByWorktreePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByWorktreePath'
type WorktreeRepositoryMock_GetByWorktreePath_Call struct {
	*mock.Call
}

// GetByWorktreePath is a helper method to define mock.On call
//   - ctx
//   - worktreePath
func (_e *WorktreeRepositoryMock_Expecter) GetByWorktreePath(ctx interface{}, worktreePath interface{}) *WorktreeRepositoryMock_GetByWorktreePath_Call {
	return &WorktreeRepositoryMock_GetByWorktreePath_Call{Call: _e.mock.On("GetByWorktreePath", ctx, worktreePath)}
}

func (_c *WorktreeRepositoryMock_GetByWorktreePath_Call) Run(run func(ctx context.Context, worktreePath string)) *WorktreeRepositoryMock_GetByWorktreePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetByWorktreePath_Call) Return(worktree *entity.Worktree, err error) *WorktreeRepositoryMock_GetByWorktreePath_Call {
	_c.Call.Return(worktree, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetByWorktreePath_Call) RunAndReturn(run func(ctx context.Context, worktreePath string) (*entity.Worktree, error)) *WorktreeRepositoryMock_GetByWorktreePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrphanedWorktrees provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetOrphanedWorktrees(ctx context.Context) ([]*entity.Worktree, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrphanedWorktrees")
	}

	var r0 []*entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entity.Worktree, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entity.Worktree); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetOrphanedWorktrees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrphanedWorktrees'
type WorktreeRepositoryMock_GetOrphanedWorktrees_Call struct {
	*mock.Call
}

// GetOrphanedWorktrees is a helper method to define mock.On call
//   - ctx
func (_e *WorktreeRepositoryMock_Expecter) GetOrphanedWorktrees(ctx interface{}) *WorktreeRepositoryMock_GetOrphanedWorktrees_Call {
	return &WorktreeRepositoryMock_GetOrphanedWorktrees_Call{Call: _e.mock.On("GetOrphanedWorktrees", ctx)}
}

func (_c *WorktreeRepositoryMock_GetOrphanedWorktrees_Call) Run(run func(ctx context.Context)) *WorktreeRepositoryMock_GetOrphanedWorktrees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetOrphanedWorktrees_Call) Return(worktrees []*entity.Worktree, err error) *WorktreeRepositoryMock_GetOrphanedWorktrees_Call {
	_c.Call.Return(worktrees, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetOrphanedWorktrees_Call) RunAndReturn(run func(ctx context.Context) ([]*entity.Worktree, error)) *WorktreeRepositoryMock_GetOrphanedWorktrees_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorktreeStatistics provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetWorktreeStatistics(ctx context.Context, projectID uuid.UUID) (*entity.WorktreeStatistics, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorktreeStatistics")
	}

	var r0 *entity.WorktreeStatistics
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.WorktreeStatistics, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.WorktreeStatistics); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WorktreeStatistics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetWorktreeStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorktreeStatistics'
type WorktreeRepositoryMock_GetWorktreeStatistics_Call struct {
	*mock.Call
}

// GetWorktreeStatistics is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *WorktreeRepositoryMock_Expecter) GetWorktreeStatistics(ctx interface{}, projectID interface{}) *WorktreeRepositoryMock_GetWorktreeStatistics_Call {
	return &WorktreeRepositoryMock_GetWorktreeStatistics_Call{Call: _e.mock.On("GetWorktreeStatistics", ctx, projectID)}
}

func (_c *WorktreeRepositoryMock_GetWorktreeStatistics_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WorktreeRepositoryMock_GetWorktreeStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetWorktreeStatistics_Call) Return(worktreeStatistics *entity.WorktreeStatistics, err error) *WorktreeRepositoryMock_GetWorktreeStatistics_Call {
	_c.Call.Return(worktreeStatistics, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetWorktreeStatistics_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (*entity.WorktreeStatistics, error)) *WorktreeRepositoryMock_GetWorktreeStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorktreesByStatusCount provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetWorktreesByStatusCount(ctx context.Context, projectID uuid.UUID) (map[entity.WorktreeStatus]int, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorktreesByStatusCount")
	}

	var r0 map[entity.WorktreeStatus]int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (map[entity.WorktreeStatus]int, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) map[entity.WorktreeStatus]int); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[entity.WorktreeStatus]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetWorktreesByStatusCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorktreesByStatusCount'
type WorktreeRepositoryMock_GetWorktreesByStatusCount_Call struct {
	*mock.Call
}

// GetWorktreesByStatusCount is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *WorktreeRepositoryMock_Expecter) GetWorktreesByStatusCount(ctx interface{}, projectID interface{}) *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call {
	return &WorktreeRepositoryMock_GetWorktreesByStatusCount_Call{Call: _e.mock.On("GetWorktreesByStatusCount", ctx, projectID)}
}

func (_c *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call) Return(worktreeStatusToInt map[entity.WorktreeStatus]int, err error) *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call {
	_c.Call.Return(worktreeStatusToInt, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (map[entity.WorktreeStatus]int, error)) *WorktreeRepositoryMock_GetWorktreesByStatusCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorktreesWithFilters provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) GetWorktreesWithFilters(ctx context.Context, filters entity.WorktreeFilters) ([]*entity.Worktree, error) {
	ret := _mock.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetWorktreesWithFilters")
	}

	var r0 []*entity.Worktree
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.WorktreeFilters) ([]*entity.Worktree, error)); ok {
		return returnFunc(ctx, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.WorktreeFilters) []*entity.Worktree); ok {
		r0 = returnFunc(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.WorktreeFilters) error); ok {
		r1 = returnFunc(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_GetWorktreesWithFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorktreesWithFilters'
type WorktreeRepositoryMock_GetWorktreesWithFilters_Call struct {
	*mock.Call
}

// GetWorktreesWithFilters is a helper method to define mock.On call
//   - ctx
//   - filters
func (_e *WorktreeRepositoryMock_Expecter) GetWorktreesWithFilters(ctx interface{}, filters interface{}) *WorktreeRepositoryMock_GetWorktreesWithFilters_Call {
	return &WorktreeRepositoryMock_GetWorktreesWithFilters_Call{Call: _e.mock.On("GetWorktreesWithFilters", ctx, filters)}
}

func (_c *WorktreeRepositoryMock_GetWorktreesWithFilters_Call) Run(run func(ctx context.Context, filters entity.WorktreeFilters)) *WorktreeRepositoryMock_GetWorktreesWithFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.WorktreeFilters))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_GetWorktreesWithFilters_Call) Return(worktrees []*entity.Worktree, err error) *WorktreeRepositoryMock_GetWorktreesWithFilters_Call {
	_c.Call.Return(worktrees, err)
	return _c
}

func (_c *WorktreeRepositoryMock_GetWorktreesWithFilters_Call) RunAndReturn(run func(ctx context.Context, filters entity.WorktreeFilters) ([]*entity.Worktree, error)) *WorktreeRepositoryMock_GetWorktreesWithFilters_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) Update(ctx context.Context, worktree *entity.Worktree) error {
	ret := _mock.Called(ctx, worktree)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Worktree) error); ok {
		r0 = returnFunc(ctx, worktree)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type WorktreeRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - worktree
func (_e *WorktreeRepositoryMock_Expecter) Update(ctx interface{}, worktree interface{}) *WorktreeRepositoryMock_Update_Call {
	return &WorktreeRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, worktree)}
}

func (_c *WorktreeRepositoryMock_Update_Call) Run(run func(ctx context.Context, worktree *entity.Worktree)) *WorktreeRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Worktree))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_Update_Call) Return(err error) *WorktreeRepositoryMock_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_Update_Call) RunAndReturn(run func(ctx context.Context, worktree *entity.Worktree) error) *WorktreeRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.WorktreeStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.WorktreeStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WorktreeRepositoryMock_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type WorktreeRepositoryMock_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *WorktreeRepositoryMock_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *WorktreeRepositoryMock_UpdateStatus_Call {
	return &WorktreeRepositoryMock_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *WorktreeRepositoryMock_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status entity.WorktreeStatus)) *WorktreeRepositoryMock_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.WorktreeStatus))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_UpdateStatus_Call) Return(err error) *WorktreeRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WorktreeRepositoryMock_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status entity.WorktreeStatus) error) *WorktreeRepositoryMock_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProjectExists provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) ValidateProjectExists(ctx context.Context, projectID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateProjectExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_ValidateProjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProjectExists'
type WorktreeRepositoryMock_ValidateProjectExists_Call struct {
	*mock.Call
}

// ValidateProjectExists is a helper method to define mock.On call
//   - ctx
//   - projectID
func (_e *WorktreeRepositoryMock_Expecter) ValidateProjectExists(ctx interface{}, projectID interface{}) *WorktreeRepositoryMock_ValidateProjectExists_Call {
	return &WorktreeRepositoryMock_ValidateProjectExists_Call{Call: _e.mock.On("ValidateProjectExists", ctx, projectID)}
}

func (_c *WorktreeRepositoryMock_ValidateProjectExists_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WorktreeRepositoryMock_ValidateProjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_ValidateProjectExists_Call) Return(b bool, err error) *WorktreeRepositoryMock_ValidateProjectExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *WorktreeRepositoryMock_ValidateProjectExists_Call) RunAndReturn(run func(ctx context.Context, projectID uuid.UUID) (bool, error)) *WorktreeRepositoryMock_ValidateProjectExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTaskExists provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) ValidateTaskExists(ctx context.Context, taskID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTaskExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_ValidateTaskExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTaskExists'
type WorktreeRepositoryMock_ValidateTaskExists_Call struct {
	*mock.Call
}

// ValidateTaskExists is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *WorktreeRepositoryMock_Expecter) ValidateTaskExists(ctx interface{}, taskID interface{}) *WorktreeRepositoryMock_ValidateTaskExists_Call {
	return &WorktreeRepositoryMock_ValidateTaskExists_Call{Call: _e.mock.On("ValidateTaskExists", ctx, taskID)}
}

func (_c *WorktreeRepositoryMock_ValidateTaskExists_Call) Run(run func(ctx context.Context, taskID uuid.UUID)) *WorktreeRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_ValidateTaskExists_Call) Return(b bool, err error) *WorktreeRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *WorktreeRepositoryMock_ValidateTaskExists_Call) RunAndReturn(run func(ctx context.Context, taskID uuid.UUID) (bool, error)) *WorktreeRepositoryMock_ValidateTaskExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateWorktreeExists provides a mock function for the type WorktreeRepositoryMock
func (_mock *WorktreeRepositoryMock) ValidateWorktreeExists(ctx context.Context, worktreeID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, worktreeID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateWorktreeExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, worktreeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, worktreeID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, worktreeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorktreeRepositoryMock_ValidateWorktreeExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateWorktreeExists'
type WorktreeRepositoryMock_ValidateWorktreeExists_Call struct {
	*mock.Call
}

// ValidateWorktreeExists is a helper method to define mock.On call
//   - ctx
//   - worktreeID
func (_e *WorktreeRepositoryMock_Expecter) ValidateWorktreeExists(ctx interface{}, worktreeID interface{}) *WorktreeRepositoryMock_ValidateWorktreeExists_Call {
	return &WorktreeRepositoryMock_ValidateWorktreeExists_Call{Call: _e.mock.On("ValidateWorktreeExists", ctx, worktreeID)}
}

func (_c *WorktreeRepositoryMock_ValidateWorktreeExists_Call) Run(run func(ctx context.Context, worktreeID uuid.UUID)) *WorktreeRepositoryMock_ValidateWorktreeExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WorktreeRepositoryMock_ValidateWorktreeExists_Call) Return(b bool, err error) *WorktreeRepositoryMock_ValidateWorktreeExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *WorktreeRepositoryMock_ValidateWorktreeExists_Call) RunAndReturn(run func(ctx context.Context, worktreeID uuid.UUID) (bool, error)) *WorktreeRepositoryMock_ValidateWorktreeExists_Call {
	_c.Call.Return(run)
	return _c
}
