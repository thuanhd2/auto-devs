// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"
	"time"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewExecutionLogRepositoryMock creates a new instance of ExecutionLogRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionLogRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionLogRepositoryMock {
	mock := &ExecutionLogRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExecutionLogRepositoryMock is an autogenerated mock type for the ExecutionLogRepository type
type ExecutionLogRepositoryMock struct {
	mock.Mock
}

type ExecutionLogRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionLogRepositoryMock) EXPECT() *ExecutionLogRepositoryMock_Expecter {
	return &ExecutionLogRepositoryMock_Expecter{mock: &_m.Mock}
}

// ArchiveLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) ArchiveLogs(ctx context.Context, executionID uuid.UUID, olderThan time.Time) (int64, error) {
	ret := _mock.Called(ctx, executionID, olderThan)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveLogs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (int64, error)); ok {
		return returnFunc(ctx, executionID, olderThan)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) int64); ok {
		r0 = returnFunc(ctx, executionID, olderThan)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(ctx, executionID, olderThan)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_ArchiveLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveLogs'
type ExecutionLogRepositoryMock_ArchiveLogs_Call struct {
	*mock.Call
}

// ArchiveLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - olderThan
func (_e *ExecutionLogRepositoryMock_Expecter) ArchiveLogs(ctx interface{}, executionID interface{}, olderThan interface{}) *ExecutionLogRepositoryMock_ArchiveLogs_Call {
	return &ExecutionLogRepositoryMock_ArchiveLogs_Call{Call: _e.mock.On("ArchiveLogs", ctx, executionID, olderThan)}
}

func (_c *ExecutionLogRepositoryMock_ArchiveLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, olderThan time.Time)) *ExecutionLogRepositoryMock_ArchiveLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_ArchiveLogs_Call) Return(n int64, err error) *ExecutionLogRepositoryMock_ArchiveLogs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_ArchiveLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, olderThan time.Time) (int64, error)) *ExecutionLogRepositoryMock_ArchiveLogs_Call {
	_c.Call.Return(run)
	return _c
}

// BatchCreate provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) BatchCreate(ctx context.Context, logs []*entity.ExecutionLog) error {
	ret := _mock.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*entity.ExecutionLog) error); ok {
		r0 = returnFunc(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionLogRepositoryMock_BatchCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreate'
type ExecutionLogRepositoryMock_BatchCreate_Call struct {
	*mock.Call
}

// BatchCreate is a helper method to define mock.On call
//   - ctx
//   - logs
func (_e *ExecutionLogRepositoryMock_Expecter) BatchCreate(ctx interface{}, logs interface{}) *ExecutionLogRepositoryMock_BatchCreate_Call {
	return &ExecutionLogRepositoryMock_BatchCreate_Call{Call: _e.mock.On("BatchCreate", ctx, logs)}
}

func (_c *ExecutionLogRepositoryMock_BatchCreate_Call) Run(run func(ctx context.Context, logs []*entity.ExecutionLog)) *ExecutionLogRepositoryMock_BatchCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*entity.ExecutionLog))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_BatchCreate_Call) Return(err error) *ExecutionLogRepositoryMock_BatchCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_BatchCreate_Call) RunAndReturn(run func(ctx context.Context, logs []*entity.ExecutionLog) error) *ExecutionLogRepositoryMock_BatchCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BatchInsertOrUpdate provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) BatchInsertOrUpdate(ctx context.Context, logs []*entity.ExecutionLog) error {
	ret := _mock.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for BatchInsertOrUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*entity.ExecutionLog) error); ok {
		r0 = returnFunc(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchInsertOrUpdate'
type ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call struct {
	*mock.Call
}

// BatchInsertOrUpdate is a helper method to define mock.On call
//   - ctx
//   - logs
func (_e *ExecutionLogRepositoryMock_Expecter) BatchInsertOrUpdate(ctx interface{}, logs interface{}) *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call {
	return &ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call{Call: _e.mock.On("BatchInsertOrUpdate", ctx, logs)}
}

func (_c *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call) Run(run func(ctx context.Context, logs []*entity.ExecutionLog)) *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*entity.ExecutionLog))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call) Return(err error) *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call) RunAndReturn(run func(ctx context.Context, logs []*entity.ExecutionLog) error) *ExecutionLogRepositoryMock_BatchInsertOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDelete provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) BulkDelete(ctx context.Context, ids []uuid.UUID) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionLogRepositoryMock_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type ExecutionLogRepositoryMock_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *ExecutionLogRepositoryMock_Expecter) BulkDelete(ctx interface{}, ids interface{}) *ExecutionLogRepositoryMock_BulkDelete_Call {
	return &ExecutionLogRepositoryMock_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, ids)}
}

func (_c *ExecutionLogRepositoryMock_BulkDelete_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *ExecutionLogRepositoryMock_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_BulkDelete_Call) Return(err error) *ExecutionLogRepositoryMock_BulkDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_BulkDelete_Call) RunAndReturn(run func(ctx context.Context, ids []uuid.UUID) error) *ExecutionLogRepositoryMock_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDeleteByExecution provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) BulkDeleteByExecution(ctx context.Context, executionID uuid.UUID) (int64, error) {
	ret := _mock.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for BulkDeleteByExecution")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return returnFunc(ctx, executionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = returnFunc(ctx, executionID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, executionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_BulkDeleteByExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteByExecution'
type ExecutionLogRepositoryMock_BulkDeleteByExecution_Call struct {
	*mock.Call
}

// BulkDeleteByExecution is a helper method to define mock.On call
//   - ctx
//   - executionID
func (_e *ExecutionLogRepositoryMock_Expecter) BulkDeleteByExecution(ctx interface{}, executionID interface{}) *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call {
	return &ExecutionLogRepositoryMock_BulkDeleteByExecution_Call{Call: _e.mock.On("BulkDeleteByExecution", ctx, executionID)}
}

func (_c *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call) Run(run func(ctx context.Context, executionID uuid.UUID)) *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call) Return(n int64, err error) *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID) (int64, error)) *ExecutionLogRepositoryMock_BulkDeleteByExecution_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDeleteByLevel provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) BulkDeleteByLevel(ctx context.Context, level entity.LogLevel, olderThan time.Time) (int64, error) {
	ret := _mock.Called(ctx, level, olderThan)

	if len(ret) == 0 {
		panic("no return value specified for BulkDeleteByLevel")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.LogLevel, time.Time) (int64, error)); ok {
		return returnFunc(ctx, level, olderThan)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.LogLevel, time.Time) int64); ok {
		r0 = returnFunc(ctx, level, olderThan)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.LogLevel, time.Time) error); ok {
		r1 = returnFunc(ctx, level, olderThan)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_BulkDeleteByLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteByLevel'
type ExecutionLogRepositoryMock_BulkDeleteByLevel_Call struct {
	*mock.Call
}

// BulkDeleteByLevel is a helper method to define mock.On call
//   - ctx
//   - level
//   - olderThan
func (_e *ExecutionLogRepositoryMock_Expecter) BulkDeleteByLevel(ctx interface{}, level interface{}, olderThan interface{}) *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call {
	return &ExecutionLogRepositoryMock_BulkDeleteByLevel_Call{Call: _e.mock.On("BulkDeleteByLevel", ctx, level, olderThan)}
}

func (_c *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call) Run(run func(ctx context.Context, level entity.LogLevel, olderThan time.Time)) *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LogLevel), args[2].(time.Time))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call) Return(n int64, err error) *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call) RunAndReturn(run func(ctx context.Context, level entity.LogLevel, olderThan time.Time) (int64, error)) *ExecutionLogRepositoryMock_BulkDeleteByLevel_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupExecutionLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) CleanupExecutionLogs(ctx context.Context, executionID uuid.UUID, keepRecent int) (int64, error) {
	ret := _mock.Called(ctx, executionID, keepRecent)

	if len(ret) == 0 {
		panic("no return value specified for CleanupExecutionLogs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) (int64, error)); ok {
		return returnFunc(ctx, executionID, keepRecent)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) int64); ok {
		r0 = returnFunc(ctx, executionID, keepRecent)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, executionID, keepRecent)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_CleanupExecutionLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupExecutionLogs'
type ExecutionLogRepositoryMock_CleanupExecutionLogs_Call struct {
	*mock.Call
}

// CleanupExecutionLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - keepRecent
func (_e *ExecutionLogRepositoryMock_Expecter) CleanupExecutionLogs(ctx interface{}, executionID interface{}, keepRecent interface{}) *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call {
	return &ExecutionLogRepositoryMock_CleanupExecutionLogs_Call{Call: _e.mock.On("CleanupExecutionLogs", ctx, executionID, keepRecent)}
}

func (_c *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, keepRecent int)) *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call) Return(n int64, err error) *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, keepRecent int) (int64, error)) *ExecutionLogRepositoryMock_CleanupExecutionLogs_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupOldLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) CleanupOldLogs(ctx context.Context, olderThan time.Time) (int64, error) {
	ret := _mock.Called(ctx, olderThan)

	if len(ret) == 0 {
		panic("no return value specified for CleanupOldLogs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) (int64, error)); ok {
		return returnFunc(ctx, olderThan)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) int64); ok {
		r0 = returnFunc(ctx, olderThan)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, olderThan)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_CleanupOldLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupOldLogs'
type ExecutionLogRepositoryMock_CleanupOldLogs_Call struct {
	*mock.Call
}

// CleanupOldLogs is a helper method to define mock.On call
//   - ctx
//   - olderThan
func (_e *ExecutionLogRepositoryMock_Expecter) CleanupOldLogs(ctx interface{}, olderThan interface{}) *ExecutionLogRepositoryMock_CleanupOldLogs_Call {
	return &ExecutionLogRepositoryMock_CleanupOldLogs_Call{Call: _e.mock.On("CleanupOldLogs", ctx, olderThan)}
}

func (_c *ExecutionLogRepositoryMock_CleanupOldLogs_Call) Run(run func(ctx context.Context, olderThan time.Time)) *ExecutionLogRepositoryMock_CleanupOldLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_CleanupOldLogs_Call) Return(n int64, err error) *ExecutionLogRepositoryMock_CleanupOldLogs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_CleanupOldLogs_Call) RunAndReturn(run func(ctx context.Context, olderThan time.Time) (int64, error)) *ExecutionLogRepositoryMock_CleanupOldLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) Create(ctx context.Context, log *entity.ExecutionLog) error {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.ExecutionLog) error); ok {
		r0 = returnFunc(ctx, log)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionLogRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ExecutionLogRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - log
func (_e *ExecutionLogRepositoryMock_Expecter) Create(ctx interface{}, log interface{}) *ExecutionLogRepositoryMock_Create_Call {
	return &ExecutionLogRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, log)}
}

func (_c *ExecutionLogRepositoryMock_Create_Call) Run(run func(ctx context.Context, log *entity.ExecutionLog)) *ExecutionLogRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ExecutionLog))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_Create_Call) Return(err error) *ExecutionLogRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, log *entity.ExecutionLog) error) *ExecutionLogRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionLogRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ExecutionLogRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionLogRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *ExecutionLogRepositoryMock_Delete_Call {
	return &ExecutionLogRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ExecutionLogRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionLogRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_Delete_Call) Return(err error) *ExecutionLogRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *ExecutionLogRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateRange provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetByDateRange(ctx context.Context, executionID uuid.UUID, startDate time.Time, endDate time.Time) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateRange")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, startDate, endDate)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, executionID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateRange'
type ExecutionLogRepositoryMock_GetByDateRange_Call struct {
	*mock.Call
}

// GetByDateRange is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - startDate
//   - endDate
func (_e *ExecutionLogRepositoryMock_Expecter) GetByDateRange(ctx interface{}, executionID interface{}, startDate interface{}, endDate interface{}) *ExecutionLogRepositoryMock_GetByDateRange_Call {
	return &ExecutionLogRepositoryMock_GetByDateRange_Call{Call: _e.mock.On("GetByDateRange", ctx, executionID, startDate, endDate)}
}

func (_c *ExecutionLogRepositoryMock_GetByDateRange_Call) Run(run func(ctx context.Context, executionID uuid.UUID, startDate time.Time, endDate time.Time)) *ExecutionLogRepositoryMock_GetByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByDateRange_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetByDateRange_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByDateRange_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, startDate time.Time, endDate time.Time) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByExecutionID provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetByExecutionID(ctx context.Context, executionID uuid.UUID) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByExecutionID")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, executionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetByExecutionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByExecutionID'
type ExecutionLogRepositoryMock_GetByExecutionID_Call struct {
	*mock.Call
}

// GetByExecutionID is a helper method to define mock.On call
//   - ctx
//   - executionID
func (_e *ExecutionLogRepositoryMock_Expecter) GetByExecutionID(ctx interface{}, executionID interface{}) *ExecutionLogRepositoryMock_GetByExecutionID_Call {
	return &ExecutionLogRepositoryMock_GetByExecutionID_Call{Call: _e.mock.On("GetByExecutionID", ctx, executionID)}
}

func (_c *ExecutionLogRepositoryMock_GetByExecutionID_Call) Run(run func(ctx context.Context, executionID uuid.UUID)) *ExecutionLogRepositoryMock_GetByExecutionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByExecutionID_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetByExecutionID_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByExecutionID_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetByExecutionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ExecutionLogRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionLogRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *ExecutionLogRepositoryMock_GetByID_Call {
	return &ExecutionLogRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ExecutionLogRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionLogRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByID_Call) Return(executionLog *entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetByID_Call {
	_c.Call.Return(executionLog, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLevel provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetByLevel(ctx context.Context, executionID uuid.UUID, level entity.LogLevel) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, level)

	if len(ret) == 0 {
		panic("no return value specified for GetByLevel")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.LogLevel) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, level)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.LogLevel) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.LogLevel) error); ok {
		r1 = returnFunc(ctx, executionID, level)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetByLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLevel'
type ExecutionLogRepositoryMock_GetByLevel_Call struct {
	*mock.Call
}

// GetByLevel is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - level
func (_e *ExecutionLogRepositoryMock_Expecter) GetByLevel(ctx interface{}, executionID interface{}, level interface{}) *ExecutionLogRepositoryMock_GetByLevel_Call {
	return &ExecutionLogRepositoryMock_GetByLevel_Call{Call: _e.mock.On("GetByLevel", ctx, executionID, level)}
}

func (_c *ExecutionLogRepositoryMock_GetByLevel_Call) Run(run func(ctx context.Context, executionID uuid.UUID, level entity.LogLevel)) *ExecutionLogRepositoryMock_GetByLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.LogLevel))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByLevel_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetByLevel_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByLevel_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, level entity.LogLevel) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetByLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLevels provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetByLevels(ctx context.Context, executionID uuid.UUID, levels []entity.LogLevel) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, levels)

	if len(ret) == 0 {
		panic("no return value specified for GetByLevels")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []entity.LogLevel) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, levels)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []entity.LogLevel) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, levels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, []entity.LogLevel) error); ok {
		r1 = returnFunc(ctx, executionID, levels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetByLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLevels'
type ExecutionLogRepositoryMock_GetByLevels_Call struct {
	*mock.Call
}

// GetByLevels is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - levels
func (_e *ExecutionLogRepositoryMock_Expecter) GetByLevels(ctx interface{}, executionID interface{}, levels interface{}) *ExecutionLogRepositoryMock_GetByLevels_Call {
	return &ExecutionLogRepositoryMock_GetByLevels_Call{Call: _e.mock.On("GetByLevels", ctx, executionID, levels)}
}

func (_c *ExecutionLogRepositoryMock_GetByLevels_Call) Run(run func(ctx context.Context, executionID uuid.UUID, levels []entity.LogLevel)) *ExecutionLogRepositoryMock_GetByLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]entity.LogLevel))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByLevels_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetByLevels_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByLevels_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, levels []entity.LogLevel) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetByLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProcessID provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetByProcessID(ctx context.Context, processID uuid.UUID) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, processID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProcessID")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, processID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, processID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, processID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetByProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProcessID'
type ExecutionLogRepositoryMock_GetByProcessID_Call struct {
	*mock.Call
}

// GetByProcessID is a helper method to define mock.On call
//   - ctx
//   - processID
func (_e *ExecutionLogRepositoryMock_Expecter) GetByProcessID(ctx interface{}, processID interface{}) *ExecutionLogRepositoryMock_GetByProcessID_Call {
	return &ExecutionLogRepositoryMock_GetByProcessID_Call{Call: _e.mock.On("GetByProcessID", ctx, processID)}
}

func (_c *ExecutionLogRepositoryMock_GetByProcessID_Call) Run(run func(ctx context.Context, processID uuid.UUID)) *ExecutionLogRepositoryMock_GetByProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByProcessID_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetByProcessID_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetByProcessID_Call) RunAndReturn(run func(ctx context.Context, processID uuid.UUID) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetByProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySource provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetBySource(ctx context.Context, executionID uuid.UUID, source string) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, source)

	if len(ret) == 0 {
		panic("no return value specified for GetBySource")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, source)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, executionID, source)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetBySource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySource'
type ExecutionLogRepositoryMock_GetBySource_Call struct {
	*mock.Call
}

// GetBySource is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - source
func (_e *ExecutionLogRepositoryMock_Expecter) GetBySource(ctx interface{}, executionID interface{}, source interface{}) *ExecutionLogRepositoryMock_GetBySource_Call {
	return &ExecutionLogRepositoryMock_GetBySource_Call{Call: _e.mock.On("GetBySource", ctx, executionID, source)}
}

func (_c *ExecutionLogRepositoryMock_GetBySource_Call) Run(run func(ctx context.Context, executionID uuid.UUID, source string)) *ExecutionLogRepositoryMock_GetBySource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetBySource_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetBySource_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetBySource_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, source string) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetBySource_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetErrorLogs(ctx context.Context, executionID uuid.UUID, limit int) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetErrorLogs")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, executionID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetErrorLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorLogs'
type ExecutionLogRepositoryMock_GetErrorLogs_Call struct {
	*mock.Call
}

// GetErrorLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - limit
func (_e *ExecutionLogRepositoryMock_Expecter) GetErrorLogs(ctx interface{}, executionID interface{}, limit interface{}) *ExecutionLogRepositoryMock_GetErrorLogs_Call {
	return &ExecutionLogRepositoryMock_GetErrorLogs_Call{Call: _e.mock.On("GetErrorLogs", ctx, executionID, limit)}
}

func (_c *ExecutionLogRepositoryMock_GetErrorLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, limit int)) *ExecutionLogRepositoryMock_GetErrorLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetErrorLogs_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetErrorLogs_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetErrorLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, limit int) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetErrorLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogStats provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetLogStats(ctx context.Context, executionID uuid.UUID) (*LogStats, error) {
	ret := _mock.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLogStats")
	}

	var r0 *LogStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*LogStats, error)); ok {
		return returnFunc(ctx, executionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *LogStats); ok {
		r0 = returnFunc(ctx, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LogStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, executionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetLogStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogStats'
type ExecutionLogRepositoryMock_GetLogStats_Call struct {
	*mock.Call
}

// GetLogStats is a helper method to define mock.On call
//   - ctx
//   - executionID
func (_e *ExecutionLogRepositoryMock_Expecter) GetLogStats(ctx interface{}, executionID interface{}) *ExecutionLogRepositoryMock_GetLogStats_Call {
	return &ExecutionLogRepositoryMock_GetLogStats_Call{Call: _e.mock.On("GetLogStats", ctx, executionID)}
}

func (_c *ExecutionLogRepositoryMock_GetLogStats_Call) Run(run func(ctx context.Context, executionID uuid.UUID)) *ExecutionLogRepositoryMock_GetLogStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetLogStats_Call) Return(logStats *LogStats, err error) *ExecutionLogRepositoryMock_GetLogStats_Call {
	_c.Call.Return(logStats, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetLogStats_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID) (*LogStats, error)) *ExecutionLogRepositoryMock_GetLogStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsBatch provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetLogsBatch(ctx context.Context, executionID uuid.UUID, limit int, offset int) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetLogsBatch")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = returnFunc(ctx, executionID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetLogsBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsBatch'
type ExecutionLogRepositoryMock_GetLogsBatch_Call struct {
	*mock.Call
}

// GetLogsBatch is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - limit
//   - offset
func (_e *ExecutionLogRepositoryMock_Expecter) GetLogsBatch(ctx interface{}, executionID interface{}, limit interface{}, offset interface{}) *ExecutionLogRepositoryMock_GetLogsBatch_Call {
	return &ExecutionLogRepositoryMock_GetLogsBatch_Call{Call: _e.mock.On("GetLogsBatch", ctx, executionID, limit, offset)}
}

func (_c *ExecutionLogRepositoryMock_GetLogsBatch_Call) Run(run func(ctx context.Context, executionID uuid.UUID, limit int, offset int)) *ExecutionLogRepositoryMock_GetLogsBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetLogsBatch_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetLogsBatch_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetLogsBatch_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, limit int, offset int) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetLogsBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsByTimeWindow provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetLogsByTimeWindow(ctx context.Context, executionID uuid.UUID, windowStart time.Time, windowEnd time.Time) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, windowStart, windowEnd)

	if len(ret) == 0 {
		panic("no return value specified for GetLogsByTimeWindow")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, windowStart, windowEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, windowStart, windowEnd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, executionID, windowStart, windowEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsByTimeWindow'
type ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call struct {
	*mock.Call
}

// GetLogsByTimeWindow is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - windowStart
//   - windowEnd
func (_e *ExecutionLogRepositoryMock_Expecter) GetLogsByTimeWindow(ctx interface{}, executionID interface{}, windowStart interface{}, windowEnd interface{}) *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call {
	return &ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call{Call: _e.mock.On("GetLogsByTimeWindow", ctx, executionID, windowStart, windowEnd)}
}

func (_c *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call) Run(run func(ctx context.Context, executionID uuid.UUID, windowStart time.Time, windowEnd time.Time)) *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, windowStart time.Time, windowEnd time.Time) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetLogsByTimeWindow_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) GetRecentLogs(ctx context.Context, executionID uuid.UUID, limit int) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentLogs")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, executionID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_GetRecentLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentLogs'
type ExecutionLogRepositoryMock_GetRecentLogs_Call struct {
	*mock.Call
}

// GetRecentLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - limit
func (_e *ExecutionLogRepositoryMock_Expecter) GetRecentLogs(ctx interface{}, executionID interface{}, limit interface{}) *ExecutionLogRepositoryMock_GetRecentLogs_Call {
	return &ExecutionLogRepositoryMock_GetRecentLogs_Call{Call: _e.mock.On("GetRecentLogs", ctx, executionID, limit)}
}

func (_c *ExecutionLogRepositoryMock_GetRecentLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, limit int)) *ExecutionLogRepositoryMock_GetRecentLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetRecentLogs_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_GetRecentLogs_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_GetRecentLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, limit int) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_GetRecentLogs_Call {
	_c.Call.Return(run)
	return _c
}

// RotateLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) RotateLogs(ctx context.Context, executionID uuid.UUID, maxLogs int) error {
	ret := _mock.Called(ctx, executionID, maxLogs)

	if len(ret) == 0 {
		panic("no return value specified for RotateLogs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) error); ok {
		r0 = returnFunc(ctx, executionID, maxLogs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExecutionLogRepositoryMock_RotateLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateLogs'
type ExecutionLogRepositoryMock_RotateLogs_Call struct {
	*mock.Call
}

// RotateLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - maxLogs
func (_e *ExecutionLogRepositoryMock_Expecter) RotateLogs(ctx interface{}, executionID interface{}, maxLogs interface{}) *ExecutionLogRepositoryMock_RotateLogs_Call {
	return &ExecutionLogRepositoryMock_RotateLogs_Call{Call: _e.mock.On("RotateLogs", ctx, executionID, maxLogs)}
}

func (_c *ExecutionLogRepositoryMock_RotateLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, maxLogs int)) *ExecutionLogRepositoryMock_RotateLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_RotateLogs_Call) Return(err error) *ExecutionLogRepositoryMock_RotateLogs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_RotateLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, maxLogs int) error) *ExecutionLogRepositoryMock_RotateLogs_Call {
	_c.Call.Return(run)
	return _c
}

// SearchLogs provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) SearchLogs(ctx context.Context, executionID uuid.UUID, searchTerm string) ([]*entity.ExecutionLog, error) {
	ret := _mock.Called(ctx, executionID, searchTerm)

	if len(ret) == 0 {
		panic("no return value specified for SearchLogs")
	}

	var r0 []*entity.ExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]*entity.ExecutionLog, error)); ok {
		return returnFunc(ctx, executionID, searchTerm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []*entity.ExecutionLog); ok {
		r0 = returnFunc(ctx, executionID, searchTerm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, executionID, searchTerm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_SearchLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchLogs'
type ExecutionLogRepositoryMock_SearchLogs_Call struct {
	*mock.Call
}

// SearchLogs is a helper method to define mock.On call
//   - ctx
//   - executionID
//   - searchTerm
func (_e *ExecutionLogRepositoryMock_Expecter) SearchLogs(ctx interface{}, executionID interface{}, searchTerm interface{}) *ExecutionLogRepositoryMock_SearchLogs_Call {
	return &ExecutionLogRepositoryMock_SearchLogs_Call{Call: _e.mock.On("SearchLogs", ctx, executionID, searchTerm)}
}

func (_c *ExecutionLogRepositoryMock_SearchLogs_Call) Run(run func(ctx context.Context, executionID uuid.UUID, searchTerm string)) *ExecutionLogRepositoryMock_SearchLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_SearchLogs_Call) Return(executionLogs []*entity.ExecutionLog, err error) *ExecutionLogRepositoryMock_SearchLogs_Call {
	_c.Call.Return(executionLogs, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_SearchLogs_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID, searchTerm string) ([]*entity.ExecutionLog, error)) *ExecutionLogRepositoryMock_SearchLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateExecutionExists provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) ValidateExecutionExists(ctx context.Context, executionID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateExecutionExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, executionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, executionID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, executionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_ValidateExecutionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateExecutionExists'
type ExecutionLogRepositoryMock_ValidateExecutionExists_Call struct {
	*mock.Call
}

// ValidateExecutionExists is a helper method to define mock.On call
//   - ctx
//   - executionID
func (_e *ExecutionLogRepositoryMock_Expecter) ValidateExecutionExists(ctx interface{}, executionID interface{}) *ExecutionLogRepositoryMock_ValidateExecutionExists_Call {
	return &ExecutionLogRepositoryMock_ValidateExecutionExists_Call{Call: _e.mock.On("ValidateExecutionExists", ctx, executionID)}
}

func (_c *ExecutionLogRepositoryMock_ValidateExecutionExists_Call) Run(run func(ctx context.Context, executionID uuid.UUID)) *ExecutionLogRepositoryMock_ValidateExecutionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_ValidateExecutionExists_Call) Return(b bool, err error) *ExecutionLogRepositoryMock_ValidateExecutionExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_ValidateExecutionExists_Call) RunAndReturn(run func(ctx context.Context, executionID uuid.UUID) (bool, error)) *ExecutionLogRepositoryMock_ValidateExecutionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateLogExists provides a mock function for the type ExecutionLogRepositoryMock
func (_mock *ExecutionLogRepositoryMock) ValidateLogExists(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ValidateLogExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExecutionLogRepositoryMock_ValidateLogExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateLogExists'
type ExecutionLogRepositoryMock_ValidateLogExists_Call struct {
	*mock.Call
}

// ValidateLogExists is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *ExecutionLogRepositoryMock_Expecter) ValidateLogExists(ctx interface{}, id interface{}) *ExecutionLogRepositoryMock_ValidateLogExists_Call {
	return &ExecutionLogRepositoryMock_ValidateLogExists_Call{Call: _e.mock.On("ValidateLogExists", ctx, id)}
}

func (_c *ExecutionLogRepositoryMock_ValidateLogExists_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExecutionLogRepositoryMock_ValidateLogExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExecutionLogRepositoryMock_ValidateLogExists_Call) Return(b bool, err error) *ExecutionLogRepositoryMock_ValidateLogExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *ExecutionLogRepositoryMock_ValidateLogExists_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (bool, error)) *ExecutionLogRepositoryMock_ValidateLogExists_Call {
	_c.Call.Return(run)
	return _c
}
