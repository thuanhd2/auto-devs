// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"
	"time"

	"github.com/auto-devs/auto-devs/internal/entity"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewAuditRepositoryMock creates a new instance of AuditRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditRepositoryMock {
	mock := &AuditRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuditRepositoryMock is an autogenerated mock type for the AuditRepository type
type AuditRepositoryMock struct {
	mock.Mock
}

type AuditRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditRepositoryMock) EXPECT() *AuditRepositoryMock_Expecter {
	return &AuditRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type AuditRepositoryMock
func (_mock *AuditRepositoryMock) Create(ctx context.Context, auditLog *entity.AuditLog) error {
	ret := _mock.Called(ctx, auditLog)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.AuditLog) error); ok {
		r0 = returnFunc(ctx, auditLog)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuditRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuditRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - auditLog
func (_e *AuditRepositoryMock_Expecter) Create(ctx interface{}, auditLog interface{}) *AuditRepositoryMock_Create_Call {
	return &AuditRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, auditLog)}
}

func (_c *AuditRepositoryMock_Create_Call) Run(run func(ctx context.Context, auditLog *entity.AuditLog)) *AuditRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.AuditLog))
	})
	return _c
}

func (_c *AuditRepositoryMock_Create_Call) Return(err error) *AuditRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuditRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, auditLog *entity.AuditLog) error) *AuditRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEntity provides a mock function for the type AuditRepositoryMock
func (_mock *AuditRepositoryMock) GetByEntity(ctx context.Context, entityType string, entityID *uuid.UUID, limit int) ([]*entity.AuditLog, error) {
	ret := _mock.Called(ctx, entityType, entityID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByEntity")
	}

	var r0 []*entity.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID, int) ([]*entity.AuditLog, error)); ok {
		return returnFunc(ctx, entityType, entityID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID, int) []*entity.AuditLog); ok {
		r0 = returnFunc(ctx, entityType, entityID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, entityType, entityID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuditRepositoryMock_GetByEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEntity'
type AuditRepositoryMock_GetByEntity_Call struct {
	*mock.Call
}

// GetByEntity is a helper method to define mock.On call
//   - ctx
//   - entityType
//   - entityID
//   - limit
func (_e *AuditRepositoryMock_Expecter) GetByEntity(ctx interface{}, entityType interface{}, entityID interface{}, limit interface{}) *AuditRepositoryMock_GetByEntity_Call {
	return &AuditRepositoryMock_GetByEntity_Call{Call: _e.mock.On("GetByEntity", ctx, entityType, entityID, limit)}
}

func (_c *AuditRepositoryMock_GetByEntity_Call) Run(run func(ctx context.Context, entityType string, entityID *uuid.UUID, limit int)) *AuditRepositoryMock_GetByEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uuid.UUID), args[3].(int))
	})
	return _c
}

func (_c *AuditRepositoryMock_GetByEntity_Call) Return(auditLogs []*entity.AuditLog, err error) *AuditRepositoryMock_GetByEntity_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *AuditRepositoryMock_GetByEntity_Call) RunAndReturn(run func(ctx context.Context, entityType string, entityID *uuid.UUID, limit int) ([]*entity.AuditLog, error)) *AuditRepositoryMock_GetByEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTimeRange provides a mock function for the type AuditRepositoryMock
func (_mock *AuditRepositoryMock) GetByTimeRange(ctx context.Context, entityType string, startTime *time.Time, endTime *time.Time, limit int) ([]*entity.AuditLog, error) {
	ret := _mock.Called(ctx, entityType, startTime, endTime, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByTimeRange")
	}

	var r0 []*entity.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *time.Time, *time.Time, int) ([]*entity.AuditLog, error)); ok {
		return returnFunc(ctx, entityType, startTime, endTime, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *time.Time, *time.Time, int) []*entity.AuditLog); ok {
		r0 = returnFunc(ctx, entityType, startTime, endTime, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *time.Time, *time.Time, int) error); ok {
		r1 = returnFunc(ctx, entityType, startTime, endTime, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuditRepositoryMock_GetByTimeRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTimeRange'
type AuditRepositoryMock_GetByTimeRange_Call struct {
	*mock.Call
}

// GetByTimeRange is a helper method to define mock.On call
//   - ctx
//   - entityType
//   - startTime
//   - endTime
//   - limit
func (_e *AuditRepositoryMock_Expecter) GetByTimeRange(ctx interface{}, entityType interface{}, startTime interface{}, endTime interface{}, limit interface{}) *AuditRepositoryMock_GetByTimeRange_Call {
	return &AuditRepositoryMock_GetByTimeRange_Call{Call: _e.mock.On("GetByTimeRange", ctx, entityType, startTime, endTime, limit)}
}

func (_c *AuditRepositoryMock_GetByTimeRange_Call) Run(run func(ctx context.Context, entityType string, startTime *time.Time, endTime *time.Time, limit int)) *AuditRepositoryMock_GetByTimeRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*time.Time), args[3].(*time.Time), args[4].(int))
	})
	return _c
}

func (_c *AuditRepositoryMock_GetByTimeRange_Call) Return(auditLogs []*entity.AuditLog, err error) *AuditRepositoryMock_GetByTimeRange_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *AuditRepositoryMock_GetByTimeRange_Call) RunAndReturn(run func(ctx context.Context, entityType string, startTime *time.Time, endTime *time.Time, limit int) ([]*entity.AuditLog, error)) *AuditRepositoryMock_GetByTimeRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUser provides a mock function for the type AuditRepositoryMock
func (_mock *AuditRepositoryMock) GetByUser(ctx context.Context, userID uuid.UUID, limit int) ([]*entity.AuditLog, error) {
	ret := _mock.Called(ctx, userID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*entity.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) ([]*entity.AuditLog, error)); ok {
		return returnFunc(ctx, userID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) []*entity.AuditLog); ok {
		r0 = returnFunc(ctx, userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, userID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuditRepositoryMock_GetByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUser'
type AuditRepositoryMock_GetByUser_Call struct {
	*mock.Call
}

// GetByUser is a helper method to define mock.On call
//   - ctx
//   - userID
//   - limit
func (_e *AuditRepositoryMock_Expecter) GetByUser(ctx interface{}, userID interface{}, limit interface{}) *AuditRepositoryMock_GetByUser_Call {
	return &AuditRepositoryMock_GetByUser_Call{Call: _e.mock.On("GetByUser", ctx, userID, limit)}
}

func (_c *AuditRepositoryMock_GetByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, limit int)) *AuditRepositoryMock_GetByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *AuditRepositoryMock_GetByUser_Call) Return(auditLogs []*entity.AuditLog, err error) *AuditRepositoryMock_GetByUser_Call {
	_c.Call.Return(auditLogs, err)
	return _c
}

func (_c *AuditRepositoryMock_GetByUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, limit int) ([]*entity.AuditLog, error)) *AuditRepositoryMock_GetByUser_Call {
	_c.Call.Return(run)
	return _c
}
