// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/auto-devs/auto-devs/config"
	"github.com/auto-devs/auto-devs/internal/repository"
	"github.com/auto-devs/auto-devs/internal/repository/postgres"
	"github.com/auto-devs/auto-devs/pkg/database"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeApp builds the entire dependency tree
func InitializeApp() (*App, error) {
	configConfig := config.Load()
	gormDB, err := ProvideGormDB(configConfig)
	if err != nil {
		return nil, err
	}
	projectRepository := postgres.NewProjectRepository(gormDB)
	taskRepository := postgres.NewTaskRepository(gormDB)
	app := NewApp(configConfig, gormDB, projectRepository, taskRepository)
	return app, nil
}

// wire.go:

// ProviderSet is the Wire provider set for the entire application
var ProviderSet = wire.NewSet(config.Load, ProvideGormDB, postgres.NewProjectRepository, postgres.NewTaskRepository)

// App represents the initialized application with all dependencies
type App struct {
	Config      *config.Config
	GormDB      *database.GormDB
	ProjectRepo repository.ProjectRepository
	TaskRepo    repository.TaskRepository
}

// NewApp creates a new App instance
func NewApp(
	cfg *config.Config,
	gormDB *database.GormDB,
	projectRepo repository.ProjectRepository,
	taskRepo repository.TaskRepository,
) *App {
	return &App{
		Config:      cfg,
		GormDB:      gormDB,
		ProjectRepo: projectRepo,
		TaskRepo:    taskRepo,
	}
}

// ProvideGormDB provides a GORM database connection
func ProvideGormDB(cfg *config.Config) (*database.GormDB, error) {
	return database.NewGormDB(cfg)
}
