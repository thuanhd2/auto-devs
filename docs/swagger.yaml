openapi: 3.0.3
info:
  title: Auto-Devs API
  description: |
    API for the Auto-Devs project management system.
    
    This API provides endpoints for managing projects and tasks in an automated development workflow system.
  version: 1.0.0
  contact:
    name: Auto-Devs Team
    email: support@auto-devs.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8098/api/v1
    description: Development server
  - url: https://api.auto-devs.com/api/v1
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check the health status of the API and database
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      description: Create a new project with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Projects
      summary: List all projects
      description: Get a list of all projects
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Get a project by ID
      description: Get a single project by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid project ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Projects
      summary: Update a project
      description: Update a project with the provided details
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Projects
      summary: Delete a project
      description: Delete a project by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted successfully
        '400':
          description: Invalid project ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{id}/tasks:
    get:
      tags:
        - Projects
      summary: Get a project with its tasks
      description: Get a single project by its ID including all associated tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project with tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithTasksResponse'
        '400':
          description: Invalid project ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{project_id}/tasks:
    get:
      tags:
        - Tasks
      summary: List tasks by project
      description: Get all tasks for a specific project
      parameters:
        - name: project_id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '400':
          description: Invalid project ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks:
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Tasks
      summary: List tasks with filtering
      description: Get a list of tasks with optional filtering by status, project, or search term
      parameters:
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [TODO, PLANNING, PLAN_REVIEWING, IMPLEMENTING, CODE_REVIEWING, DONE, CANCELLED]
        - name: project_id
          in: query
          description: Filter by project ID
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
            maxLength: 255
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get a task by ID
      description: Get a single task by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Tasks
      summary: Update a task
      description: Update a task with the provided details
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Delete a task by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task deleted successfully
        '400':
          description: Invalid task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}/status:
    patch:
      tags:
        - Tasks
      summary: Update a task status
      description: Update the status of a task
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusUpdateRequest'
      responses:
        '200':
          description: Task status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}/project:
    get:
      tags:
        - Tasks
      summary: Get a task with its project
      description: Get a single task by its ID including the associated project
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task with project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWithProjectResponse'
        '400':
          description: Invalid task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Health schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
        database:
          $ref: '#/components/schemas/DatabaseHealth'

    DatabaseHealth:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        error:
          type: string
          example: "Connection failed"

    # Common schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request"
        message:
          type: string
          example: "The provided data is invalid"
        code:
          type: integer
          example: 400
        details:
          type: object
          additionalProperties:
            type: string

    # Project schemas
    ProjectCreateRequest:
      type: object
      required:
        - name
        - repo_url
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: "My Project"
        description:
          type: string
          maxLength: 1000
          example: "Project description"
        repo_url:
          type: string
          format: uri
          maxLength: 500
          example: "https://github.com/user/repo"

    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: "Updated Project Name"
        description:
          type: string
          maxLength: 1000
          example: "Updated description"
        repo_url:
          type: string
          format: uri
          maxLength: 500
          example: "https://github.com/user/updated-repo"

    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "My Project"
        description:
          type: string
          example: "Project description"
        repo_url:
          type: string
          example: "https://github.com/user/repo"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    ProjectWithTasksResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectResponse'
        - type: object
          properties:
            tasks:
              type: array
              items:
                $ref: '#/components/schemas/TaskResponse'

    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'
        total:
          type: integer
          example: 10

    # Task schemas
    TaskCreateRequest:
      type: object
      required:
        - project_id
        - title
      properties:
        project_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          minLength: 1
          maxLength: 255
          example: "Implement user authentication"
        description:
          type: string
          maxLength: 1000
          example: "Add JWT-based authentication system"

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          example: "Updated task title"
        description:
          type: string
          maxLength: 1000
          example: "Updated description"
        branch_name:
          type: string
          maxLength: 255
          example: "feature/user-auth"
        pull_request:
          type: string
          maxLength: 255
          example: "https://github.com/user/repo/pull/123"

    TaskStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [TODO, PLANNING, PLAN_REVIEWING, IMPLEMENTING, CODE_REVIEWING, DONE, CANCELLED]
          example: "TODO"

    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        project_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Implement user authentication"
        description:
          type: string
          example: "Add JWT-based authentication system"
        status:
          type: string
          enum: [TODO, PLANNING, PLAN_REVIEWING, IMPLEMENTING, CODE_REVIEWING, DONE, CANCELLED]
          example: "TODO"
        branch_name:
          type: string
          nullable: true
          example: "feature/user-auth"
        pull_request:
          type: string
          nullable: true
          example: "https://github.com/user/repo/pull/123"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    TaskWithProjectResponse:
      allOf:
        - $ref: '#/components/schemas/TaskResponse'
        - type: object
          properties:
            project:
              $ref: '#/components/schemas/ProjectResponse'

    TaskListResponse:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
        total:
          type: integer
          example: 10