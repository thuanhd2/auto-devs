import { useState } from 'react'
import type { Task } from '@/types/task'
import { useUpdateTask } from '@/hooks/use-tasks'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'

import { toast } from 'sonner'
import { Check, X, Edit, Download, FileText, Eye } from 'lucide-react'
import { PlanEditor } from './plan-editor'
import { PlanPreview } from './plan-preview'

interface PlanReviewProps {
  task: Task
  onPlanUpdate?: (updatedTask: Task) => void
  onStatusChange?: (taskId: string, newStatus: Task['status']) => void
}

export function PlanReview({ task, onPlanUpdate, onStatusChange }: PlanReviewProps) {
  const [isEditing, setIsEditing] = useState(false)
  const [editedPlan, setEditedPlan] = useState(task.plan || '')
  const updateTaskMutation = useUpdateTask()

  const isLoading = updateTaskMutation.isPending
  const canReview = task.status === 'PLAN_REVIEWING'
  const hasPlan = Boolean(task.plan?.trim())

  const handleApprovePlan = async () => {
    try {
      const updatedTask = await updateTaskMutation.mutateAsync({
        taskId: task.id,
        updates: { status: 'IMPLEMENTING' }
      })
      onStatusChange?.(task.id, 'IMPLEMENTING')
      onPlanUpdate?.(updatedTask)
      toast.success('Plan approved! Task moved to implementation.')
    } catch (error) {
      // Error handled by mutation hook
    }
  }

  const handleRejectPlan = async () => {
    try {
      const updatedTask = await updateTaskMutation.mutateAsync({
        taskId: task.id,
        updates: { status: 'PLANNING' }
      })
      onStatusChange?.(task.id, 'PLANNING')
      onPlanUpdate?.(updatedTask)
      toast.success('Plan rejected. Task moved back to planning.')
    } catch (error) {
      // Error handled by mutation hook
    }
  }

  const handleSavePlan = async (newPlan: string) => {
    try {
      const updatedTask = await updateTaskMutation.mutateAsync({
        taskId: task.id,
        updates: { plan: newPlan }
      })
      setEditedPlan(newPlan)
      setIsEditing(false)
      onPlanUpdate?.(updatedTask)
      toast.success('Plan updated successfully!')
    } catch (error) {
      // Error handled by mutation hook
    }
  }

  const handleExportPlan = () => {
    if (!task.plan) return
    
    const blob = new Blob([task.plan], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${task.title.replace(/[^a-zA-Z0-9]/g, '-')}-plan.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast.success('Plan exported successfully!')
  }

  if (!hasPlan) {
    return (
      <Card className="w-full">
        <CardContent className="flex flex-col items-center justify-center py-8">
          <FileText className="h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No Plan Available</h3>
          <p className="text-sm text-gray-500 text-center max-w-md">
            This task doesn't have a plan yet. The plan will appear here once it's generated by the AI planning process.
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="w-full space-y-6">
      {/* Plan Status Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <CardTitle className="text-xl">Implementation Plan</CardTitle>
              <Badge 
                variant={task.status === 'PLAN_REVIEWING' ? 'default' : 'outline'}
                className="capitalize"
              >
                {task.status.replace('_', ' ').toLowerCase()}
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleExportPlan}
                disabled={isLoading}
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsEditing(!isEditing)}
                disabled={isLoading}
              >
                <Edit className="h-4 w-4 mr-2" />
                {isEditing ? 'Cancel' : 'Edit'}
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Plan Content */}
      <Card className="flex-1">
        {isEditing ? (
          <CardContent className="p-0">
            <PlanEditor
              initialValue={editedPlan}
              onSave={handleSavePlan}
              onCancel={() => setIsEditing(false)}
              isLoading={isLoading}
            />
          </CardContent>
        ) : (
          <>
            <CardHeader>
              <Tabs defaultValue="preview" className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="preview" className="flex items-center gap-2">
                    <Eye className="h-4 w-4" />
                    Preview
                  </TabsTrigger>
                  <TabsTrigger value="markdown" className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    Markdown
                  </TabsTrigger>
                </TabsList>
                <TabsContent value="preview" className="mt-4">
                  <PlanPreview content={task.plan || ''} />
                </TabsContent>
                <TabsContent value="markdown" className="mt-4">
                  <div className="rounded-md border bg-gray-50 p-4">
                    <pre className="whitespace-pre-wrap text-sm font-mono">
                      {task.plan}
                    </pre>
                  </div>
                </TabsContent>
              </Tabs>
            </CardHeader>

            {/* Review Actions */}
            {canReview && (
              <>
                <Separator />
                <CardFooter className="flex justify-center gap-4 py-6">
                  <Button
                    variant="outline"
                    onClick={handleRejectPlan}
                    disabled={isLoading}
                    className="flex items-center gap-2 text-red-600 border-red-200 hover:bg-red-50"
                  >
                    <X className="h-4 w-4" />
                    Reject Plan
                  </Button>
                  <Button
                    onClick={handleApprovePlan}
                    disabled={isLoading}
                    className="flex items-center gap-2 bg-green-600 hover:bg-green-700"
                  >
                    <Check className="h-4 w-4" />
                    Approve Plan
                  </Button>
                </CardFooter>
              </>
            )}
          </>
        )}
      </Card>

      {/* Plan Metadata */}
      {task.updated_at && (
        <Card>
          <CardContent className="py-4">
            <div className="flex items-center justify-between text-sm text-gray-500">
              <span>
                Last updated: {new Date(task.updated_at).toLocaleString()}
              </span>
              <span>
                Plan length: {task.plan?.length || 0} characters
              </span>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}