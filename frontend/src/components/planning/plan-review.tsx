import { useState } from 'react'
import type { Task } from '@/types/task'
import { Check, X, Edit, Download, FileText, Eye } from 'lucide-react'
import { toast } from 'sonner'
import { useUpdateTask } from '@/hooks/use-tasks'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import { Separator } from '@/components/ui/separator'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { PlanEditor } from './plan-editor'
import { PlanPreview } from './plan-preview'

interface PlanReviewProps {
  task: Task
  onPlanUpdate?: (updatedTask: Task) => void
  onStatusChange?: (taskId: string, newStatus: Task['status']) => void
}

export function PlanReview({
  task,
  onPlanUpdate,
  onStatusChange,
}: PlanReviewProps) {
  const firstPlan = task.plans && task.plans.length > 0 ? task.plans[0] : null
  const planContent = firstPlan?.content || ''
  const [isEditing, setIsEditing] = useState(false)
  const [editedPlan, setEditedPlan] = useState(planContent)
  const updateTaskMutation = useUpdateTask()

  const isLoading = updateTaskMutation.isPending
  const canReview = task.status === 'PLAN_REVIEWING'
  const hasPlan = Boolean(planContent?.trim())

  const handleApprovePlan = async () => {
    try {
      const updatedTask = await updateTaskMutation.mutateAsync({
        taskId: task.id,
        updates: { status: 'IMPLEMENTING' },
      })
      onStatusChange?.(task.id, 'IMPLEMENTING')
      onPlanUpdate?.(updatedTask)
      toast.success('Plan approved! Task moved to implementation.')
    } catch (error) {
      // Error handled by mutation hook
    }
  }

  const handleRejectPlan = async () => {
    try {
      const updatedTask = await updateTaskMutation.mutateAsync({
        taskId: task.id,
        updates: { status: 'PLANNING' },
      })
      onStatusChange?.(task.id, 'PLANNING')
      onPlanUpdate?.(updatedTask)
      toast.success('Plan rejected. Task moved back to planning.')
    } catch (error) {
      // Error handled by mutation hook
    }
  }

  const handleSavePlan = async (newPlan: string) => {
    try {
      const updatedTask = await updateTaskMutation.mutateAsync({
        taskId: task.id,
        updates: { plan: newPlan },
      })
      setEditedPlan(newPlan)
      setIsEditing(false)
      onPlanUpdate?.(updatedTask)
      toast.success('Plan updated successfully!')
    } catch (error) {
      // Error handled by mutation hook
    }
  }

  const handleExportPlan = () => {
    if (!task.plan) return

    const blob = new Blob([task.plan], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${task.title.replace(/[^a-zA-Z0-9]/g, '-')}-plan.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast.success('Plan exported successfully!')
  }

  if (!hasPlan) {
    return (
      <Card className='w-full'>
        <CardContent className='flex flex-col items-center justify-center py-8'>
          <FileText className='mb-4 h-12 w-12 text-gray-400' />
          <h3 className='mb-2 text-lg font-medium text-gray-900'>
            No Plan Available
          </h3>
          <p className='max-w-md text-center text-sm text-gray-500'>
            This task doesn't have a plan yet. The plan will appear here once
            it's generated by the AI planning process.
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className='w-full'>
      <CardContent className='flex flex-col items-center justify-center py-8'>
        <PlanPreview content={planContent} />
      </CardContent>
    </Card>
  )
}
