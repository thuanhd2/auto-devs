name: Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  backend:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: autodevs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
      
      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/migrate
          migrate -version
      
      - name: Download dependencies
        run: make deps
      
      - name: Set up test environment
        run: |
          cp .env.test.example .env
          cp .env.test.example .env.test
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/autodevs_test?sslmode=disable
        run: make migrate-up
      
      - name: Generate mocks
        run: make mocks
      
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/autodevs_test?sslmode=disable
        run: make test

  frontend:
    name: Frontend Tests (React/TypeScript)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run linter
        working-directory: frontend
        run: npm run lint
      
      - name: Check code formatting
        working-directory: frontend
        run: npm run format:check
      
      - name: Build project (includes TypeScript compilation)
        working-directory: frontend
        run: npm run build